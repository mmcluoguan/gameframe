// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_common_2eproto_metadata_getter(int index);
namespace frmpub {
namespace protocc {
class CommonObject;
struct CommonObjectDefaultTypeInternal;
extern CommonObjectDefaultTypeInternal _CommonObject_default_instance_;
class CommonObject_routing;
struct CommonObject_routingDefaultTypeInternal;
extern CommonObject_routingDefaultTypeInternal _CommonObject_routing_default_instance_;
class FieldsEntry;
struct FieldsEntryDefaultTypeInternal;
extern FieldsEntryDefaultTypeInternal _FieldsEntry_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class errcode;
struct errcodeDefaultTypeInternal;
extern errcodeDefaultTypeInternal _errcode_default_instance_;
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> ::frmpub::protocc::CommonObject* Arena::CreateMaybeMessage<::frmpub::protocc::CommonObject>(Arena*);
template<> ::frmpub::protocc::CommonObject_routing* Arena::CreateMaybeMessage<::frmpub::protocc::CommonObject_routing>(Arena*);
template<> ::frmpub::protocc::FieldsEntry* Arena::CreateMaybeMessage<::frmpub::protocc::FieldsEntry>(Arena*);
template<> ::frmpub::protocc::ServerInfo* Arena::CreateMaybeMessage<::frmpub::protocc::ServerInfo>(Arena*);
template<> ::frmpub::protocc::errcode* Arena::CreateMaybeMessage<::frmpub::protocc::errcode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frmpub {
namespace protocc {

enum BroadcastMsgId : int {
  ERRCODE = 0,
  BroadcastMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BroadcastMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BroadcastMsgId_IsValid(int value);
constexpr BroadcastMsgId BroadcastMsgId_MIN = ERRCODE;
constexpr BroadcastMsgId BroadcastMsgId_MAX = ERRCODE;
constexpr int BroadcastMsgId_ARRAYSIZE = BroadcastMsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastMsgId_descriptor();
template<typename T>
inline const std::string& BroadcastMsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastMsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastMsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastMsgId_descriptor(), enum_t_value);
}
inline bool BroadcastMsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastMsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastMsgId>(
    BroadcastMsgId_descriptor(), name, value);
}
enum ServerType : int {
  UNKNOW = 0,
  DBVISIT = 1,
  WORLD = 2,
  LOGIN = 3,
  GAME = 4,
  GATE = 5,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerType_IsValid(int value);
constexpr ServerType ServerType_MIN = UNKNOW;
constexpr ServerType ServerType_MAX = GATE;
constexpr int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor();
template<typename T>
inline const std::string& ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerType_descriptor(), enum_t_value);
}
inline bool ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
enum errnum : int {
  MESSAGE_PARSING_ERROR = 0,
  ILLEGAL_UNKNOWN_MESSAGE = 1,
  GAMS_NOT_EXIST = 2,
  LOGIN_NOT_EXIST = 3,
  WORLD_NOT_EXIST = 4,
  DBVISIT_NOT_EXIST = 5,
  GATE_NOT_EXIST = 6,
  DB_CACHE_ERROR = 7,
  UNAUTHENTICATED = 8,
  CLIENT_CLOSEED = 9,
  UNKNOWN_SERVER_TYPE = 10,
  errnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  errnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool errnum_IsValid(int value);
constexpr errnum errnum_MIN = MESSAGE_PARSING_ERROR;
constexpr errnum errnum_MAX = UNKNOWN_SERVER_TYPE;
constexpr int errnum_ARRAYSIZE = errnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* errnum_descriptor();
template<typename T>
inline const std::string& errnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, errnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function errnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    errnum_descriptor(), enum_t_value);
}
inline bool errnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, errnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<errnum>(
    errnum_descriptor(), name, value);
}
// ===================================================================

class CommonObject_routing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.CommonObject.routing) */ {
 public:
  inline CommonObject_routing() : CommonObject_routing(nullptr) {}
  virtual ~CommonObject_routing();
  explicit constexpr CommonObject_routing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonObject_routing(const CommonObject_routing& from);
  CommonObject_routing(CommonObject_routing&& from) noexcept
    : CommonObject_routing() {
    *this = ::std::move(from);
  }

  inline CommonObject_routing& operator=(const CommonObject_routing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonObject_routing& operator=(CommonObject_routing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonObject_routing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonObject_routing* internal_default_instance() {
    return reinterpret_cast<const CommonObject_routing*>(
               &_CommonObject_routing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonObject_routing& a, CommonObject_routing& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonObject_routing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonObject_routing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonObject_routing* New() const final {
    return CreateMaybeMessage<CommonObject_routing>(nullptr);
  }

  CommonObject_routing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonObject_routing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonObject_routing& from);
  void MergeFrom(const CommonObject_routing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonObject_routing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.CommonObject.routing";
  }
  protected:
  explicit CommonObject_routing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_common_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kFdFieldNumber = 1,
  };
  // bytes addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const void* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 fd = 1;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::uint32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.CommonObject.routing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CommonObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.CommonObject) */ {
 public:
  inline CommonObject() : CommonObject(nullptr) {}
  virtual ~CommonObject();
  explicit constexpr CommonObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonObject(const CommonObject& from);
  CommonObject(CommonObject&& from) noexcept
    : CommonObject() {
    *this = ::std::move(from);
  }

  inline CommonObject& operator=(const CommonObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonObject& operator=(CommonObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonObject* internal_default_instance() {
    return reinterpret_cast<const CommonObject*>(
               &_CommonObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonObject& a, CommonObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonObject* New() const final {
    return CreateMaybeMessage<CommonObject>(nullptr);
  }

  CommonObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonObject& from);
  void MergeFrom(const CommonObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.CommonObject";
  }
  protected:
  explicit CommonObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_common_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommonObject_routing routing;

  // accessors -------------------------------------------------------

  enum : int {
    kRsFieldNumber = 2,
    kExtendFieldNumber = 3,
    kMsgdataFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // repeated .frmpub.protocc.CommonObject.routing rs = 2;
  int rs_size() const;
  private:
  int _internal_rs_size() const;
  public:
  void clear_rs();
  ::frmpub::protocc::CommonObject_routing* mutable_rs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::CommonObject_routing >*
      mutable_rs();
  private:
  const ::frmpub::protocc::CommonObject_routing& _internal_rs(int index) const;
  ::frmpub::protocc::CommonObject_routing* _internal_add_rs();
  public:
  const ::frmpub::protocc::CommonObject_routing& rs(int index) const;
  ::frmpub::protocc::CommonObject_routing* add_rs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::CommonObject_routing >&
      rs() const;

  // string extend = 3;
  void clear_extend();
  const std::string& extend() const;
  void set_extend(const std::string& value);
  void set_extend(std::string&& value);
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  std::string* mutable_extend();
  std::string* release_extend();
  void set_allocated_extend(std::string* extend);
  private:
  const std::string& _internal_extend() const;
  void _internal_set_extend(const std::string& value);
  std::string* _internal_mutable_extend();
  public:

  // bytes msgdata = 4;
  void clear_msgdata();
  const std::string& msgdata() const;
  void set_msgdata(const std::string& value);
  void set_msgdata(std::string&& value);
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  std::string* mutable_msgdata();
  std::string* release_msgdata();
  void set_allocated_msgdata(std::string* msgdata);
  private:
  const std::string& _internal_msgdata() const;
  void _internal_set_msgdata(const std::string& value);
  std::string* _internal_mutable_msgdata();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.CommonObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::CommonObject_routing > rs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  virtual ~ServerInfo();
  explicit constexpr ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(nullptr);
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_common_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kNameFieldNumber = 5,
    kPortFieldNumber = 2,
    kStFieldNumber = 3,
    kSidFieldNumber = 4,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .frmpub.protocc.ServerType st = 3;
  void clear_st();
  ::frmpub::protocc::ServerType st() const;
  void set_st(::frmpub::protocc::ServerType value);
  private:
  ::frmpub::protocc::ServerType _internal_st() const;
  void _internal_set_st(::frmpub::protocc::ServerType value);
  public:

  // int32 sid = 4;
  void clear_sid();
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sid() const;
  void _internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int st_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FieldsEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.FieldsEntry) */ {
 public:
  inline FieldsEntry() : FieldsEntry(nullptr) {}
  virtual ~FieldsEntry();
  explicit constexpr FieldsEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldsEntry(const FieldsEntry& from);
  FieldsEntry(FieldsEntry&& from) noexcept
    : FieldsEntry() {
    *this = ::std::move(from);
  }

  inline FieldsEntry& operator=(const FieldsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsEntry& operator=(FieldsEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldsEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldsEntry* internal_default_instance() {
    return reinterpret_cast<const FieldsEntry*>(
               &_FieldsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldsEntry& a, FieldsEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldsEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldsEntry* New() const final {
    return CreateMaybeMessage<FieldsEntry>(nullptr);
  }

  FieldsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldsEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldsEntry& from);
  void MergeFrom(const FieldsEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldsEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.FieldsEntry";
  }
  protected:
  explicit FieldsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_common_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.FieldsEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class errcode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.errcode) */ {
 public:
  inline errcode() : errcode(nullptr) {}
  virtual ~errcode();
  explicit constexpr errcode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  errcode(const errcode& from);
  errcode(errcode&& from) noexcept
    : errcode() {
    *this = ::std::move(from);
  }

  inline errcode& operator=(const errcode& from) {
    CopyFrom(from);
    return *this;
  }
  inline errcode& operator=(errcode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const errcode& default_instance() {
    return *internal_default_instance();
  }
  static inline const errcode* internal_default_instance() {
    return reinterpret_cast<const errcode*>(
               &_errcode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(errcode& a, errcode& b) {
    a.Swap(&b);
  }
  inline void Swap(errcode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(errcode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline errcode* New() const final {
    return CreateMaybeMessage<errcode>(nullptr);
  }

  errcode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<errcode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const errcode& from);
  void MergeFrom(const errcode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(errcode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.errcode";
  }
  protected:
  explicit errcode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_common_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string desc = 2;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .frmpub.protocc.errnum code = 1;
  void clear_code();
  ::frmpub::protocc::errnum code() const;
  void set_code(::frmpub::protocc::errnum value);
  private:
  ::frmpub::protocc::errnum _internal_code() const;
  void _internal_set_code(::frmpub::protocc::errnum value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.errcode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonObject_routing

// uint32 fd = 1;
inline void CommonObject_routing::clear_fd() {
  fd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonObject_routing::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonObject_routing::fd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.CommonObject.routing.fd)
  return _internal_fd();
}
inline void CommonObject_routing::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fd_ = value;
}
inline void CommonObject_routing::set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.CommonObject.routing.fd)
}

// bytes addr = 2;
inline void CommonObject_routing::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& CommonObject_routing::addr() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.CommonObject.routing.addr)
  return _internal_addr();
}
inline void CommonObject_routing::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.CommonObject.routing.addr)
}
inline std::string* CommonObject_routing::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.CommonObject.routing.addr)
  return _internal_mutable_addr();
}
inline const std::string& CommonObject_routing::_internal_addr() const {
  return addr_.Get();
}
inline void CommonObject_routing::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonObject_routing::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.CommonObject.routing.addr)
}
inline void CommonObject_routing::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.CommonObject.routing.addr)
}
inline void CommonObject_routing::set_addr(const void* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.CommonObject.routing.addr)
}
inline std::string* CommonObject_routing::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonObject_routing::release_addr() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.CommonObject.routing.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonObject_routing::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.CommonObject.routing.addr)
}

// -------------------------------------------------------------------

// CommonObject

// int32 msgid = 1;
inline void CommonObject::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonObject::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonObject::msgid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.CommonObject.msgid)
  return _internal_msgid();
}
inline void CommonObject::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void CommonObject::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.CommonObject.msgid)
}

// repeated .frmpub.protocc.CommonObject.routing rs = 2;
inline int CommonObject::_internal_rs_size() const {
  return rs_.size();
}
inline int CommonObject::rs_size() const {
  return _internal_rs_size();
}
inline void CommonObject::clear_rs() {
  rs_.Clear();
}
inline ::frmpub::protocc::CommonObject_routing* CommonObject::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.CommonObject.rs)
  return rs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::CommonObject_routing >*
CommonObject::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.CommonObject.rs)
  return &rs_;
}
inline const ::frmpub::protocc::CommonObject_routing& CommonObject::_internal_rs(int index) const {
  return rs_.Get(index);
}
inline const ::frmpub::protocc::CommonObject_routing& CommonObject::rs(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.CommonObject.rs)
  return _internal_rs(index);
}
inline ::frmpub::protocc::CommonObject_routing* CommonObject::_internal_add_rs() {
  return rs_.Add();
}
inline ::frmpub::protocc::CommonObject_routing* CommonObject::add_rs() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.CommonObject.rs)
  return _internal_add_rs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::CommonObject_routing >&
CommonObject::rs() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.CommonObject.rs)
  return rs_;
}

// string extend = 3;
inline void CommonObject::clear_extend() {
  extend_.ClearToEmpty();
}
inline const std::string& CommonObject::extend() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.CommonObject.extend)
  return _internal_extend();
}
inline void CommonObject::set_extend(const std::string& value) {
  _internal_set_extend(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.CommonObject.extend)
}
inline std::string* CommonObject::mutable_extend() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.CommonObject.extend)
  return _internal_mutable_extend();
}
inline const std::string& CommonObject::_internal_extend() const {
  return extend_.Get();
}
inline void CommonObject::_internal_set_extend(const std::string& value) {
  
  extend_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonObject::set_extend(std::string&& value) {
  
  extend_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.CommonObject.extend)
}
inline void CommonObject::set_extend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extend_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.CommonObject.extend)
}
inline void CommonObject::set_extend(const char* value,
    size_t size) {
  
  extend_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.CommonObject.extend)
}
inline std::string* CommonObject::_internal_mutable_extend() {
  
  return extend_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonObject::release_extend() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.CommonObject.extend)
  return extend_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonObject::set_allocated_extend(std::string* extend) {
  if (extend != nullptr) {
    
  } else {
    
  }
  extend_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extend,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.CommonObject.extend)
}

// bytes msgdata = 4;
inline void CommonObject::clear_msgdata() {
  msgdata_.ClearToEmpty();
}
inline const std::string& CommonObject::msgdata() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.CommonObject.msgdata)
  return _internal_msgdata();
}
inline void CommonObject::set_msgdata(const std::string& value) {
  _internal_set_msgdata(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.CommonObject.msgdata)
}
inline std::string* CommonObject::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.CommonObject.msgdata)
  return _internal_mutable_msgdata();
}
inline const std::string& CommonObject::_internal_msgdata() const {
  return msgdata_.Get();
}
inline void CommonObject::_internal_set_msgdata(const std::string& value) {
  
  msgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonObject::set_msgdata(std::string&& value) {
  
  msgdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.CommonObject.msgdata)
}
inline void CommonObject::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.CommonObject.msgdata)
}
inline void CommonObject::set_msgdata(const void* value,
    size_t size) {
  
  msgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.CommonObject.msgdata)
}
inline std::string* CommonObject::_internal_mutable_msgdata() {
  
  return msgdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonObject::release_msgdata() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.CommonObject.msgdata)
  return msgdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonObject::set_allocated_msgdata(std::string* msgdata) {
  if (msgdata != nullptr) {
    
  } else {
    
  }
  msgdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.CommonObject.msgdata)
}

// -------------------------------------------------------------------

// ServerInfo

// string ip = 1;
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ServerInfo.ip)
  return _internal_ip();
}
inline void ServerInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ServerInfo.ip)
}
inline std::string* ServerInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.ServerInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServerInfo::_internal_ip() const {
  return ip_.Get();
}
inline void ServerInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerInfo::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.ServerInfo.ip)
}
inline std::string* ServerInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.ServerInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.ServerInfo.ip)
}

// int32 port = 2;
inline void ServerInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ServerInfo.port)
  return _internal_port();
}
inline void ServerInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServerInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ServerInfo.port)
}

// .frmpub.protocc.ServerType st = 3;
inline void ServerInfo::clear_st() {
  st_ = 0;
}
inline ::frmpub::protocc::ServerType ServerInfo::_internal_st() const {
  return static_cast< ::frmpub::protocc::ServerType >(st_);
}
inline ::frmpub::protocc::ServerType ServerInfo::st() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ServerInfo.st)
  return _internal_st();
}
inline void ServerInfo::_internal_set_st(::frmpub::protocc::ServerType value) {
  
  st_ = value;
}
inline void ServerInfo::set_st(::frmpub::protocc::ServerType value) {
  _internal_set_st(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ServerInfo.st)
}

// int32 sid = 4;
inline void ServerInfo::clear_sid() {
  sid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::_internal_sid() const {
  return sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::sid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ServerInfo.sid)
  return _internal_sid();
}
inline void ServerInfo::_internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sid_ = value;
}
inline void ServerInfo::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ServerInfo.sid)
}

// string name = 5;
inline void ServerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ServerInfo.name)
  return _internal_name();
}
inline void ServerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ServerInfo.name)
}
inline std::string* ServerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.ServerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ServerInfo::_internal_name() const {
  return name_.Get();
}
inline void ServerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.ServerInfo.name)
}
inline void ServerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.ServerInfo.name)
}
inline void ServerInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.ServerInfo.name)
}
inline std::string* ServerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.ServerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.ServerInfo.name)
}

// -------------------------------------------------------------------

// FieldsEntry

// string key = 1;
inline void FieldsEntry::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& FieldsEntry::key() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.FieldsEntry.key)
  return _internal_key();
}
inline void FieldsEntry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.FieldsEntry.key)
}
inline std::string* FieldsEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.FieldsEntry.key)
  return _internal_mutable_key();
}
inline const std::string& FieldsEntry::_internal_key() const {
  return key_.Get();
}
inline void FieldsEntry::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FieldsEntry::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.FieldsEntry.key)
}
inline void FieldsEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.FieldsEntry.key)
}
inline void FieldsEntry::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.FieldsEntry.key)
}
inline std::string* FieldsEntry::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FieldsEntry::release_key() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.FieldsEntry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldsEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.FieldsEntry.key)
}

// string value = 2;
inline void FieldsEntry::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FieldsEntry::value() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.FieldsEntry.value)
  return _internal_value();
}
inline void FieldsEntry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.FieldsEntry.value)
}
inline std::string* FieldsEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.FieldsEntry.value)
  return _internal_mutable_value();
}
inline const std::string& FieldsEntry::_internal_value() const {
  return value_.Get();
}
inline void FieldsEntry::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FieldsEntry::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.FieldsEntry.value)
}
inline void FieldsEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.FieldsEntry.value)
}
inline void FieldsEntry::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.FieldsEntry.value)
}
inline std::string* FieldsEntry::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FieldsEntry::release_value() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.FieldsEntry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldsEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.FieldsEntry.value)
}

// -------------------------------------------------------------------

// errcode

// .frmpub.protocc.errnum code = 1;
inline void errcode::clear_code() {
  code_ = 0;
}
inline ::frmpub::protocc::errnum errcode::_internal_code() const {
  return static_cast< ::frmpub::protocc::errnum >(code_);
}
inline ::frmpub::protocc::errnum errcode::code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.errcode.code)
  return _internal_code();
}
inline void errcode::_internal_set_code(::frmpub::protocc::errnum value) {
  
  code_ = value;
}
inline void errcode::set_code(::frmpub::protocc::errnum value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.errcode.code)
}

// string desc = 2;
inline void errcode::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& errcode::desc() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.errcode.desc)
  return _internal_desc();
}
inline void errcode::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.errcode.desc)
}
inline std::string* errcode::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.errcode.desc)
  return _internal_mutable_desc();
}
inline const std::string& errcode::_internal_desc() const {
  return desc_.Get();
}
inline void errcode::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void errcode::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.errcode.desc)
}
inline void errcode::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.errcode.desc)
}
inline void errcode::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.errcode.desc)
}
inline std::string* errcode::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* errcode::release_desc() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.errcode.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void errcode::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.errcode.desc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocc
}  // namespace frmpub

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frmpub::protocc::BroadcastMsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frmpub::protocc::BroadcastMsgId>() {
  return ::frmpub::protocc::BroadcastMsgId_descriptor();
}
template <> struct is_proto_enum< ::frmpub::protocc::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frmpub::protocc::ServerType>() {
  return ::frmpub::protocc::ServerType_descriptor();
}
template <> struct is_proto_enum< ::frmpub::protocc::errnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frmpub::protocc::errnum>() {
  return ::frmpub::protocc::errnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
