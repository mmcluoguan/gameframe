// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_animal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_animal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_animal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_animal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[65]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_animal_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_animal_2eproto_metadata_getter(int index);
namespace frmpub {
namespace protocc {
class activated_coin_log_ca_s;
struct activated_coin_log_ca_sDefaultTypeInternal;
extern activated_coin_log_ca_sDefaultTypeInternal _activated_coin_log_ca_s_default_instance_;
class activated_coin_log_ca_s_item;
struct activated_coin_log_ca_s_itemDefaultTypeInternal;
extern activated_coin_log_ca_s_itemDefaultTypeInternal _activated_coin_log_ca_s_item_default_instance_;
class booking_ca_c;
struct booking_ca_cDefaultTypeInternal;
extern booking_ca_cDefaultTypeInternal _booking_ca_c_default_instance_;
class booking_ca_s;
struct booking_ca_sDefaultTypeInternal;
extern booking_ca_sDefaultTypeInternal _booking_ca_s_default_instance_;
class booking_list_ca_s;
struct booking_list_ca_sDefaultTypeInternal;
extern booking_list_ca_sDefaultTypeInternal _booking_list_ca_s_default_instance_;
class booking_list_ca_s_item;
struct booking_list_ca_s_itemDefaultTypeInternal;
extern booking_list_ca_s_itemDefaultTypeInternal _booking_list_ca_s_item_default_instance_;
class buy_info_ca_c;
struct buy_info_ca_cDefaultTypeInternal;
extern buy_info_ca_cDefaultTypeInternal _buy_info_ca_c_default_instance_;
class buy_info_ca_s;
struct buy_info_ca_sDefaultTypeInternal;
extern buy_info_ca_sDefaultTypeInternal _buy_info_ca_s_default_instance_;
class contract_rob_ca_s;
struct contract_rob_ca_sDefaultTypeInternal;
extern contract_rob_ca_sDefaultTypeInternal _contract_rob_ca_s_default_instance_;
class contract_rob_ca_s_item;
struct contract_rob_ca_s_itemDefaultTypeInternal;
extern contract_rob_ca_s_itemDefaultTypeInternal _contract_rob_ca_s_item_default_instance_;
class depth_list_ca_s;
struct depth_list_ca_sDefaultTypeInternal;
extern depth_list_ca_sDefaultTypeInternal _depth_list_ca_s_default_instance_;
class depth_list_ca_s_item;
struct depth_list_ca_s_itemDefaultTypeInternal;
extern depth_list_ca_s_itemDefaultTypeInternal _depth_list_ca_s_item_default_instance_;
class dispatch_coin_log_ca_s;
struct dispatch_coin_log_ca_sDefaultTypeInternal;
extern dispatch_coin_log_ca_sDefaultTypeInternal _dispatch_coin_log_ca_s_default_instance_;
class dispatch_coin_log_ca_s_item;
struct dispatch_coin_log_ca_s_itemDefaultTypeInternal;
extern dispatch_coin_log_ca_s_itemDefaultTypeInternal _dispatch_coin_log_ca_s_item_default_instance_;
class enabled_ca_s;
struct enabled_ca_sDefaultTypeInternal;
extern enabled_ca_sDefaultTypeInternal _enabled_ca_s_default_instance_;
class get_coin_ca_c;
struct get_coin_ca_cDefaultTypeInternal;
extern get_coin_ca_cDefaultTypeInternal _get_coin_ca_c_default_instance_;
class get_coin_ca_s;
struct get_coin_ca_sDefaultTypeInternal;
extern get_coin_ca_sDefaultTypeInternal _get_coin_ca_s_default_instance_;
class getcontract_ca_c;
struct getcontract_ca_cDefaultTypeInternal;
extern getcontract_ca_cDefaultTypeInternal _getcontract_ca_c_default_instance_;
class getcontract_ca_s;
struct getcontract_ca_sDefaultTypeInternal;
extern getcontract_ca_sDefaultTypeInternal _getcontract_ca_s_default_instance_;
class idcard_ca_c;
struct idcard_ca_cDefaultTypeInternal;
extern idcard_ca_cDefaultTypeInternal _idcard_ca_c_default_instance_;
class idcard_ca_s;
struct idcard_ca_sDefaultTypeInternal;
extern idcard_ca_sDefaultTypeInternal _idcard_ca_s_default_instance_;
class income_log_ca_c;
struct income_log_ca_cDefaultTypeInternal;
extern income_log_ca_cDefaultTypeInternal _income_log_ca_c_default_instance_;
class income_log_ca_s;
struct income_log_ca_sDefaultTypeInternal;
extern income_log_ca_sDefaultTypeInternal _income_log_ca_s_default_instance_;
class income_log_ca_s_item;
struct income_log_ca_s_itemDefaultTypeInternal;
extern income_log_ca_s_itemDefaultTypeInternal _income_log_ca_s_item_default_instance_;
class login_ca_c;
struct login_ca_cDefaultTypeInternal;
extern login_ca_cDefaultTypeInternal _login_ca_c_default_instance_;
class login_ca_s;
struct login_ca_sDefaultTypeInternal;
extern login_ca_sDefaultTypeInternal _login_ca_s_default_instance_;
class login_pwd_ca_c;
struct login_pwd_ca_cDefaultTypeInternal;
extern login_pwd_ca_cDefaultTypeInternal _login_pwd_ca_c_default_instance_;
class login_pwd_ca_s;
struct login_pwd_ca_sDefaultTypeInternal;
extern login_pwd_ca_sDefaultTypeInternal _login_pwd_ca_s_default_instance_;
class mail_list_ca_s;
struct mail_list_ca_sDefaultTypeInternal;
extern mail_list_ca_sDefaultTypeInternal _mail_list_ca_s_default_instance_;
class mail_list_ca_s_item;
struct mail_list_ca_s_itemDefaultTypeInternal;
extern mail_list_ca_s_itemDefaultTypeInternal _mail_list_ca_s_item_default_instance_;
class mail_look_ca_c;
struct mail_look_ca_cDefaultTypeInternal;
extern mail_look_ca_cDefaultTypeInternal _mail_look_ca_c_default_instance_;
class mail_look_ca_s;
struct mail_look_ca_sDefaultTypeInternal;
extern mail_look_ca_sDefaultTypeInternal _mail_look_ca_s_default_instance_;
class myteam_ca_s;
struct myteam_ca_sDefaultTypeInternal;
extern myteam_ca_sDefaultTypeInternal _myteam_ca_s_default_instance_;
class official_info_ca_s;
struct official_info_ca_sDefaultTypeInternal;
extern official_info_ca_sDefaultTypeInternal _official_info_ca_s_default_instance_;
class order_list_ca_c;
struct order_list_ca_cDefaultTypeInternal;
extern order_list_ca_cDefaultTypeInternal _order_list_ca_c_default_instance_;
class order_list_ca_s;
struct order_list_ca_sDefaultTypeInternal;
extern order_list_ca_sDefaultTypeInternal _order_list_ca_s_default_instance_;
class order_list_ca_s_item;
struct order_list_ca_s_itemDefaultTypeInternal;
extern order_list_ca_s_itemDefaultTypeInternal _order_list_ca_s_item_default_instance_;
class order_oper_ca_c;
struct order_oper_ca_cDefaultTypeInternal;
extern order_oper_ca_cDefaultTypeInternal _order_oper_ca_c_default_instance_;
class order_oper_ca_s;
struct order_oper_ca_sDefaultTypeInternal;
extern order_oper_ca_sDefaultTypeInternal _order_oper_ca_s_default_instance_;
class pay_order_ca_c;
struct pay_order_ca_cDefaultTypeInternal;
extern pay_order_ca_cDefaultTypeInternal _pay_order_ca_c_default_instance_;
class pay_order_ca_s;
struct pay_order_ca_sDefaultTypeInternal;
extern pay_order_ca_sDefaultTypeInternal _pay_order_ca_s_default_instance_;
class recharge_ca_c;
struct recharge_ca_cDefaultTypeInternal;
extern recharge_ca_cDefaultTypeInternal _recharge_ca_c_default_instance_;
class recharge_ca_s;
struct recharge_ca_sDefaultTypeInternal;
extern recharge_ca_sDefaultTypeInternal _recharge_ca_s_default_instance_;
class register_ca_c;
struct register_ca_cDefaultTypeInternal;
extern register_ca_cDefaultTypeInternal _register_ca_c_default_instance_;
class register_ca_s;
struct register_ca_sDefaultTypeInternal;
extern register_ca_sDefaultTypeInternal _register_ca_s_default_instance_;
class rob_ca_c;
struct rob_ca_cDefaultTypeInternal;
extern rob_ca_cDefaultTypeInternal _rob_ca_c_default_instance_;
class rob_ca_s;
struct rob_ca_sDefaultTypeInternal;
extern rob_ca_sDefaultTypeInternal _rob_ca_s_default_instance_;
class self_assets_ca_s;
struct self_assets_ca_sDefaultTypeInternal;
extern self_assets_ca_sDefaultTypeInternal _self_assets_ca_s_default_instance_;
class self_assets_ca_s_item;
struct self_assets_ca_s_itemDefaultTypeInternal;
extern self_assets_ca_s_itemDefaultTypeInternal _self_assets_ca_s_item_default_instance_;
class sell_info_ca_c;
struct sell_info_ca_cDefaultTypeInternal;
extern sell_info_ca_cDefaultTypeInternal _sell_info_ca_c_default_instance_;
class sell_info_ca_s;
struct sell_info_ca_sDefaultTypeInternal;
extern sell_info_ca_sDefaultTypeInternal _sell_info_ca_s_default_instance_;
class setwallet_ca_c;
struct setwallet_ca_cDefaultTypeInternal;
extern setwallet_ca_cDefaultTypeInternal _setwallet_ca_c_default_instance_;
class setwallet_ca_s;
struct setwallet_ca_sDefaultTypeInternal;
extern setwallet_ca_sDefaultTypeInternal _setwallet_ca_s_default_instance_;
class sign_ca_s;
struct sign_ca_sDefaultTypeInternal;
extern sign_ca_sDefaultTypeInternal _sign_ca_s_default_instance_;
class sms_ca_c;
struct sms_ca_cDefaultTypeInternal;
extern sms_ca_cDefaultTypeInternal _sms_ca_c_default_instance_;
class sms_ca_s;
struct sms_ca_sDefaultTypeInternal;
extern sms_ca_sDefaultTypeInternal _sms_ca_s_default_instance_;
class transfer_ca_c;
struct transfer_ca_cDefaultTypeInternal;
extern transfer_ca_cDefaultTypeInternal _transfer_ca_c_default_instance_;
class transfer_ca_cs;
struct transfer_ca_csDefaultTypeInternal;
extern transfer_ca_csDefaultTypeInternal _transfer_ca_cs_default_instance_;
class transfer_ca_s;
struct transfer_ca_sDefaultTypeInternal;
extern transfer_ca_sDefaultTypeInternal _transfer_ca_s_default_instance_;
class updata_pwd_ca_c;
struct updata_pwd_ca_cDefaultTypeInternal;
extern updata_pwd_ca_cDefaultTypeInternal _updata_pwd_ca_c_default_instance_;
class updata_pwd_ca_s;
struct updata_pwd_ca_sDefaultTypeInternal;
extern updata_pwd_ca_sDefaultTypeInternal _updata_pwd_ca_s_default_instance_;
class upload_ca_c;
struct upload_ca_cDefaultTypeInternal;
extern upload_ca_cDefaultTypeInternal _upload_ca_c_default_instance_;
class upload_ca_s;
struct upload_ca_sDefaultTypeInternal;
extern upload_ca_sDefaultTypeInternal _upload_ca_s_default_instance_;
class user_info_ca_c;
struct user_info_ca_cDefaultTypeInternal;
extern user_info_ca_cDefaultTypeInternal _user_info_ca_c_default_instance_;
class user_info_ca_s;
struct user_info_ca_sDefaultTypeInternal;
extern user_info_ca_sDefaultTypeInternal _user_info_ca_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> ::frmpub::protocc::activated_coin_log_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::activated_coin_log_ca_s>(Arena*);
template<> ::frmpub::protocc::activated_coin_log_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::activated_coin_log_ca_s_item>(Arena*);
template<> ::frmpub::protocc::booking_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::booking_ca_c>(Arena*);
template<> ::frmpub::protocc::booking_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::booking_ca_s>(Arena*);
template<> ::frmpub::protocc::booking_list_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::booking_list_ca_s>(Arena*);
template<> ::frmpub::protocc::booking_list_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::booking_list_ca_s_item>(Arena*);
template<> ::frmpub::protocc::buy_info_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::buy_info_ca_c>(Arena*);
template<> ::frmpub::protocc::buy_info_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::buy_info_ca_s>(Arena*);
template<> ::frmpub::protocc::contract_rob_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::contract_rob_ca_s>(Arena*);
template<> ::frmpub::protocc::contract_rob_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::contract_rob_ca_s_item>(Arena*);
template<> ::frmpub::protocc::depth_list_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::depth_list_ca_s>(Arena*);
template<> ::frmpub::protocc::depth_list_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::depth_list_ca_s_item>(Arena*);
template<> ::frmpub::protocc::dispatch_coin_log_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::dispatch_coin_log_ca_s>(Arena*);
template<> ::frmpub::protocc::dispatch_coin_log_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::dispatch_coin_log_ca_s_item>(Arena*);
template<> ::frmpub::protocc::enabled_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::enabled_ca_s>(Arena*);
template<> ::frmpub::protocc::get_coin_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::get_coin_ca_c>(Arena*);
template<> ::frmpub::protocc::get_coin_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::get_coin_ca_s>(Arena*);
template<> ::frmpub::protocc::getcontract_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::getcontract_ca_c>(Arena*);
template<> ::frmpub::protocc::getcontract_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::getcontract_ca_s>(Arena*);
template<> ::frmpub::protocc::idcard_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::idcard_ca_c>(Arena*);
template<> ::frmpub::protocc::idcard_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::idcard_ca_s>(Arena*);
template<> ::frmpub::protocc::income_log_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::income_log_ca_c>(Arena*);
template<> ::frmpub::protocc::income_log_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::income_log_ca_s>(Arena*);
template<> ::frmpub::protocc::income_log_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::income_log_ca_s_item>(Arena*);
template<> ::frmpub::protocc::login_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::login_ca_c>(Arena*);
template<> ::frmpub::protocc::login_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::login_ca_s>(Arena*);
template<> ::frmpub::protocc::login_pwd_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::login_pwd_ca_c>(Arena*);
template<> ::frmpub::protocc::login_pwd_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::login_pwd_ca_s>(Arena*);
template<> ::frmpub::protocc::mail_list_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::mail_list_ca_s>(Arena*);
template<> ::frmpub::protocc::mail_list_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::mail_list_ca_s_item>(Arena*);
template<> ::frmpub::protocc::mail_look_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::mail_look_ca_c>(Arena*);
template<> ::frmpub::protocc::mail_look_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::mail_look_ca_s>(Arena*);
template<> ::frmpub::protocc::myteam_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::myteam_ca_s>(Arena*);
template<> ::frmpub::protocc::official_info_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::official_info_ca_s>(Arena*);
template<> ::frmpub::protocc::order_list_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::order_list_ca_c>(Arena*);
template<> ::frmpub::protocc::order_list_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::order_list_ca_s>(Arena*);
template<> ::frmpub::protocc::order_list_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::order_list_ca_s_item>(Arena*);
template<> ::frmpub::protocc::order_oper_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::order_oper_ca_c>(Arena*);
template<> ::frmpub::protocc::order_oper_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::order_oper_ca_s>(Arena*);
template<> ::frmpub::protocc::pay_order_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::pay_order_ca_c>(Arena*);
template<> ::frmpub::protocc::pay_order_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::pay_order_ca_s>(Arena*);
template<> ::frmpub::protocc::recharge_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_ca_c>(Arena*);
template<> ::frmpub::protocc::recharge_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_ca_s>(Arena*);
template<> ::frmpub::protocc::register_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::register_ca_c>(Arena*);
template<> ::frmpub::protocc::register_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::register_ca_s>(Arena*);
template<> ::frmpub::protocc::rob_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::rob_ca_c>(Arena*);
template<> ::frmpub::protocc::rob_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::rob_ca_s>(Arena*);
template<> ::frmpub::protocc::self_assets_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::self_assets_ca_s>(Arena*);
template<> ::frmpub::protocc::self_assets_ca_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::self_assets_ca_s_item>(Arena*);
template<> ::frmpub::protocc::sell_info_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::sell_info_ca_c>(Arena*);
template<> ::frmpub::protocc::sell_info_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::sell_info_ca_s>(Arena*);
template<> ::frmpub::protocc::setwallet_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::setwallet_ca_c>(Arena*);
template<> ::frmpub::protocc::setwallet_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::setwallet_ca_s>(Arena*);
template<> ::frmpub::protocc::sign_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::sign_ca_s>(Arena*);
template<> ::frmpub::protocc::sms_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::sms_ca_c>(Arena*);
template<> ::frmpub::protocc::sms_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::sms_ca_s>(Arena*);
template<> ::frmpub::protocc::transfer_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::transfer_ca_c>(Arena*);
template<> ::frmpub::protocc::transfer_ca_cs* Arena::CreateMaybeMessage<::frmpub::protocc::transfer_ca_cs>(Arena*);
template<> ::frmpub::protocc::transfer_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::transfer_ca_s>(Arena*);
template<> ::frmpub::protocc::updata_pwd_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::updata_pwd_ca_c>(Arena*);
template<> ::frmpub::protocc::updata_pwd_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::updata_pwd_ca_s>(Arena*);
template<> ::frmpub::protocc::upload_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::upload_ca_c>(Arena*);
template<> ::frmpub::protocc::upload_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::upload_ca_s>(Arena*);
template<> ::frmpub::protocc::user_info_ca_c* Arena::CreateMaybeMessage<::frmpub::protocc::user_info_ca_c>(Arena*);
template<> ::frmpub::protocc::user_info_ca_s* Arena::CreateMaybeMessage<::frmpub::protocc::user_info_ca_s>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frmpub {
namespace protocc {

enum AnimalMsgId : int {
  ANIMALMSGID_BEGIN = 0,
  CLIENT_ANIMAL_BEGIN = 1500,
  LOGIN_CA_C = 1501,
  LOGIN_CA_S = 1502,
  ENABLED_CA_C = 1503,
  ENABLED_CA_S = 1504,
  SETWALLET_CA_C = 1505,
  SETWALLET_CA_S = 1506,
  MYTEAM_CA_C = 1507,
  MYTEAM_CA_S = 1508,
  DEPTH_LIST_CA_C = 1509,
  DEPTH_LIST_CA_S = 1510,
  IDCARD_CA_C = 1511,
  IDCARD_CA_S = 1512,
  SIGN_CA_C = 1513,
  SIGN_CA_S = 1514,
  LOGIN_PWD_CA_C = 1515,
  LOGIN_PWD_CA_S = 1516,
  DISPATCH_COIN_LOG_CA_C = 1517,
  DISPATCH_COIN_LOG_CA_S = 1518,
  RECHARGE_CA_C = 1519,
  RECHARGE_CA_S = 1520,
  TRANSFER_CA_C = 1521,
  TRANSFER_CA_S = 1522,
  TRANSFER_CA_CS = 1523,
  ACTIVATED_COIN_LOG_CA_C = 1525,
  ACTIVATED_COIN_LOG_CA_S = 1526,
  SELF_ASSETS_CA_C = 1527,
  SELF_ASSETS_CA_S = 1528,
  INCOME_LOG_CA_C = 1529,
  INCOME_LOG_CA_S = 1530,
  GETCONTRACT_CA_C = 1531,
  GETCONTRACT_CA_S = 1532,
  GET_COIN_CA_C = 1533,
  GET_COIN_CA_S = 1534,
  MAIL_LIST_CA_C = 1535,
  MAIL_LIST_CA_S = 1536,
  MAIL_LOOK_CA_C = 1537,
  MAIL_LOOK_CA_S = 1538,
  SMS_CA_C = 1539,
  SMS_CA_S = 1540,
  UPDATA_PWD_CA_C = 1541,
  UPDATA_PWD_CA_S = 1542,
  OFFICIAL_INFO_CA_C = 1543,
  OFFICIAL_INFO_CA_S = 1544,
  REGISTER_CA_C = 1545,
  REGISTER_CA_S = 1546,
  BOOKING_LIST_CA_C = 1547,
  BOOKING_LIST_CA_S = 1548,
  CONTRACT_ROB_CA_C = 1549,
  CONTRACT_ROB_CA_S = 1550,
  BOOKING_CA_C = 1551,
  BOOKING_CA_S = 1552,
  ROB_CA_C = 1553,
  ROB_CA_S = 1554,
  ORDER_LIST_CA_C = 1555,
  ORDER_LIST_CA_S = 1556,
  SELL_INFO_CA_C = 1557,
  SELL_INFO_CA_S = 1558,
  PAY_ORDER_CA_C = 1559,
  PAY_ORDER_CA_S = 1560,
  BUY_INFO_CA_C = 1561,
  BUY_INFO_CA_S = 1562,
  ORDER_OPER_CA_C = 1563,
  ORDER_OPER_CA_S = 1564,
  UPLOAD_CA_C = 1565,
  UPLOAD_CA_S = 1566,
  USER_INFO_CA_C = 1567,
  USER_INFO_CA_S = 1568,
  CLIENT_ANIMAL_END = 2000,
  ANIMALMSGID_END = 5000,
  AnimalMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnimalMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnimalMsgId_IsValid(int value);
constexpr AnimalMsgId AnimalMsgId_MIN = ANIMALMSGID_BEGIN;
constexpr AnimalMsgId AnimalMsgId_MAX = ANIMALMSGID_END;
constexpr int AnimalMsgId_ARRAYSIZE = AnimalMsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimalMsgId_descriptor();
template<typename T>
inline const std::string& AnimalMsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnimalMsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnimalMsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnimalMsgId_descriptor(), enum_t_value);
}
inline bool AnimalMsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnimalMsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnimalMsgId>(
    AnimalMsgId_descriptor(), name, value);
}
// ===================================================================

class login_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.login_ca_c) */ {
 public:
  inline login_ca_c() : login_ca_c(nullptr) {}
  virtual ~login_ca_c();
  explicit constexpr login_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_ca_c(const login_ca_c& from);
  login_ca_c(login_ca_c&& from) noexcept
    : login_ca_c() {
    *this = ::std::move(from);
  }

  inline login_ca_c& operator=(const login_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_ca_c& operator=(login_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_ca_c* internal_default_instance() {
    return reinterpret_cast<const login_ca_c*>(
               &_login_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(login_ca_c& a, login_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(login_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_ca_c* New() const final {
    return CreateMaybeMessage<login_ca_c>(nullptr);
  }

  login_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_ca_c& from);
  void MergeFrom(const login_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.login_ca_c";
  }
  protected:
  explicit login_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwdFieldNumber = 2,
    kPhoneFieldNumber = 1,
  };
  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.login_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class login_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.login_ca_s) */ {
 public:
  inline login_ca_s() : login_ca_s(nullptr) {}
  virtual ~login_ca_s();
  explicit constexpr login_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_ca_s(const login_ca_s& from);
  login_ca_s(login_ca_s&& from) noexcept
    : login_ca_s() {
    *this = ::std::move(from);
  }

  inline login_ca_s& operator=(const login_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_ca_s& operator=(login_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_ca_s* internal_default_instance() {
    return reinterpret_cast<const login_ca_s*>(
               &_login_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_ca_s& a, login_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(login_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_ca_s* New() const final {
    return CreateMaybeMessage<login_ca_s>(nullptr);
  }

  login_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_ca_s& from);
  void MergeFrom(const login_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.login_ca_s";
  }
  protected:
  explicit login_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 12,
    kBankNameFieldNumber = 13,
    kBankCardidFieldNumber = 14,
    kBankUserNameFieldNumber = 15,
    kAilpayIdFieldNumber = 16,
    kAlipayNameFieldNumber = 17,
    kWebchatNameFieldNumber = 18,
    kNameFieldNumber = 19,
    kIdcardFieldNumber = 20,
    kInviteFieldNumber = 24,
    kResultFieldNumber = 1,
    kActivatedCoinFieldNumber = 2,
    kDispatchCoinFieldNumber = 3,
    kStaticIncomeFieldNumber = 4,
    kPromoteIncomeFieldNumber = 5,
    kTeamIncomeFieldNumber = 6,
    kEnableFieldNumber = 7,
    kAssetsFieldNumber = 8,
    kLevelFieldNumber = 9,
    kNameVerifieFieldNumber = 10,
    kPayVerifieFieldNumber = 11,
    kPromoteCurrentIncomeFieldNumber = 21,
    kTeamCurrentIncomeFieldNumber = 22,
    kSignTimeFieldNumber = 23,
  };
  // string nichen = 12;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string bank_name = 13;
  void clear_bank_name();
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // string bank_cardid = 14;
  void clear_bank_cardid();
  const std::string& bank_cardid() const;
  void set_bank_cardid(const std::string& value);
  void set_bank_cardid(std::string&& value);
  void set_bank_cardid(const char* value);
  void set_bank_cardid(const char* value, size_t size);
  std::string* mutable_bank_cardid();
  std::string* release_bank_cardid();
  void set_allocated_bank_cardid(std::string* bank_cardid);
  private:
  const std::string& _internal_bank_cardid() const;
  void _internal_set_bank_cardid(const std::string& value);
  std::string* _internal_mutable_bank_cardid();
  public:

  // string bank_user_name = 15;
  void clear_bank_user_name();
  const std::string& bank_user_name() const;
  void set_bank_user_name(const std::string& value);
  void set_bank_user_name(std::string&& value);
  void set_bank_user_name(const char* value);
  void set_bank_user_name(const char* value, size_t size);
  std::string* mutable_bank_user_name();
  std::string* release_bank_user_name();
  void set_allocated_bank_user_name(std::string* bank_user_name);
  private:
  const std::string& _internal_bank_user_name() const;
  void _internal_set_bank_user_name(const std::string& value);
  std::string* _internal_mutable_bank_user_name();
  public:

  // string ailpay_id = 16;
  void clear_ailpay_id();
  const std::string& ailpay_id() const;
  void set_ailpay_id(const std::string& value);
  void set_ailpay_id(std::string&& value);
  void set_ailpay_id(const char* value);
  void set_ailpay_id(const char* value, size_t size);
  std::string* mutable_ailpay_id();
  std::string* release_ailpay_id();
  void set_allocated_ailpay_id(std::string* ailpay_id);
  private:
  const std::string& _internal_ailpay_id() const;
  void _internal_set_ailpay_id(const std::string& value);
  std::string* _internal_mutable_ailpay_id();
  public:

  // string alipay_name = 17;
  void clear_alipay_name();
  const std::string& alipay_name() const;
  void set_alipay_name(const std::string& value);
  void set_alipay_name(std::string&& value);
  void set_alipay_name(const char* value);
  void set_alipay_name(const char* value, size_t size);
  std::string* mutable_alipay_name();
  std::string* release_alipay_name();
  void set_allocated_alipay_name(std::string* alipay_name);
  private:
  const std::string& _internal_alipay_name() const;
  void _internal_set_alipay_name(const std::string& value);
  std::string* _internal_mutable_alipay_name();
  public:

  // string webchat_name = 18;
  void clear_webchat_name();
  const std::string& webchat_name() const;
  void set_webchat_name(const std::string& value);
  void set_webchat_name(std::string&& value);
  void set_webchat_name(const char* value);
  void set_webchat_name(const char* value, size_t size);
  std::string* mutable_webchat_name();
  std::string* release_webchat_name();
  void set_allocated_webchat_name(std::string* webchat_name);
  private:
  const std::string& _internal_webchat_name() const;
  void _internal_set_webchat_name(const std::string& value);
  std::string* _internal_mutable_webchat_name();
  public:

  // string name = 19;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string idcard = 20;
  void clear_idcard();
  const std::string& idcard() const;
  void set_idcard(const std::string& value);
  void set_idcard(std::string&& value);
  void set_idcard(const char* value);
  void set_idcard(const char* value, size_t size);
  std::string* mutable_idcard();
  std::string* release_idcard();
  void set_allocated_idcard(std::string* idcard);
  private:
  const std::string& _internal_idcard() const;
  void _internal_set_idcard(const std::string& value);
  std::string* _internal_mutable_idcard();
  public:

  // string invite = 24;
  void clear_invite();
  const std::string& invite() const;
  void set_invite(const std::string& value);
  void set_invite(std::string&& value);
  void set_invite(const char* value);
  void set_invite(const char* value, size_t size);
  std::string* mutable_invite();
  std::string* release_invite();
  void set_allocated_invite(std::string* invite);
  private:
  const std::string& _internal_invite() const;
  void _internal_set_invite(const std::string& value);
  std::string* _internal_mutable_invite();
  public:

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activated_coin = 2;
  void clear_activated_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin() const;
  void set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_coin() const;
  void _internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dispatch_coin = 3;
  void clear_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin() const;
  void set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dispatch_coin() const;
  void _internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float static_income = 4;
  void clear_static_income();
  float static_income() const;
  void set_static_income(float value);
  private:
  float _internal_static_income() const;
  void _internal_set_static_income(float value);
  public:

  // float promote_income = 5;
  void clear_promote_income();
  float promote_income() const;
  void set_promote_income(float value);
  private:
  float _internal_promote_income() const;
  void _internal_set_promote_income(float value);
  public:

  // float team_income = 6;
  void clear_team_income();
  float team_income() const;
  void set_team_income(float value);
  private:
  float _internal_team_income() const;
  void _internal_set_team_income(float value);
  public:

  // bool enable = 7;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // float assets = 8;
  void clear_assets();
  float assets() const;
  void set_assets(float value);
  private:
  float _internal_assets() const;
  void _internal_set_assets(float value);
  public:

  // int32 level = 9;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 name_verifie = 10;
  void clear_name_verifie();
  ::PROTOBUF_NAMESPACE_ID::int32 name_verifie() const;
  void set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name_verifie() const;
  void _internal_set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pay_verifie = 11;
  void clear_pay_verifie();
  ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie() const;
  void set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pay_verifie() const;
  void _internal_set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float promote_current_income = 21;
  void clear_promote_current_income();
  float promote_current_income() const;
  void set_promote_current_income(float value);
  private:
  float _internal_promote_current_income() const;
  void _internal_set_promote_current_income(float value);
  public:

  // float team_current_income = 22;
  void clear_team_current_income();
  float team_current_income() const;
  void set_team_current_income(float value);
  private:
  float _internal_team_current_income() const;
  void _internal_set_team_current_income(float value);
  public:

  // int32 sign_time = 23;
  void clear_sign_time();
  ::PROTOBUF_NAMESPACE_ID::int32 sign_time() const;
  void set_sign_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sign_time() const;
  void _internal_set_sign_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.login_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_cardid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ailpay_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alipay_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webchat_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idcard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_;
  float static_income_;
  float promote_income_;
  float team_income_;
  bool enable_;
  float assets_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_;
  ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_;
  float promote_current_income_;
  float team_current_income_;
  ::PROTOBUF_NAMESPACE_ID::int32 sign_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class enabled_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.enabled_ca_s) */ {
 public:
  inline enabled_ca_s() : enabled_ca_s(nullptr) {}
  virtual ~enabled_ca_s();
  explicit constexpr enabled_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  enabled_ca_s(const enabled_ca_s& from);
  enabled_ca_s(enabled_ca_s&& from) noexcept
    : enabled_ca_s() {
    *this = ::std::move(from);
  }

  inline enabled_ca_s& operator=(const enabled_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline enabled_ca_s& operator=(enabled_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const enabled_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const enabled_ca_s* internal_default_instance() {
    return reinterpret_cast<const enabled_ca_s*>(
               &_enabled_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(enabled_ca_s& a, enabled_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(enabled_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enabled_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline enabled_ca_s* New() const final {
    return CreateMaybeMessage<enabled_ca_s>(nullptr);
  }

  enabled_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<enabled_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const enabled_ca_s& from);
  void MergeFrom(const enabled_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enabled_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.enabled_ca_s";
  }
  protected:
  explicit enabled_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kActivatedCoinFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activated_coin = 2;
  void clear_activated_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin() const;
  void set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_coin() const;
  void _internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.enabled_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class setwallet_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.setwallet_ca_c) */ {
 public:
  inline setwallet_ca_c() : setwallet_ca_c(nullptr) {}
  virtual ~setwallet_ca_c();
  explicit constexpr setwallet_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setwallet_ca_c(const setwallet_ca_c& from);
  setwallet_ca_c(setwallet_ca_c&& from) noexcept
    : setwallet_ca_c() {
    *this = ::std::move(from);
  }

  inline setwallet_ca_c& operator=(const setwallet_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline setwallet_ca_c& operator=(setwallet_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setwallet_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const setwallet_ca_c* internal_default_instance() {
    return reinterpret_cast<const setwallet_ca_c*>(
               &_setwallet_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(setwallet_ca_c& a, setwallet_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(setwallet_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setwallet_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setwallet_ca_c* New() const final {
    return CreateMaybeMessage<setwallet_ca_c>(nullptr);
  }

  setwallet_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setwallet_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setwallet_ca_c& from);
  void MergeFrom(const setwallet_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setwallet_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.setwallet_ca_c";
  }
  protected:
  explicit setwallet_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBankNameFieldNumber = 1,
    kBankCardidFieldNumber = 2,
    kBankUserNameFieldNumber = 3,
    kAilpayIdFieldNumber = 4,
    kAlipayNameFieldNumber = 5,
    kWebchatNameFieldNumber = 6,
  };
  // string bank_name = 1;
  void clear_bank_name();
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // string bank_cardid = 2;
  void clear_bank_cardid();
  const std::string& bank_cardid() const;
  void set_bank_cardid(const std::string& value);
  void set_bank_cardid(std::string&& value);
  void set_bank_cardid(const char* value);
  void set_bank_cardid(const char* value, size_t size);
  std::string* mutable_bank_cardid();
  std::string* release_bank_cardid();
  void set_allocated_bank_cardid(std::string* bank_cardid);
  private:
  const std::string& _internal_bank_cardid() const;
  void _internal_set_bank_cardid(const std::string& value);
  std::string* _internal_mutable_bank_cardid();
  public:

  // string bank_user_name = 3;
  void clear_bank_user_name();
  const std::string& bank_user_name() const;
  void set_bank_user_name(const std::string& value);
  void set_bank_user_name(std::string&& value);
  void set_bank_user_name(const char* value);
  void set_bank_user_name(const char* value, size_t size);
  std::string* mutable_bank_user_name();
  std::string* release_bank_user_name();
  void set_allocated_bank_user_name(std::string* bank_user_name);
  private:
  const std::string& _internal_bank_user_name() const;
  void _internal_set_bank_user_name(const std::string& value);
  std::string* _internal_mutable_bank_user_name();
  public:

  // string ailpay_id = 4;
  void clear_ailpay_id();
  const std::string& ailpay_id() const;
  void set_ailpay_id(const std::string& value);
  void set_ailpay_id(std::string&& value);
  void set_ailpay_id(const char* value);
  void set_ailpay_id(const char* value, size_t size);
  std::string* mutable_ailpay_id();
  std::string* release_ailpay_id();
  void set_allocated_ailpay_id(std::string* ailpay_id);
  private:
  const std::string& _internal_ailpay_id() const;
  void _internal_set_ailpay_id(const std::string& value);
  std::string* _internal_mutable_ailpay_id();
  public:

  // string alipay_name = 5;
  void clear_alipay_name();
  const std::string& alipay_name() const;
  void set_alipay_name(const std::string& value);
  void set_alipay_name(std::string&& value);
  void set_alipay_name(const char* value);
  void set_alipay_name(const char* value, size_t size);
  std::string* mutable_alipay_name();
  std::string* release_alipay_name();
  void set_allocated_alipay_name(std::string* alipay_name);
  private:
  const std::string& _internal_alipay_name() const;
  void _internal_set_alipay_name(const std::string& value);
  std::string* _internal_mutable_alipay_name();
  public:

  // string webchat_name = 6;
  void clear_webchat_name();
  const std::string& webchat_name() const;
  void set_webchat_name(const std::string& value);
  void set_webchat_name(std::string&& value);
  void set_webchat_name(const char* value);
  void set_webchat_name(const char* value, size_t size);
  std::string* mutable_webchat_name();
  std::string* release_webchat_name();
  void set_allocated_webchat_name(std::string* webchat_name);
  private:
  const std::string& _internal_webchat_name() const;
  void _internal_set_webchat_name(const std::string& value);
  std::string* _internal_mutable_webchat_name();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.setwallet_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_cardid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ailpay_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alipay_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webchat_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class setwallet_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.setwallet_ca_s) */ {
 public:
  inline setwallet_ca_s() : setwallet_ca_s(nullptr) {}
  virtual ~setwallet_ca_s();
  explicit constexpr setwallet_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setwallet_ca_s(const setwallet_ca_s& from);
  setwallet_ca_s(setwallet_ca_s&& from) noexcept
    : setwallet_ca_s() {
    *this = ::std::move(from);
  }

  inline setwallet_ca_s& operator=(const setwallet_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline setwallet_ca_s& operator=(setwallet_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setwallet_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const setwallet_ca_s* internal_default_instance() {
    return reinterpret_cast<const setwallet_ca_s*>(
               &_setwallet_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(setwallet_ca_s& a, setwallet_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(setwallet_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setwallet_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setwallet_ca_s* New() const final {
    return CreateMaybeMessage<setwallet_ca_s>(nullptr);
  }

  setwallet_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setwallet_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setwallet_ca_s& from);
  void MergeFrom(const setwallet_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setwallet_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.setwallet_ca_s";
  }
  protected:
  explicit setwallet_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kPayVerifieFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pay_verifie = 2;
  void clear_pay_verifie();
  ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie() const;
  void set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pay_verifie() const;
  void _internal_set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.setwallet_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class myteam_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.myteam_ca_s) */ {
 public:
  inline myteam_ca_s() : myteam_ca_s(nullptr) {}
  virtual ~myteam_ca_s();
  explicit constexpr myteam_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  myteam_ca_s(const myteam_ca_s& from);
  myteam_ca_s(myteam_ca_s&& from) noexcept
    : myteam_ca_s() {
    *this = ::std::move(from);
  }

  inline myteam_ca_s& operator=(const myteam_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline myteam_ca_s& operator=(myteam_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const myteam_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const myteam_ca_s* internal_default_instance() {
    return reinterpret_cast<const myteam_ca_s*>(
               &_myteam_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(myteam_ca_s& a, myteam_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(myteam_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(myteam_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline myteam_ca_s* New() const final {
    return CreateMaybeMessage<myteam_ca_s>(nullptr);
  }

  myteam_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<myteam_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const myteam_ca_s& from);
  void MergeFrom(const myteam_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(myteam_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.myteam_ca_s";
  }
  protected:
  explicit myteam_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamTotalAssetsFieldNumber = 1,
    kTeamTotalActivatedNumFieldNumber = 2,
    kTeamTotalRegisterNumFieldNumber = 3,
    kDepth1TotalActivatedNumFieldNumber = 4,
    kDepth1TotalRegisterNumFieldNumber = 5,
    kDepth2TotalActivatedNumFieldNumber = 6,
    kDepth2TotalRegisterNumFieldNumber = 7,
    kDepth3TotalActivatedNumFieldNumber = 8,
    kDepth3TotalRegisterNumFieldNumber = 9,
  };
  // float team_total_assets = 1;
  void clear_team_total_assets();
  float team_total_assets() const;
  void set_team_total_assets(float value);
  private:
  float _internal_team_total_assets() const;
  void _internal_set_team_total_assets(float value);
  public:

  // int32 team_total_activated_num = 2;
  void clear_team_total_activated_num();
  ::PROTOBUF_NAMESPACE_ID::int32 team_total_activated_num() const;
  void set_team_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_total_activated_num() const;
  void _internal_set_team_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 team_total_register_num = 3;
  void clear_team_total_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 team_total_register_num() const;
  void set_team_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_total_register_num() const;
  void _internal_set_team_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth1_total_activated_num = 4;
  void clear_depth1_total_activated_num();
  ::PROTOBUF_NAMESPACE_ID::int32 depth1_total_activated_num() const;
  void set_depth1_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth1_total_activated_num() const;
  void _internal_set_depth1_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth1_total_register_num = 5;
  void clear_depth1_total_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 depth1_total_register_num() const;
  void set_depth1_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth1_total_register_num() const;
  void _internal_set_depth1_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth2_total_activated_num = 6;
  void clear_depth2_total_activated_num();
  ::PROTOBUF_NAMESPACE_ID::int32 depth2_total_activated_num() const;
  void set_depth2_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth2_total_activated_num() const;
  void _internal_set_depth2_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth2_total_register_num = 7;
  void clear_depth2_total_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 depth2_total_register_num() const;
  void set_depth2_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth2_total_register_num() const;
  void _internal_set_depth2_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth3_total_activated_num = 8;
  void clear_depth3_total_activated_num();
  ::PROTOBUF_NAMESPACE_ID::int32 depth3_total_activated_num() const;
  void set_depth3_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth3_total_activated_num() const;
  void _internal_set_depth3_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth3_total_register_num = 9;
  void clear_depth3_total_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 depth3_total_register_num() const;
  void set_depth3_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth3_total_register_num() const;
  void _internal_set_depth3_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.myteam_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float team_total_assets_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_total_activated_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_total_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth1_total_activated_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth1_total_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth2_total_activated_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth2_total_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth3_total_activated_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth3_total_register_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class depth_list_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.depth_list_ca_s.item) */ {
 public:
  inline depth_list_ca_s_item() : depth_list_ca_s_item(nullptr) {}
  virtual ~depth_list_ca_s_item();
  explicit constexpr depth_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  depth_list_ca_s_item(const depth_list_ca_s_item& from);
  depth_list_ca_s_item(depth_list_ca_s_item&& from) noexcept
    : depth_list_ca_s_item() {
    *this = ::std::move(from);
  }

  inline depth_list_ca_s_item& operator=(const depth_list_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline depth_list_ca_s_item& operator=(depth_list_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depth_list_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const depth_list_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const depth_list_ca_s_item*>(
               &_depth_list_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(depth_list_ca_s_item& a, depth_list_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(depth_list_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(depth_list_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depth_list_ca_s_item* New() const final {
    return CreateMaybeMessage<depth_list_ca_s_item>(nullptr);
  }

  depth_list_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depth_list_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depth_list_ca_s_item& from);
  void MergeFrom(const depth_list_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depth_list_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.depth_list_ca_s.item";
  }
  protected:
  explicit depth_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNcFieldNumber = 1,
    kNumFieldNumber = 2,
    kAssetsFieldNumber = 3,
  };
  // string nc = 1;
  void clear_nc();
  const std::string& nc() const;
  void set_nc(const std::string& value);
  void set_nc(std::string&& value);
  void set_nc(const char* value);
  void set_nc(const char* value, size_t size);
  std::string* mutable_nc();
  std::string* release_nc();
  void set_allocated_nc(std::string* nc);
  private:
  const std::string& _internal_nc() const;
  void _internal_set_nc(const std::string& value);
  std::string* _internal_mutable_nc();
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float assets = 3;
  void clear_assets();
  float assets() const;
  void set_assets(float value);
  private:
  float _internal_assets() const;
  void _internal_set_assets(float value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.depth_list_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nc_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  float assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class depth_list_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.depth_list_ca_s) */ {
 public:
  inline depth_list_ca_s() : depth_list_ca_s(nullptr) {}
  virtual ~depth_list_ca_s();
  explicit constexpr depth_list_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  depth_list_ca_s(const depth_list_ca_s& from);
  depth_list_ca_s(depth_list_ca_s&& from) noexcept
    : depth_list_ca_s() {
    *this = ::std::move(from);
  }

  inline depth_list_ca_s& operator=(const depth_list_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline depth_list_ca_s& operator=(depth_list_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depth_list_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const depth_list_ca_s* internal_default_instance() {
    return reinterpret_cast<const depth_list_ca_s*>(
               &_depth_list_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(depth_list_ca_s& a, depth_list_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(depth_list_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(depth_list_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depth_list_ca_s* New() const final {
    return CreateMaybeMessage<depth_list_ca_s>(nullptr);
  }

  depth_list_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depth_list_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depth_list_ca_s& from);
  void MergeFrom(const depth_list_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depth_list_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.depth_list_ca_s";
  }
  protected:
  explicit depth_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef depth_list_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kSifsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.depth_list_ca_s.item sifs = 1;
  int sifs_size() const;
  private:
  int _internal_sifs_size() const;
  public:
  void clear_sifs();
  ::frmpub::protocc::depth_list_ca_s_item* mutable_sifs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::depth_list_ca_s_item >*
      mutable_sifs();
  private:
  const ::frmpub::protocc::depth_list_ca_s_item& _internal_sifs(int index) const;
  ::frmpub::protocc::depth_list_ca_s_item* _internal_add_sifs();
  public:
  const ::frmpub::protocc::depth_list_ca_s_item& sifs(int index) const;
  ::frmpub::protocc::depth_list_ca_s_item* add_sifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::depth_list_ca_s_item >&
      sifs() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.depth_list_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::depth_list_ca_s_item > sifs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class idcard_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.idcard_ca_c) */ {
 public:
  inline idcard_ca_c() : idcard_ca_c(nullptr) {}
  virtual ~idcard_ca_c();
  explicit constexpr idcard_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  idcard_ca_c(const idcard_ca_c& from);
  idcard_ca_c(idcard_ca_c&& from) noexcept
    : idcard_ca_c() {
    *this = ::std::move(from);
  }

  inline idcard_ca_c& operator=(const idcard_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline idcard_ca_c& operator=(idcard_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const idcard_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const idcard_ca_c* internal_default_instance() {
    return reinterpret_cast<const idcard_ca_c*>(
               &_idcard_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(idcard_ca_c& a, idcard_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(idcard_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(idcard_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline idcard_ca_c* New() const final {
    return CreateMaybeMessage<idcard_ca_c>(nullptr);
  }

  idcard_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<idcard_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const idcard_ca_c& from);
  void MergeFrom(const idcard_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(idcard_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.idcard_ca_c";
  }
  protected:
  explicit idcard_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdcardFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string idcard = 2;
  void clear_idcard();
  const std::string& idcard() const;
  void set_idcard(const std::string& value);
  void set_idcard(std::string&& value);
  void set_idcard(const char* value);
  void set_idcard(const char* value, size_t size);
  std::string* mutable_idcard();
  std::string* release_idcard();
  void set_allocated_idcard(std::string* idcard);
  private:
  const std::string& _internal_idcard() const;
  void _internal_set_idcard(const std::string& value);
  std::string* _internal_mutable_idcard();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.idcard_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idcard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class idcard_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.idcard_ca_s) */ {
 public:
  inline idcard_ca_s() : idcard_ca_s(nullptr) {}
  virtual ~idcard_ca_s();
  explicit constexpr idcard_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  idcard_ca_s(const idcard_ca_s& from);
  idcard_ca_s(idcard_ca_s&& from) noexcept
    : idcard_ca_s() {
    *this = ::std::move(from);
  }

  inline idcard_ca_s& operator=(const idcard_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline idcard_ca_s& operator=(idcard_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const idcard_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const idcard_ca_s* internal_default_instance() {
    return reinterpret_cast<const idcard_ca_s*>(
               &_idcard_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(idcard_ca_s& a, idcard_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(idcard_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(idcard_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline idcard_ca_s* New() const final {
    return CreateMaybeMessage<idcard_ca_s>(nullptr);
  }

  idcard_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<idcard_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const idcard_ca_s& from);
  void MergeFrom(const idcard_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(idcard_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.idcard_ca_s";
  }
  protected:
  explicit idcard_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kNameVerifieFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 name_verifie = 2;
  void clear_name_verifie();
  ::PROTOBUF_NAMESPACE_ID::int32 name_verifie() const;
  void set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name_verifie() const;
  void _internal_set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.idcard_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class sign_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sign_ca_s) */ {
 public:
  inline sign_ca_s() : sign_ca_s(nullptr) {}
  virtual ~sign_ca_s();
  explicit constexpr sign_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sign_ca_s(const sign_ca_s& from);
  sign_ca_s(sign_ca_s&& from) noexcept
    : sign_ca_s() {
    *this = ::std::move(from);
  }

  inline sign_ca_s& operator=(const sign_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline sign_ca_s& operator=(sign_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sign_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const sign_ca_s* internal_default_instance() {
    return reinterpret_cast<const sign_ca_s*>(
               &_sign_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(sign_ca_s& a, sign_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(sign_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sign_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sign_ca_s* New() const final {
    return CreateMaybeMessage<sign_ca_s>(nullptr);
  }

  sign_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sign_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sign_ca_s& from);
  void MergeFrom(const sign_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sign_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sign_ca_s";
  }
  protected:
  explicit sign_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kDispatchCoinFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dispatch_coin = 2;
  void clear_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin() const;
  void set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dispatch_coin() const;
  void _internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sign_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class login_pwd_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.login_pwd_ca_c) */ {
 public:
  inline login_pwd_ca_c() : login_pwd_ca_c(nullptr) {}
  virtual ~login_pwd_ca_c();
  explicit constexpr login_pwd_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_pwd_ca_c(const login_pwd_ca_c& from);
  login_pwd_ca_c(login_pwd_ca_c&& from) noexcept
    : login_pwd_ca_c() {
    *this = ::std::move(from);
  }

  inline login_pwd_ca_c& operator=(const login_pwd_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_pwd_ca_c& operator=(login_pwd_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_pwd_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_pwd_ca_c* internal_default_instance() {
    return reinterpret_cast<const login_pwd_ca_c*>(
               &_login_pwd_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(login_pwd_ca_c& a, login_pwd_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(login_pwd_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_pwd_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_pwd_ca_c* New() const final {
    return CreateMaybeMessage<login_pwd_ca_c>(nullptr);
  }

  login_pwd_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_pwd_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_pwd_ca_c& from);
  void MergeFrom(const login_pwd_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_pwd_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.login_pwd_ca_c";
  }
  protected:
  explicit login_pwd_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePwdFieldNumber = 1,
    kTargetPwdFieldNumber = 2,
  };
  // string source_pwd = 1;
  void clear_source_pwd();
  const std::string& source_pwd() const;
  void set_source_pwd(const std::string& value);
  void set_source_pwd(std::string&& value);
  void set_source_pwd(const char* value);
  void set_source_pwd(const char* value, size_t size);
  std::string* mutable_source_pwd();
  std::string* release_source_pwd();
  void set_allocated_source_pwd(std::string* source_pwd);
  private:
  const std::string& _internal_source_pwd() const;
  void _internal_set_source_pwd(const std::string& value);
  std::string* _internal_mutable_source_pwd();
  public:

  // string target_pwd = 2;
  void clear_target_pwd();
  const std::string& target_pwd() const;
  void set_target_pwd(const std::string& value);
  void set_target_pwd(std::string&& value);
  void set_target_pwd(const char* value);
  void set_target_pwd(const char* value, size_t size);
  std::string* mutable_target_pwd();
  std::string* release_target_pwd();
  void set_allocated_target_pwd(std::string* target_pwd);
  private:
  const std::string& _internal_target_pwd() const;
  void _internal_set_target_pwd(const std::string& value);
  std::string* _internal_mutable_target_pwd();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.login_pwd_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class login_pwd_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.login_pwd_ca_s) */ {
 public:
  inline login_pwd_ca_s() : login_pwd_ca_s(nullptr) {}
  virtual ~login_pwd_ca_s();
  explicit constexpr login_pwd_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_pwd_ca_s(const login_pwd_ca_s& from);
  login_pwd_ca_s(login_pwd_ca_s&& from) noexcept
    : login_pwd_ca_s() {
    *this = ::std::move(from);
  }

  inline login_pwd_ca_s& operator=(const login_pwd_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_pwd_ca_s& operator=(login_pwd_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_pwd_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_pwd_ca_s* internal_default_instance() {
    return reinterpret_cast<const login_pwd_ca_s*>(
               &_login_pwd_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(login_pwd_ca_s& a, login_pwd_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(login_pwd_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_pwd_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_pwd_ca_s* New() const final {
    return CreateMaybeMessage<login_pwd_ca_s>(nullptr);
  }

  login_pwd_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_pwd_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_pwd_ca_s& from);
  void MergeFrom(const login_pwd_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_pwd_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.login_pwd_ca_s";
  }
  protected:
  explicit login_pwd_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.login_pwd_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class dispatch_coin_log_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.dispatch_coin_log_ca_s.item) */ {
 public:
  inline dispatch_coin_log_ca_s_item() : dispatch_coin_log_ca_s_item(nullptr) {}
  virtual ~dispatch_coin_log_ca_s_item();
  explicit constexpr dispatch_coin_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dispatch_coin_log_ca_s_item(const dispatch_coin_log_ca_s_item& from);
  dispatch_coin_log_ca_s_item(dispatch_coin_log_ca_s_item&& from) noexcept
    : dispatch_coin_log_ca_s_item() {
    *this = ::std::move(from);
  }

  inline dispatch_coin_log_ca_s_item& operator=(const dispatch_coin_log_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline dispatch_coin_log_ca_s_item& operator=(dispatch_coin_log_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dispatch_coin_log_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const dispatch_coin_log_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const dispatch_coin_log_ca_s_item*>(
               &_dispatch_coin_log_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(dispatch_coin_log_ca_s_item& a, dispatch_coin_log_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(dispatch_coin_log_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dispatch_coin_log_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dispatch_coin_log_ca_s_item* New() const final {
    return CreateMaybeMessage<dispatch_coin_log_ca_s_item>(nullptr);
  }

  dispatch_coin_log_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dispatch_coin_log_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dispatch_coin_log_ca_s_item& from);
  void MergeFrom(const dispatch_coin_log_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dispatch_coin_log_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.dispatch_coin_log_ca_s.item";
  }
  protected:
  explicit dispatch_coin_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kTargetPhoneFieldNumber = 4,
    kNumFieldNumber = 5,
    kContractTypeFieldNumber = 6,
  };
  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 target_phone = 4;
  void clear_target_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone() const;
  void set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_phone() const;
  void _internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 num = 5;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 contract_type = 6;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.dispatch_coin_log_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class dispatch_coin_log_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.dispatch_coin_log_ca_s) */ {
 public:
  inline dispatch_coin_log_ca_s() : dispatch_coin_log_ca_s(nullptr) {}
  virtual ~dispatch_coin_log_ca_s();
  explicit constexpr dispatch_coin_log_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dispatch_coin_log_ca_s(const dispatch_coin_log_ca_s& from);
  dispatch_coin_log_ca_s(dispatch_coin_log_ca_s&& from) noexcept
    : dispatch_coin_log_ca_s() {
    *this = ::std::move(from);
  }

  inline dispatch_coin_log_ca_s& operator=(const dispatch_coin_log_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline dispatch_coin_log_ca_s& operator=(dispatch_coin_log_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dispatch_coin_log_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const dispatch_coin_log_ca_s* internal_default_instance() {
    return reinterpret_cast<const dispatch_coin_log_ca_s*>(
               &_dispatch_coin_log_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(dispatch_coin_log_ca_s& a, dispatch_coin_log_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(dispatch_coin_log_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dispatch_coin_log_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dispatch_coin_log_ca_s* New() const final {
    return CreateMaybeMessage<dispatch_coin_log_ca_s>(nullptr);
  }

  dispatch_coin_log_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dispatch_coin_log_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dispatch_coin_log_ca_s& from);
  void MergeFrom(const dispatch_coin_log_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dispatch_coin_log_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.dispatch_coin_log_ca_s";
  }
  protected:
  explicit dispatch_coin_log_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef dispatch_coin_log_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.dispatch_coin_log_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::dispatch_coin_log_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::dispatch_coin_log_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::dispatch_coin_log_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::dispatch_coin_log_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::dispatch_coin_log_ca_s_item& its(int index) const;
  ::frmpub::protocc::dispatch_coin_log_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::dispatch_coin_log_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.dispatch_coin_log_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::dispatch_coin_log_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class recharge_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_ca_c) */ {
 public:
  inline recharge_ca_c() : recharge_ca_c(nullptr) {}
  virtual ~recharge_ca_c();
  explicit constexpr recharge_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_ca_c(const recharge_ca_c& from);
  recharge_ca_c(recharge_ca_c&& from) noexcept
    : recharge_ca_c() {
    *this = ::std::move(from);
  }

  inline recharge_ca_c& operator=(const recharge_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_ca_c& operator=(recharge_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_ca_c* internal_default_instance() {
    return reinterpret_cast<const recharge_ca_c*>(
               &_recharge_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(recharge_ca_c& a, recharge_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_ca_c* New() const final {
    return CreateMaybeMessage<recharge_ca_c>(nullptr);
  }

  recharge_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_ca_c& from);
  void MergeFrom(const recharge_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_ca_c";
  }
  protected:
  explicit recharge_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaycertFieldNumber = 4,
    kTypeFieldNumber = 1,
    kNumFieldNumber = 2,
    kRmbFieldNumber = 3,
  };
  // string paycert = 4;
  void clear_paycert();
  const std::string& paycert() const;
  void set_paycert(const std::string& value);
  void set_paycert(std::string&& value);
  void set_paycert(const char* value);
  void set_paycert(const char* value, size_t size);
  std::string* mutable_paycert();
  std::string* release_paycert();
  void set_allocated_paycert(std::string* paycert);
  private:
  const std::string& _internal_paycert() const;
  void _internal_set_paycert(const std::string& value);
  std::string* _internal_mutable_paycert();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float rmb = 3;
  void clear_rmb();
  float rmb() const;
  void set_rmb(float value);
  private:
  float _internal_rmb() const;
  void _internal_set_rmb(float value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paycert_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  float rmb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class recharge_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_ca_s) */ {
 public:
  inline recharge_ca_s() : recharge_ca_s(nullptr) {}
  virtual ~recharge_ca_s();
  explicit constexpr recharge_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_ca_s(const recharge_ca_s& from);
  recharge_ca_s(recharge_ca_s&& from) noexcept
    : recharge_ca_s() {
    *this = ::std::move(from);
  }

  inline recharge_ca_s& operator=(const recharge_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_ca_s& operator=(recharge_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_ca_s* internal_default_instance() {
    return reinterpret_cast<const recharge_ca_s*>(
               &_recharge_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(recharge_ca_s& a, recharge_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_ca_s* New() const final {
    return CreateMaybeMessage<recharge_ca_s>(nullptr);
  }

  recharge_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_ca_s& from);
  void MergeFrom(const recharge_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_ca_s";
  }
  protected:
  explicit recharge_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class transfer_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.transfer_ca_c) */ {
 public:
  inline transfer_ca_c() : transfer_ca_c(nullptr) {}
  virtual ~transfer_ca_c();
  explicit constexpr transfer_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_ca_c(const transfer_ca_c& from);
  transfer_ca_c(transfer_ca_c&& from) noexcept
    : transfer_ca_c() {
    *this = ::std::move(from);
  }

  inline transfer_ca_c& operator=(const transfer_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_ca_c& operator=(transfer_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transfer_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_ca_c* internal_default_instance() {
    return reinterpret_cast<const transfer_ca_c*>(
               &_transfer_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(transfer_ca_c& a, transfer_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_ca_c* New() const final {
    return CreateMaybeMessage<transfer_ca_c>(nullptr);
  }

  transfer_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transfer_ca_c& from);
  void MergeFrom(const transfer_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.transfer_ca_c";
  }
  protected:
  explicit transfer_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumFieldNumber = 2,
    kTargetPhoneFieldNumber = 3,
    kTradeCodeFieldNumber = 4,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 target_phone = 3;
  void clear_target_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone() const;
  void set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_phone() const;
  void _internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 trade_code = 4;
  void clear_trade_code();
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code() const;
  void set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade_code() const;
  void _internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.transfer_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class transfer_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.transfer_ca_s) */ {
 public:
  inline transfer_ca_s() : transfer_ca_s(nullptr) {}
  virtual ~transfer_ca_s();
  explicit constexpr transfer_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_ca_s(const transfer_ca_s& from);
  transfer_ca_s(transfer_ca_s&& from) noexcept
    : transfer_ca_s() {
    *this = ::std::move(from);
  }

  inline transfer_ca_s& operator=(const transfer_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_ca_s& operator=(transfer_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transfer_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_ca_s* internal_default_instance() {
    return reinterpret_cast<const transfer_ca_s*>(
               &_transfer_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(transfer_ca_s& a, transfer_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_ca_s* New() const final {
    return CreateMaybeMessage<transfer_ca_s>(nullptr);
  }

  transfer_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transfer_ca_s& from);
  void MergeFrom(const transfer_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.transfer_ca_s";
  }
  protected:
  explicit transfer_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCurrNumFieldNumber = 3,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_num = 3;
  void clear_curr_num();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_num() const;
  void set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_num() const;
  void _internal_set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.transfer_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class transfer_ca_cs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.transfer_ca_cs) */ {
 public:
  inline transfer_ca_cs() : transfer_ca_cs(nullptr) {}
  virtual ~transfer_ca_cs();
  explicit constexpr transfer_ca_cs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_ca_cs(const transfer_ca_cs& from);
  transfer_ca_cs(transfer_ca_cs&& from) noexcept
    : transfer_ca_cs() {
    *this = ::std::move(from);
  }

  inline transfer_ca_cs& operator=(const transfer_ca_cs& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_ca_cs& operator=(transfer_ca_cs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transfer_ca_cs& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_ca_cs* internal_default_instance() {
    return reinterpret_cast<const transfer_ca_cs*>(
               &_transfer_ca_cs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(transfer_ca_cs& a, transfer_ca_cs& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_ca_cs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_ca_cs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_ca_cs* New() const final {
    return CreateMaybeMessage<transfer_ca_cs>(nullptr);
  }

  transfer_ca_cs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_ca_cs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transfer_ca_cs& from);
  void MergeFrom(const transfer_ca_cs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_ca_cs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.transfer_ca_cs";
  }
  protected:
  explicit transfer_ca_cs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCurrNumFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_num = 2;
  void clear_curr_num();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_num() const;
  void set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_num() const;
  void _internal_set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.transfer_ca_cs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class activated_coin_log_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.activated_coin_log_ca_s.item) */ {
 public:
  inline activated_coin_log_ca_s_item() : activated_coin_log_ca_s_item(nullptr) {}
  virtual ~activated_coin_log_ca_s_item();
  explicit constexpr activated_coin_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  activated_coin_log_ca_s_item(const activated_coin_log_ca_s_item& from);
  activated_coin_log_ca_s_item(activated_coin_log_ca_s_item&& from) noexcept
    : activated_coin_log_ca_s_item() {
    *this = ::std::move(from);
  }

  inline activated_coin_log_ca_s_item& operator=(const activated_coin_log_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline activated_coin_log_ca_s_item& operator=(activated_coin_log_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activated_coin_log_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const activated_coin_log_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const activated_coin_log_ca_s_item*>(
               &_activated_coin_log_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(activated_coin_log_ca_s_item& a, activated_coin_log_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(activated_coin_log_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(activated_coin_log_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activated_coin_log_ca_s_item* New() const final {
    return CreateMaybeMessage<activated_coin_log_ca_s_item>(nullptr);
  }

  activated_coin_log_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activated_coin_log_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activated_coin_log_ca_s_item& from);
  void MergeFrom(const activated_coin_log_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activated_coin_log_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.activated_coin_log_ca_s.item";
  }
  protected:
  explicit activated_coin_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kTargetPhoneFieldNumber = 4,
    kNumFieldNumber = 5,
  };
  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 target_phone = 4;
  void clear_target_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone() const;
  void set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_phone() const;
  void _internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 num = 5;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.activated_coin_log_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class activated_coin_log_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.activated_coin_log_ca_s) */ {
 public:
  inline activated_coin_log_ca_s() : activated_coin_log_ca_s(nullptr) {}
  virtual ~activated_coin_log_ca_s();
  explicit constexpr activated_coin_log_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  activated_coin_log_ca_s(const activated_coin_log_ca_s& from);
  activated_coin_log_ca_s(activated_coin_log_ca_s&& from) noexcept
    : activated_coin_log_ca_s() {
    *this = ::std::move(from);
  }

  inline activated_coin_log_ca_s& operator=(const activated_coin_log_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline activated_coin_log_ca_s& operator=(activated_coin_log_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activated_coin_log_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const activated_coin_log_ca_s* internal_default_instance() {
    return reinterpret_cast<const activated_coin_log_ca_s*>(
               &_activated_coin_log_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(activated_coin_log_ca_s& a, activated_coin_log_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(activated_coin_log_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(activated_coin_log_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activated_coin_log_ca_s* New() const final {
    return CreateMaybeMessage<activated_coin_log_ca_s>(nullptr);
  }

  activated_coin_log_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activated_coin_log_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activated_coin_log_ca_s& from);
  void MergeFrom(const activated_coin_log_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activated_coin_log_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.activated_coin_log_ca_s";
  }
  protected:
  explicit activated_coin_log_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef activated_coin_log_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.activated_coin_log_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::activated_coin_log_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::activated_coin_log_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::activated_coin_log_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::activated_coin_log_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::activated_coin_log_ca_s_item& its(int index) const;
  ::frmpub::protocc::activated_coin_log_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::activated_coin_log_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.activated_coin_log_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::activated_coin_log_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class self_assets_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.self_assets_ca_s.item) */ {
 public:
  inline self_assets_ca_s_item() : self_assets_ca_s_item(nullptr) {}
  virtual ~self_assets_ca_s_item();
  explicit constexpr self_assets_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  self_assets_ca_s_item(const self_assets_ca_s_item& from);
  self_assets_ca_s_item(self_assets_ca_s_item&& from) noexcept
    : self_assets_ca_s_item() {
    *this = ::std::move(from);
  }

  inline self_assets_ca_s_item& operator=(const self_assets_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline self_assets_ca_s_item& operator=(self_assets_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const self_assets_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const self_assets_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const self_assets_ca_s_item*>(
               &_self_assets_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(self_assets_ca_s_item& a, self_assets_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(self_assets_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(self_assets_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline self_assets_ca_s_item* New() const final {
    return CreateMaybeMessage<self_assets_ca_s_item>(nullptr);
  }

  self_assets_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<self_assets_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const self_assets_ca_s_item& from);
  void MergeFrom(const self_assets_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(self_assets_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.self_assets_ca_s.item";
  }
  protected:
  explicit self_assets_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPriceFieldNumber = 2,
    kTimeFieldNumber = 3,
    kGetwayFieldNumber = 4,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 2;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 getway = 4;
  void clear_getway();
  ::PROTOBUF_NAMESPACE_ID::int32 getway() const;
  void set_getway(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_getway() const;
  void _internal_set_getway(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.self_assets_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 getway_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class self_assets_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.self_assets_ca_s) */ {
 public:
  inline self_assets_ca_s() : self_assets_ca_s(nullptr) {}
  virtual ~self_assets_ca_s();
  explicit constexpr self_assets_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  self_assets_ca_s(const self_assets_ca_s& from);
  self_assets_ca_s(self_assets_ca_s&& from) noexcept
    : self_assets_ca_s() {
    *this = ::std::move(from);
  }

  inline self_assets_ca_s& operator=(const self_assets_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline self_assets_ca_s& operator=(self_assets_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const self_assets_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const self_assets_ca_s* internal_default_instance() {
    return reinterpret_cast<const self_assets_ca_s*>(
               &_self_assets_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(self_assets_ca_s& a, self_assets_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(self_assets_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(self_assets_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline self_assets_ca_s* New() const final {
    return CreateMaybeMessage<self_assets_ca_s>(nullptr);
  }

  self_assets_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<self_assets_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const self_assets_ca_s& from);
  void MergeFrom(const self_assets_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(self_assets_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.self_assets_ca_s";
  }
  protected:
  explicit self_assets_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef self_assets_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.self_assets_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::self_assets_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::self_assets_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::self_assets_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::self_assets_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::self_assets_ca_s_item& its(int index) const;
  ::frmpub::protocc::self_assets_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::self_assets_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.self_assets_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::self_assets_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class income_log_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.income_log_ca_c) */ {
 public:
  inline income_log_ca_c() : income_log_ca_c(nullptr) {}
  virtual ~income_log_ca_c();
  explicit constexpr income_log_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  income_log_ca_c(const income_log_ca_c& from);
  income_log_ca_c(income_log_ca_c&& from) noexcept
    : income_log_ca_c() {
    *this = ::std::move(from);
  }

  inline income_log_ca_c& operator=(const income_log_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline income_log_ca_c& operator=(income_log_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const income_log_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const income_log_ca_c* internal_default_instance() {
    return reinterpret_cast<const income_log_ca_c*>(
               &_income_log_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(income_log_ca_c& a, income_log_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(income_log_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(income_log_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline income_log_ca_c* New() const final {
    return CreateMaybeMessage<income_log_ca_c>(nullptr);
  }

  income_log_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<income_log_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const income_log_ca_c& from);
  void MergeFrom(const income_log_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(income_log_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.income_log_ca_c";
  }
  protected:
  explicit income_log_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.income_log_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class income_log_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.income_log_ca_s.item) */ {
 public:
  inline income_log_ca_s_item() : income_log_ca_s_item(nullptr) {}
  virtual ~income_log_ca_s_item();
  explicit constexpr income_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  income_log_ca_s_item(const income_log_ca_s_item& from);
  income_log_ca_s_item(income_log_ca_s_item&& from) noexcept
    : income_log_ca_s_item() {
    *this = ::std::move(from);
  }

  inline income_log_ca_s_item& operator=(const income_log_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline income_log_ca_s_item& operator=(income_log_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const income_log_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const income_log_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const income_log_ca_s_item*>(
               &_income_log_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(income_log_ca_s_item& a, income_log_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(income_log_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(income_log_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline income_log_ca_s_item* New() const final {
    return CreateMaybeMessage<income_log_ca_s_item>(nullptr);
  }

  income_log_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<income_log_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const income_log_ca_s_item& from);
  void MergeFrom(const income_log_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(income_log_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.income_log_ca_s.item";
  }
  protected:
  explicit income_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPriceFieldNumber = 2,
    kTimeFieldNumber = 3,
    kDepthFieldNumber = 4,
    kTargetPhoneFieldNumber = 5,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 2;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 depth = 4;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 target_phone = 5;
  void clear_target_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone() const;
  void set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_phone() const;
  void _internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.income_log_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class income_log_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.income_log_ca_s) */ {
 public:
  inline income_log_ca_s() : income_log_ca_s(nullptr) {}
  virtual ~income_log_ca_s();
  explicit constexpr income_log_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  income_log_ca_s(const income_log_ca_s& from);
  income_log_ca_s(income_log_ca_s&& from) noexcept
    : income_log_ca_s() {
    *this = ::std::move(from);
  }

  inline income_log_ca_s& operator=(const income_log_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline income_log_ca_s& operator=(income_log_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const income_log_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const income_log_ca_s* internal_default_instance() {
    return reinterpret_cast<const income_log_ca_s*>(
               &_income_log_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(income_log_ca_s& a, income_log_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(income_log_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(income_log_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline income_log_ca_s* New() const final {
    return CreateMaybeMessage<income_log_ca_s>(nullptr);
  }

  income_log_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<income_log_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const income_log_ca_s& from);
  void MergeFrom(const income_log_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(income_log_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.income_log_ca_s";
  }
  protected:
  explicit income_log_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef income_log_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.income_log_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::income_log_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::income_log_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::income_log_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::income_log_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::income_log_ca_s_item& its(int index) const;
  ::frmpub::protocc::income_log_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::income_log_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.income_log_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::income_log_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class getcontract_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.getcontract_ca_c) */ {
 public:
  inline getcontract_ca_c() : getcontract_ca_c(nullptr) {}
  virtual ~getcontract_ca_c();
  explicit constexpr getcontract_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getcontract_ca_c(const getcontract_ca_c& from);
  getcontract_ca_c(getcontract_ca_c&& from) noexcept
    : getcontract_ca_c() {
    *this = ::std::move(from);
  }

  inline getcontract_ca_c& operator=(const getcontract_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline getcontract_ca_c& operator=(getcontract_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getcontract_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const getcontract_ca_c* internal_default_instance() {
    return reinterpret_cast<const getcontract_ca_c*>(
               &_getcontract_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(getcontract_ca_c& a, getcontract_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(getcontract_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getcontract_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getcontract_ca_c* New() const final {
    return CreateMaybeMessage<getcontract_ca_c>(nullptr);
  }

  getcontract_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getcontract_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getcontract_ca_c& from);
  void MergeFrom(const getcontract_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getcontract_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.getcontract_ca_c";
  }
  protected:
  explicit getcontract_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kContractTypeFieldNumber = 2,
    kChangeTypeFieldNumber = 3,
    kTradeCodeFieldNumber = 4,
  };
  // float price = 1;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 contract_type = 2;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 change_type = 3;
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trade_code = 4;
  void clear_trade_code();
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code() const;
  void set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade_code() const;
  void _internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.getcontract_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class getcontract_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.getcontract_ca_s) */ {
 public:
  inline getcontract_ca_s() : getcontract_ca_s(nullptr) {}
  virtual ~getcontract_ca_s();
  explicit constexpr getcontract_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getcontract_ca_s(const getcontract_ca_s& from);
  getcontract_ca_s(getcontract_ca_s&& from) noexcept
    : getcontract_ca_s() {
    *this = ::std::move(from);
  }

  inline getcontract_ca_s& operator=(const getcontract_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline getcontract_ca_s& operator=(getcontract_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getcontract_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const getcontract_ca_s* internal_default_instance() {
    return reinterpret_cast<const getcontract_ca_s*>(
               &_getcontract_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(getcontract_ca_s& a, getcontract_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(getcontract_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getcontract_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getcontract_ca_s* New() const final {
    return CreateMaybeMessage<getcontract_ca_s>(nullptr);
  }

  getcontract_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getcontract_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getcontract_ca_s& from);
  void MergeFrom(const getcontract_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getcontract_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.getcontract_ca_s";
  }
  protected:
  explicit getcontract_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kIncomeFieldNumber = 2,
    kChangeTypeFieldNumber = 3,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float income = 2;
  void clear_income();
  float income() const;
  void set_income(float value);
  private:
  float _internal_income() const;
  void _internal_set_income(float value);
  public:

  // int32 change_type = 3;
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.getcontract_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  float income_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class get_coin_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.get_coin_ca_c) */ {
 public:
  inline get_coin_ca_c() : get_coin_ca_c(nullptr) {}
  virtual ~get_coin_ca_c();
  explicit constexpr get_coin_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_coin_ca_c(const get_coin_ca_c& from);
  get_coin_ca_c(get_coin_ca_c&& from) noexcept
    : get_coin_ca_c() {
    *this = ::std::move(from);
  }

  inline get_coin_ca_c& operator=(const get_coin_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_coin_ca_c& operator=(get_coin_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_coin_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_coin_ca_c* internal_default_instance() {
    return reinterpret_cast<const get_coin_ca_c*>(
               &_get_coin_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(get_coin_ca_c& a, get_coin_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(get_coin_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_coin_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_coin_ca_c* New() const final {
    return CreateMaybeMessage<get_coin_ca_c>(nullptr);
  }

  get_coin_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_coin_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_coin_ca_c& from);
  void MergeFrom(const get_coin_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_coin_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.get_coin_ca_c";
  }
  protected:
  explicit get_coin_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kCoinTypeFieldNumber = 3,
    kTradeCodeFieldNumber = 4,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 change_type = 2;
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin_type = 3;
  void clear_coin_type();
  ::PROTOBUF_NAMESPACE_ID::int32 coin_type() const;
  void set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin_type() const;
  void _internal_set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trade_code = 4;
  void clear_trade_code();
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code() const;
  void set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade_code() const;
  void _internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.get_coin_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class get_coin_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.get_coin_ca_s) */ {
 public:
  inline get_coin_ca_s() : get_coin_ca_s(nullptr) {}
  virtual ~get_coin_ca_s();
  explicit constexpr get_coin_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_coin_ca_s(const get_coin_ca_s& from);
  get_coin_ca_s(get_coin_ca_s&& from) noexcept
    : get_coin_ca_s() {
    *this = ::std::move(from);
  }

  inline get_coin_ca_s& operator=(const get_coin_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_coin_ca_s& operator=(get_coin_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_coin_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_coin_ca_s* internal_default_instance() {
    return reinterpret_cast<const get_coin_ca_s*>(
               &_get_coin_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(get_coin_ca_s& a, get_coin_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(get_coin_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_coin_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_coin_ca_s* New() const final {
    return CreateMaybeMessage<get_coin_ca_s>(nullptr);
  }

  get_coin_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_coin_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_coin_ca_s& from);
  void MergeFrom(const get_coin_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_coin_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.get_coin_ca_s";
  }
  protected:
  explicit get_coin_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kIncomeFieldNumber = 2,
    kChangeTypeFieldNumber = 3,
    kCoinTypeFieldNumber = 4,
    kCoinValueFieldNumber = 5,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float income = 2;
  void clear_income();
  float income() const;
  void set_income(float value);
  private:
  float _internal_income() const;
  void _internal_set_income(float value);
  public:

  // int32 change_type = 3;
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin_type = 4;
  void clear_coin_type();
  ::PROTOBUF_NAMESPACE_ID::int32 coin_type() const;
  void set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin_type() const;
  void _internal_set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin_value = 5;
  void clear_coin_value();
  ::PROTOBUF_NAMESPACE_ID::int32 coin_value() const;
  void set_coin_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin_value() const;
  void _internal_set_coin_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.get_coin_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  float income_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class mail_list_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.mail_list_ca_s.item) */ {
 public:
  inline mail_list_ca_s_item() : mail_list_ca_s_item(nullptr) {}
  virtual ~mail_list_ca_s_item();
  explicit constexpr mail_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mail_list_ca_s_item(const mail_list_ca_s_item& from);
  mail_list_ca_s_item(mail_list_ca_s_item&& from) noexcept
    : mail_list_ca_s_item() {
    *this = ::std::move(from);
  }

  inline mail_list_ca_s_item& operator=(const mail_list_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline mail_list_ca_s_item& operator=(mail_list_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mail_list_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const mail_list_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const mail_list_ca_s_item*>(
               &_mail_list_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(mail_list_ca_s_item& a, mail_list_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(mail_list_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mail_list_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mail_list_ca_s_item* New() const final {
    return CreateMaybeMessage<mail_list_ca_s_item>(nullptr);
  }

  mail_list_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mail_list_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mail_list_ca_s_item& from);
  void MergeFrom(const mail_list_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mail_list_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.mail_list_ca_s.item";
  }
  protected:
  explicit mail_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 2,
    kInfoFieldNumber = 3,
    kIdFieldNumber = 1,
    kTimeFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string info = 3;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 5;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.mail_list_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class mail_list_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.mail_list_ca_s) */ {
 public:
  inline mail_list_ca_s() : mail_list_ca_s(nullptr) {}
  virtual ~mail_list_ca_s();
  explicit constexpr mail_list_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mail_list_ca_s(const mail_list_ca_s& from);
  mail_list_ca_s(mail_list_ca_s&& from) noexcept
    : mail_list_ca_s() {
    *this = ::std::move(from);
  }

  inline mail_list_ca_s& operator=(const mail_list_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline mail_list_ca_s& operator=(mail_list_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mail_list_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const mail_list_ca_s* internal_default_instance() {
    return reinterpret_cast<const mail_list_ca_s*>(
               &_mail_list_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(mail_list_ca_s& a, mail_list_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(mail_list_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mail_list_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mail_list_ca_s* New() const final {
    return CreateMaybeMessage<mail_list_ca_s>(nullptr);
  }

  mail_list_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mail_list_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mail_list_ca_s& from);
  void MergeFrom(const mail_list_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mail_list_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.mail_list_ca_s";
  }
  protected:
  explicit mail_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef mail_list_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.mail_list_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::mail_list_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::mail_list_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::mail_list_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::mail_list_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::mail_list_ca_s_item& its(int index) const;
  ::frmpub::protocc::mail_list_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::mail_list_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.mail_list_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::mail_list_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class mail_look_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.mail_look_ca_c) */ {
 public:
  inline mail_look_ca_c() : mail_look_ca_c(nullptr) {}
  virtual ~mail_look_ca_c();
  explicit constexpr mail_look_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mail_look_ca_c(const mail_look_ca_c& from);
  mail_look_ca_c(mail_look_ca_c&& from) noexcept
    : mail_look_ca_c() {
    *this = ::std::move(from);
  }

  inline mail_look_ca_c& operator=(const mail_look_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline mail_look_ca_c& operator=(mail_look_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mail_look_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const mail_look_ca_c* internal_default_instance() {
    return reinterpret_cast<const mail_look_ca_c*>(
               &_mail_look_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(mail_look_ca_c& a, mail_look_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(mail_look_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mail_look_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mail_look_ca_c* New() const final {
    return CreateMaybeMessage<mail_look_ca_c>(nullptr);
  }

  mail_look_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mail_look_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mail_look_ca_c& from);
  void MergeFrom(const mail_look_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mail_look_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.mail_look_ca_c";
  }
  protected:
  explicit mail_look_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.mail_look_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class mail_look_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.mail_look_ca_s) */ {
 public:
  inline mail_look_ca_s() : mail_look_ca_s(nullptr) {}
  virtual ~mail_look_ca_s();
  explicit constexpr mail_look_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mail_look_ca_s(const mail_look_ca_s& from);
  mail_look_ca_s(mail_look_ca_s&& from) noexcept
    : mail_look_ca_s() {
    *this = ::std::move(from);
  }

  inline mail_look_ca_s& operator=(const mail_look_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline mail_look_ca_s& operator=(mail_look_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mail_look_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const mail_look_ca_s* internal_default_instance() {
    return reinterpret_cast<const mail_look_ca_s*>(
               &_mail_look_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(mail_look_ca_s& a, mail_look_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(mail_look_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mail_look_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mail_look_ca_s* New() const final {
    return CreateMaybeMessage<mail_look_ca_s>(nullptr);
  }

  mail_look_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mail_look_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mail_look_ca_s& from);
  void MergeFrom(const mail_look_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mail_look_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.mail_look_ca_s";
  }
  protected:
  explicit mail_look_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kIdFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.mail_look_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class sms_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sms_ca_c) */ {
 public:
  inline sms_ca_c() : sms_ca_c(nullptr) {}
  virtual ~sms_ca_c();
  explicit constexpr sms_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sms_ca_c(const sms_ca_c& from);
  sms_ca_c(sms_ca_c&& from) noexcept
    : sms_ca_c() {
    *this = ::std::move(from);
  }

  inline sms_ca_c& operator=(const sms_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline sms_ca_c& operator=(sms_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sms_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const sms_ca_c* internal_default_instance() {
    return reinterpret_cast<const sms_ca_c*>(
               &_sms_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(sms_ca_c& a, sms_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(sms_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sms_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sms_ca_c* New() const final {
    return CreateMaybeMessage<sms_ca_c>(nullptr);
  }

  sms_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sms_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sms_ca_c& from);
  void MergeFrom(const sms_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sms_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sms_ca_c";
  }
  protected:
  explicit sms_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sms_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class sms_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sms_ca_s) */ {
 public:
  inline sms_ca_s() : sms_ca_s(nullptr) {}
  virtual ~sms_ca_s();
  explicit constexpr sms_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sms_ca_s(const sms_ca_s& from);
  sms_ca_s(sms_ca_s&& from) noexcept
    : sms_ca_s() {
    *this = ::std::move(from);
  }

  inline sms_ca_s& operator=(const sms_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline sms_ca_s& operator=(sms_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sms_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const sms_ca_s* internal_default_instance() {
    return reinterpret_cast<const sms_ca_s*>(
               &_sms_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(sms_ca_s& a, sms_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(sms_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sms_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sms_ca_s* New() const final {
    return CreateMaybeMessage<sms_ca_s>(nullptr);
  }

  sms_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sms_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sms_ca_s& from);
  void MergeFrom(const sms_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sms_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sms_ca_s";
  }
  protected:
  explicit sms_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sms_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class updata_pwd_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.updata_pwd_ca_c) */ {
 public:
  inline updata_pwd_ca_c() : updata_pwd_ca_c(nullptr) {}
  virtual ~updata_pwd_ca_c();
  explicit constexpr updata_pwd_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  updata_pwd_ca_c(const updata_pwd_ca_c& from);
  updata_pwd_ca_c(updata_pwd_ca_c&& from) noexcept
    : updata_pwd_ca_c() {
    *this = ::std::move(from);
  }

  inline updata_pwd_ca_c& operator=(const updata_pwd_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline updata_pwd_ca_c& operator=(updata_pwd_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const updata_pwd_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const updata_pwd_ca_c* internal_default_instance() {
    return reinterpret_cast<const updata_pwd_ca_c*>(
               &_updata_pwd_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(updata_pwd_ca_c& a, updata_pwd_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(updata_pwd_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(updata_pwd_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline updata_pwd_ca_c* New() const final {
    return CreateMaybeMessage<updata_pwd_ca_c>(nullptr);
  }

  updata_pwd_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<updata_pwd_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const updata_pwd_ca_c& from);
  void MergeFrom(const updata_pwd_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(updata_pwd_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.updata_pwd_ca_c";
  }
  protected:
  explicit updata_pwd_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewpwdFieldNumber = 2,
    kCodeFieldNumber = 1,
    kTypeFieldNumber = 3,
    kPhoneFieldNumber = 4,
  };
  // string newpwd = 2;
  void clear_newpwd();
  const std::string& newpwd() const;
  void set_newpwd(const std::string& value);
  void set_newpwd(std::string&& value);
  void set_newpwd(const char* value);
  void set_newpwd(const char* value, size_t size);
  std::string* mutable_newpwd();
  std::string* release_newpwd();
  void set_allocated_newpwd(std::string* newpwd);
  private:
  const std::string& _internal_newpwd() const;
  void _internal_set_newpwd(const std::string& value);
  std::string* _internal_mutable_newpwd();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 phone = 4;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.updata_pwd_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newpwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class updata_pwd_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.updata_pwd_ca_s) */ {
 public:
  inline updata_pwd_ca_s() : updata_pwd_ca_s(nullptr) {}
  virtual ~updata_pwd_ca_s();
  explicit constexpr updata_pwd_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  updata_pwd_ca_s(const updata_pwd_ca_s& from);
  updata_pwd_ca_s(updata_pwd_ca_s&& from) noexcept
    : updata_pwd_ca_s() {
    *this = ::std::move(from);
  }

  inline updata_pwd_ca_s& operator=(const updata_pwd_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline updata_pwd_ca_s& operator=(updata_pwd_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const updata_pwd_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const updata_pwd_ca_s* internal_default_instance() {
    return reinterpret_cast<const updata_pwd_ca_s*>(
               &_updata_pwd_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(updata_pwd_ca_s& a, updata_pwd_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(updata_pwd_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(updata_pwd_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline updata_pwd_ca_s* New() const final {
    return CreateMaybeMessage<updata_pwd_ca_s>(nullptr);
  }

  updata_pwd_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<updata_pwd_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const updata_pwd_ca_s& from);
  void MergeFrom(const updata_pwd_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(updata_pwd_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.updata_pwd_ca_s";
  }
  protected:
  explicit updata_pwd_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.updata_pwd_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class official_info_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.official_info_ca_s) */ {
 public:
  inline official_info_ca_s() : official_info_ca_s(nullptr) {}
  virtual ~official_info_ca_s();
  explicit constexpr official_info_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  official_info_ca_s(const official_info_ca_s& from);
  official_info_ca_s(official_info_ca_s&& from) noexcept
    : official_info_ca_s() {
    *this = ::std::move(from);
  }

  inline official_info_ca_s& operator=(const official_info_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline official_info_ca_s& operator=(official_info_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const official_info_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const official_info_ca_s* internal_default_instance() {
    return reinterpret_cast<const official_info_ca_s*>(
               &_official_info_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(official_info_ca_s& a, official_info_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(official_info_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(official_info_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline official_info_ca_s* New() const final {
    return CreateMaybeMessage<official_info_ca_s>(nullptr);
  }

  official_info_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<official_info_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const official_info_ca_s& from);
  void MergeFrom(const official_info_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(official_info_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.official_info_ca_s";
  }
  protected:
  explicit official_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAilpayNameFieldNumber = 1,
    kAilpayAccountFieldNumber = 2,
    kAilQrFieldNumber = 3,
    kBankCardFieldNumber = 4,
    kBankNameFieldNumber = 5,
    kBankAccountFieldNumber = 6,
  };
  // string ailpay_name = 1;
  void clear_ailpay_name();
  const std::string& ailpay_name() const;
  void set_ailpay_name(const std::string& value);
  void set_ailpay_name(std::string&& value);
  void set_ailpay_name(const char* value);
  void set_ailpay_name(const char* value, size_t size);
  std::string* mutable_ailpay_name();
  std::string* release_ailpay_name();
  void set_allocated_ailpay_name(std::string* ailpay_name);
  private:
  const std::string& _internal_ailpay_name() const;
  void _internal_set_ailpay_name(const std::string& value);
  std::string* _internal_mutable_ailpay_name();
  public:

  // string ailpay_account = 2;
  void clear_ailpay_account();
  const std::string& ailpay_account() const;
  void set_ailpay_account(const std::string& value);
  void set_ailpay_account(std::string&& value);
  void set_ailpay_account(const char* value);
  void set_ailpay_account(const char* value, size_t size);
  std::string* mutable_ailpay_account();
  std::string* release_ailpay_account();
  void set_allocated_ailpay_account(std::string* ailpay_account);
  private:
  const std::string& _internal_ailpay_account() const;
  void _internal_set_ailpay_account(const std::string& value);
  std::string* _internal_mutable_ailpay_account();
  public:

  // string ail_qr = 3;
  void clear_ail_qr();
  const std::string& ail_qr() const;
  void set_ail_qr(const std::string& value);
  void set_ail_qr(std::string&& value);
  void set_ail_qr(const char* value);
  void set_ail_qr(const char* value, size_t size);
  std::string* mutable_ail_qr();
  std::string* release_ail_qr();
  void set_allocated_ail_qr(std::string* ail_qr);
  private:
  const std::string& _internal_ail_qr() const;
  void _internal_set_ail_qr(const std::string& value);
  std::string* _internal_mutable_ail_qr();
  public:

  // string bank_card = 4;
  void clear_bank_card();
  const std::string& bank_card() const;
  void set_bank_card(const std::string& value);
  void set_bank_card(std::string&& value);
  void set_bank_card(const char* value);
  void set_bank_card(const char* value, size_t size);
  std::string* mutable_bank_card();
  std::string* release_bank_card();
  void set_allocated_bank_card(std::string* bank_card);
  private:
  const std::string& _internal_bank_card() const;
  void _internal_set_bank_card(const std::string& value);
  std::string* _internal_mutable_bank_card();
  public:

  // string bank_name = 5;
  void clear_bank_name();
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // string bank_account = 6;
  void clear_bank_account();
  const std::string& bank_account() const;
  void set_bank_account(const std::string& value);
  void set_bank_account(std::string&& value);
  void set_bank_account(const char* value);
  void set_bank_account(const char* value, size_t size);
  std::string* mutable_bank_account();
  std::string* release_bank_account();
  void set_allocated_bank_account(std::string* bank_account);
  private:
  const std::string& _internal_bank_account() const;
  void _internal_set_bank_account(const std::string& value);
  std::string* _internal_mutable_bank_account();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.official_info_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ailpay_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ailpay_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ail_qr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class register_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.register_ca_c) */ {
 public:
  inline register_ca_c() : register_ca_c(nullptr) {}
  virtual ~register_ca_c();
  explicit constexpr register_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_ca_c(const register_ca_c& from);
  register_ca_c(register_ca_c&& from) noexcept
    : register_ca_c() {
    *this = ::std::move(from);
  }

  inline register_ca_c& operator=(const register_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_ca_c& operator=(register_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_ca_c* internal_default_instance() {
    return reinterpret_cast<const register_ca_c*>(
               &_register_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(register_ca_c& a, register_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(register_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_ca_c* New() const final {
    return CreateMaybeMessage<register_ca_c>(nullptr);
  }

  register_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_ca_c& from);
  void MergeFrom(const register_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.register_ca_c";
  }
  protected:
  explicit register_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 3,
    kPwdFieldNumber = 4,
    kInviteFieldNumber = 6,
    kPhoneFieldNumber = 1,
    kCodeFieldNumber = 2,
    kTradeFieldNumber = 5,
  };
  // string nichen = 3;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string pwd = 4;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string invite = 6;
  void clear_invite();
  const std::string& invite() const;
  void set_invite(const std::string& value);
  void set_invite(std::string&& value);
  void set_invite(const char* value);
  void set_invite(const char* value, size_t size);
  std::string* mutable_invite();
  std::string* release_invite();
  void set_allocated_invite(std::string* invite);
  private:
  const std::string& _internal_invite() const;
  void _internal_set_invite(const std::string& value);
  std::string* _internal_mutable_invite();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trade = 5;
  void clear_trade();
  ::PROTOBUF_NAMESPACE_ID::int32 trade() const;
  void set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade() const;
  void _internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.register_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class register_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.register_ca_s) */ {
 public:
  inline register_ca_s() : register_ca_s(nullptr) {}
  virtual ~register_ca_s();
  explicit constexpr register_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_ca_s(const register_ca_s& from);
  register_ca_s(register_ca_s&& from) noexcept
    : register_ca_s() {
    *this = ::std::move(from);
  }

  inline register_ca_s& operator=(const register_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_ca_s& operator=(register_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_ca_s* internal_default_instance() {
    return reinterpret_cast<const register_ca_s*>(
               &_register_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(register_ca_s& a, register_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(register_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_ca_s* New() const final {
    return CreateMaybeMessage<register_ca_s>(nullptr);
  }

  register_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_ca_s& from);
  void MergeFrom(const register_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.register_ca_s";
  }
  protected:
  explicit register_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.register_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class booking_list_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_list_ca_s.item) */ {
 public:
  inline booking_list_ca_s_item() : booking_list_ca_s_item(nullptr) {}
  virtual ~booking_list_ca_s_item();
  explicit constexpr booking_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_list_ca_s_item(const booking_list_ca_s_item& from);
  booking_list_ca_s_item(booking_list_ca_s_item&& from) noexcept
    : booking_list_ca_s_item() {
    *this = ::std::move(from);
  }

  inline booking_list_ca_s_item& operator=(const booking_list_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_list_ca_s_item& operator=(booking_list_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_list_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_list_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const booking_list_ca_s_item*>(
               &_booking_list_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(booking_list_ca_s_item& a, booking_list_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_list_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_list_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_list_ca_s_item* New() const final {
    return CreateMaybeMessage<booking_list_ca_s_item>(nullptr);
  }

  booking_list_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_list_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_list_ca_s_item& from);
  void MergeFrom(const booking_list_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_list_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_list_ca_s.item";
  }
  protected:
  explicit booking_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContractTypeFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 contract_type = 2;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_list_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class booking_list_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_list_ca_s) */ {
 public:
  inline booking_list_ca_s() : booking_list_ca_s(nullptr) {}
  virtual ~booking_list_ca_s();
  explicit constexpr booking_list_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_list_ca_s(const booking_list_ca_s& from);
  booking_list_ca_s(booking_list_ca_s&& from) noexcept
    : booking_list_ca_s() {
    *this = ::std::move(from);
  }

  inline booking_list_ca_s& operator=(const booking_list_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_list_ca_s& operator=(booking_list_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_list_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_list_ca_s* internal_default_instance() {
    return reinterpret_cast<const booking_list_ca_s*>(
               &_booking_list_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(booking_list_ca_s& a, booking_list_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_list_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_list_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_list_ca_s* New() const final {
    return CreateMaybeMessage<booking_list_ca_s>(nullptr);
  }

  booking_list_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_list_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_list_ca_s& from);
  void MergeFrom(const booking_list_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_list_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_list_ca_s";
  }
  protected:
  explicit booking_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef booking_list_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.booking_list_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::booking_list_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_list_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::booking_list_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::booking_list_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::booking_list_ca_s_item& its(int index) const;
  ::frmpub::protocc::booking_list_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_list_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_list_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_list_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class contract_rob_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_rob_ca_s.item) */ {
 public:
  inline contract_rob_ca_s_item() : contract_rob_ca_s_item(nullptr) {}
  virtual ~contract_rob_ca_s_item();
  explicit constexpr contract_rob_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_rob_ca_s_item(const contract_rob_ca_s_item& from);
  contract_rob_ca_s_item(contract_rob_ca_s_item&& from) noexcept
    : contract_rob_ca_s_item() {
    *this = ::std::move(from);
  }

  inline contract_rob_ca_s_item& operator=(const contract_rob_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_rob_ca_s_item& operator=(contract_rob_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_rob_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_rob_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const contract_rob_ca_s_item*>(
               &_contract_rob_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(contract_rob_ca_s_item& a, contract_rob_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_rob_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_rob_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_rob_ca_s_item* New() const final {
    return CreateMaybeMessage<contract_rob_ca_s_item>(nullptr);
  }

  contract_rob_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_rob_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_rob_ca_s_item& from);
  void MergeFrom(const contract_rob_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_rob_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_rob_ca_s.item";
  }
  protected:
  explicit contract_rob_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractTypeFieldNumber = 1,
    kRobFieldNumber = 2,
  };
  // int32 contract_type = 1;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rob = 2;
  void clear_rob();
  ::PROTOBUF_NAMESPACE_ID::int32 rob() const;
  void set_rob(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rob() const;
  void _internal_set_rob(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_rob_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 rob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class contract_rob_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_rob_ca_s) */ {
 public:
  inline contract_rob_ca_s() : contract_rob_ca_s(nullptr) {}
  virtual ~contract_rob_ca_s();
  explicit constexpr contract_rob_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_rob_ca_s(const contract_rob_ca_s& from);
  contract_rob_ca_s(contract_rob_ca_s&& from) noexcept
    : contract_rob_ca_s() {
    *this = ::std::move(from);
  }

  inline contract_rob_ca_s& operator=(const contract_rob_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_rob_ca_s& operator=(contract_rob_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_rob_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_rob_ca_s* internal_default_instance() {
    return reinterpret_cast<const contract_rob_ca_s*>(
               &_contract_rob_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(contract_rob_ca_s& a, contract_rob_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_rob_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_rob_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_rob_ca_s* New() const final {
    return CreateMaybeMessage<contract_rob_ca_s>(nullptr);
  }

  contract_rob_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_rob_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_rob_ca_s& from);
  void MergeFrom(const contract_rob_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_rob_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_rob_ca_s";
  }
  protected:
  explicit contract_rob_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef contract_rob_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.contract_rob_ca_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::contract_rob_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_rob_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::contract_rob_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::contract_rob_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::contract_rob_ca_s_item& its(int index) const;
  ::frmpub::protocc::contract_rob_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_rob_ca_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_rob_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_rob_ca_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class booking_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_ca_c) */ {
 public:
  inline booking_ca_c() : booking_ca_c(nullptr) {}
  virtual ~booking_ca_c();
  explicit constexpr booking_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_ca_c(const booking_ca_c& from);
  booking_ca_c(booking_ca_c&& from) noexcept
    : booking_ca_c() {
    *this = ::std::move(from);
  }

  inline booking_ca_c& operator=(const booking_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_ca_c& operator=(booking_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_ca_c* internal_default_instance() {
    return reinterpret_cast<const booking_ca_c*>(
               &_booking_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(booking_ca_c& a, booking_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_ca_c* New() const final {
    return CreateMaybeMessage<booking_ca_c>(nullptr);
  }

  booking_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_ca_c& from);
  void MergeFrom(const booking_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_ca_c";
  }
  protected:
  explicit booking_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractTypeFieldNumber = 1,
  };
  // int32 contract_type = 1;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class booking_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_ca_s) */ {
 public:
  inline booking_ca_s() : booking_ca_s(nullptr) {}
  virtual ~booking_ca_s();
  explicit constexpr booking_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_ca_s(const booking_ca_s& from);
  booking_ca_s(booking_ca_s&& from) noexcept
    : booking_ca_s() {
    *this = ::std::move(from);
  }

  inline booking_ca_s& operator=(const booking_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_ca_s& operator=(booking_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_ca_s* internal_default_instance() {
    return reinterpret_cast<const booking_ca_s*>(
               &_booking_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(booking_ca_s& a, booking_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_ca_s* New() const final {
    return CreateMaybeMessage<booking_ca_s>(nullptr);
  }

  booking_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_ca_s& from);
  void MergeFrom(const booking_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_ca_s";
  }
  protected:
  explicit booking_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kCurrDispatchCoinFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_dispatch_coin = 2;
  void clear_curr_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_dispatch_coin() const;
  void set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_dispatch_coin() const;
  void _internal_set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_dispatch_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class rob_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.rob_ca_c) */ {
 public:
  inline rob_ca_c() : rob_ca_c(nullptr) {}
  virtual ~rob_ca_c();
  explicit constexpr rob_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rob_ca_c(const rob_ca_c& from);
  rob_ca_c(rob_ca_c&& from) noexcept
    : rob_ca_c() {
    *this = ::std::move(from);
  }

  inline rob_ca_c& operator=(const rob_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline rob_ca_c& operator=(rob_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rob_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const rob_ca_c* internal_default_instance() {
    return reinterpret_cast<const rob_ca_c*>(
               &_rob_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(rob_ca_c& a, rob_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(rob_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rob_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rob_ca_c* New() const final {
    return CreateMaybeMessage<rob_ca_c>(nullptr);
  }

  rob_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rob_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rob_ca_c& from);
  void MergeFrom(const rob_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rob_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.rob_ca_c";
  }
  protected:
  explicit rob_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractTypeFieldNumber = 1,
  };
  // int32 contract_type = 1;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.rob_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class rob_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.rob_ca_s) */ {
 public:
  inline rob_ca_s() : rob_ca_s(nullptr) {}
  virtual ~rob_ca_s();
  explicit constexpr rob_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rob_ca_s(const rob_ca_s& from);
  rob_ca_s(rob_ca_s&& from) noexcept
    : rob_ca_s() {
    *this = ::std::move(from);
  }

  inline rob_ca_s& operator=(const rob_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline rob_ca_s& operator=(rob_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rob_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const rob_ca_s* internal_default_instance() {
    return reinterpret_cast<const rob_ca_s*>(
               &_rob_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(rob_ca_s& a, rob_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(rob_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rob_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rob_ca_s* New() const final {
    return CreateMaybeMessage<rob_ca_s>(nullptr);
  }

  rob_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rob_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rob_ca_s& from);
  void MergeFrom(const rob_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rob_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.rob_ca_s";
  }
  protected:
  explicit rob_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kCurrDispatchCoinFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_dispatch_coin = 2;
  void clear_curr_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_dispatch_coin() const;
  void set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_dispatch_coin() const;
  void _internal_set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.rob_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_dispatch_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class order_list_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_list_ca_c) */ {
 public:
  inline order_list_ca_c() : order_list_ca_c(nullptr) {}
  virtual ~order_list_ca_c();
  explicit constexpr order_list_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_list_ca_c(const order_list_ca_c& from);
  order_list_ca_c(order_list_ca_c&& from) noexcept
    : order_list_ca_c() {
    *this = ::std::move(from);
  }

  inline order_list_ca_c& operator=(const order_list_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_list_ca_c& operator=(order_list_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_list_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_list_ca_c* internal_default_instance() {
    return reinterpret_cast<const order_list_ca_c*>(
               &_order_list_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(order_list_ca_c& a, order_list_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(order_list_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_list_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_list_ca_c* New() const final {
    return CreateMaybeMessage<order_list_ca_c>(nullptr);
  }

  order_list_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_list_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_list_ca_c& from);
  void MergeFrom(const order_list_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_list_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_list_ca_c";
  }
  protected:
  explicit order_list_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_list_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class order_list_ca_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_list_ca_s.item) */ {
 public:
  inline order_list_ca_s_item() : order_list_ca_s_item(nullptr) {}
  virtual ~order_list_ca_s_item();
  explicit constexpr order_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_list_ca_s_item(const order_list_ca_s_item& from);
  order_list_ca_s_item(order_list_ca_s_item&& from) noexcept
    : order_list_ca_s_item() {
    *this = ::std::move(from);
  }

  inline order_list_ca_s_item& operator=(const order_list_ca_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_list_ca_s_item& operator=(order_list_ca_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_list_ca_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_list_ca_s_item* internal_default_instance() {
    return reinterpret_cast<const order_list_ca_s_item*>(
               &_order_list_ca_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(order_list_ca_s_item& a, order_list_ca_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(order_list_ca_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_list_ca_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_list_ca_s_item* New() const final {
    return CreateMaybeMessage<order_list_ca_s_item>(nullptr);
  }

  order_list_ca_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_list_ca_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_list_ca_s_item& from);
  void MergeFrom(const order_list_ca_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_list_ca_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_list_ca_s.item";
  }
  protected:
  explicit order_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContractTypeFieldNumber = 2,
    kRobtimeFieldNumber = 3,
    kPaytimeFieldNumber = 4,
    kOktimeFieldNumber = 5,
    kSellPhoneFieldNumber = 7,
    kStateFieldNumber = 6,
    kPriceFieldNumber = 9,
    kBuyPhoneFieldNumber = 8,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 contract_type = 2;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 robtime = 3;
  void clear_robtime();
  ::PROTOBUF_NAMESPACE_ID::int32 robtime() const;
  void set_robtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robtime() const;
  void _internal_set_robtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 paytime = 4;
  void clear_paytime();
  ::PROTOBUF_NAMESPACE_ID::int32 paytime() const;
  void set_paytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_paytime() const;
  void _internal_set_paytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oktime = 5;
  void clear_oktime();
  ::PROTOBUF_NAMESPACE_ID::int32 oktime() const;
  void set_oktime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oktime() const;
  void _internal_set_oktime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 sell_phone = 7;
  void clear_sell_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone() const;
  void set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sell_phone() const;
  void _internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 state = 6;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 9;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int64 buy_phone = 8;
  void clear_buy_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 buy_phone() const;
  void set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buy_phone() const;
  void _internal_set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_list_ca_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 robtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 paytime_;
  ::PROTOBUF_NAMESPACE_ID::int32 oktime_;
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int64 buy_phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class order_list_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_list_ca_s) */ {
 public:
  inline order_list_ca_s() : order_list_ca_s(nullptr) {}
  virtual ~order_list_ca_s();
  explicit constexpr order_list_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_list_ca_s(const order_list_ca_s& from);
  order_list_ca_s(order_list_ca_s&& from) noexcept
    : order_list_ca_s() {
    *this = ::std::move(from);
  }

  inline order_list_ca_s& operator=(const order_list_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_list_ca_s& operator=(order_list_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_list_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_list_ca_s* internal_default_instance() {
    return reinterpret_cast<const order_list_ca_s*>(
               &_order_list_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(order_list_ca_s& a, order_list_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(order_list_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_list_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_list_ca_s* New() const final {
    return CreateMaybeMessage<order_list_ca_s>(nullptr);
  }

  order_list_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_list_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_list_ca_s& from);
  void MergeFrom(const order_list_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_list_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_list_ca_s";
  }
  protected:
  explicit order_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef order_list_ca_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .frmpub.protocc.order_list_ca_s.item its = 2;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::order_list_ca_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_ca_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::order_list_ca_s_item& _internal_its(int index) const;
  ::frmpub::protocc::order_list_ca_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::order_list_ca_s_item& its(int index) const;
  ::frmpub::protocc::order_list_ca_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_ca_s_item >&
      its() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_list_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_ca_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class sell_info_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sell_info_ca_c) */ {
 public:
  inline sell_info_ca_c() : sell_info_ca_c(nullptr) {}
  virtual ~sell_info_ca_c();
  explicit constexpr sell_info_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sell_info_ca_c(const sell_info_ca_c& from);
  sell_info_ca_c(sell_info_ca_c&& from) noexcept
    : sell_info_ca_c() {
    *this = ::std::move(from);
  }

  inline sell_info_ca_c& operator=(const sell_info_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline sell_info_ca_c& operator=(sell_info_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sell_info_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const sell_info_ca_c* internal_default_instance() {
    return reinterpret_cast<const sell_info_ca_c*>(
               &_sell_info_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(sell_info_ca_c& a, sell_info_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(sell_info_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sell_info_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sell_info_ca_c* New() const final {
    return CreateMaybeMessage<sell_info_ca_c>(nullptr);
  }

  sell_info_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sell_info_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sell_info_ca_c& from);
  void MergeFrom(const sell_info_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sell_info_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sell_info_ca_c";
  }
  protected:
  explicit sell_info_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellPhoneFieldNumber = 1,
  };
  // int64 sell_phone = 1;
  void clear_sell_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone() const;
  void set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sell_phone() const;
  void _internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sell_info_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class sell_info_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sell_info_ca_s) */ {
 public:
  inline sell_info_ca_s() : sell_info_ca_s(nullptr) {}
  virtual ~sell_info_ca_s();
  explicit constexpr sell_info_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sell_info_ca_s(const sell_info_ca_s& from);
  sell_info_ca_s(sell_info_ca_s&& from) noexcept
    : sell_info_ca_s() {
    *this = ::std::move(from);
  }

  inline sell_info_ca_s& operator=(const sell_info_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline sell_info_ca_s& operator=(sell_info_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sell_info_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const sell_info_ca_s* internal_default_instance() {
    return reinterpret_cast<const sell_info_ca_s*>(
               &_sell_info_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(sell_info_ca_s& a, sell_info_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(sell_info_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sell_info_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sell_info_ca_s* New() const final {
    return CreateMaybeMessage<sell_info_ca_s>(nullptr);
  }

  sell_info_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sell_info_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sell_info_ca_s& from);
  void MergeFrom(const sell_info_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sell_info_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sell_info_ca_s";
  }
  protected:
  explicit sell_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 1,
    kBankNameFieldNumber = 3,
    kBankCardidFieldNumber = 4,
    kBankUserNameFieldNumber = 5,
    kAilpayIdFieldNumber = 6,
    kAlipayNameFieldNumber = 7,
    kWebchatNameFieldNumber = 8,
    kSellPhoneFieldNumber = 2,
  };
  // string nichen = 1;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string bank_name = 3;
  void clear_bank_name();
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // string bank_cardid = 4;
  void clear_bank_cardid();
  const std::string& bank_cardid() const;
  void set_bank_cardid(const std::string& value);
  void set_bank_cardid(std::string&& value);
  void set_bank_cardid(const char* value);
  void set_bank_cardid(const char* value, size_t size);
  std::string* mutable_bank_cardid();
  std::string* release_bank_cardid();
  void set_allocated_bank_cardid(std::string* bank_cardid);
  private:
  const std::string& _internal_bank_cardid() const;
  void _internal_set_bank_cardid(const std::string& value);
  std::string* _internal_mutable_bank_cardid();
  public:

  // string bank_user_name = 5;
  void clear_bank_user_name();
  const std::string& bank_user_name() const;
  void set_bank_user_name(const std::string& value);
  void set_bank_user_name(std::string&& value);
  void set_bank_user_name(const char* value);
  void set_bank_user_name(const char* value, size_t size);
  std::string* mutable_bank_user_name();
  std::string* release_bank_user_name();
  void set_allocated_bank_user_name(std::string* bank_user_name);
  private:
  const std::string& _internal_bank_user_name() const;
  void _internal_set_bank_user_name(const std::string& value);
  std::string* _internal_mutable_bank_user_name();
  public:

  // string ailpay_id = 6;
  void clear_ailpay_id();
  const std::string& ailpay_id() const;
  void set_ailpay_id(const std::string& value);
  void set_ailpay_id(std::string&& value);
  void set_ailpay_id(const char* value);
  void set_ailpay_id(const char* value, size_t size);
  std::string* mutable_ailpay_id();
  std::string* release_ailpay_id();
  void set_allocated_ailpay_id(std::string* ailpay_id);
  private:
  const std::string& _internal_ailpay_id() const;
  void _internal_set_ailpay_id(const std::string& value);
  std::string* _internal_mutable_ailpay_id();
  public:

  // string alipay_name = 7;
  void clear_alipay_name();
  const std::string& alipay_name() const;
  void set_alipay_name(const std::string& value);
  void set_alipay_name(std::string&& value);
  void set_alipay_name(const char* value);
  void set_alipay_name(const char* value, size_t size);
  std::string* mutable_alipay_name();
  std::string* release_alipay_name();
  void set_allocated_alipay_name(std::string* alipay_name);
  private:
  const std::string& _internal_alipay_name() const;
  void _internal_set_alipay_name(const std::string& value);
  std::string* _internal_mutable_alipay_name();
  public:

  // string webchat_name = 8;
  void clear_webchat_name();
  const std::string& webchat_name() const;
  void set_webchat_name(const std::string& value);
  void set_webchat_name(std::string&& value);
  void set_webchat_name(const char* value);
  void set_webchat_name(const char* value, size_t size);
  std::string* mutable_webchat_name();
  std::string* release_webchat_name();
  void set_allocated_webchat_name(std::string* webchat_name);
  private:
  const std::string& _internal_webchat_name() const;
  void _internal_set_webchat_name(const std::string& value);
  std::string* _internal_mutable_webchat_name();
  public:

  // int64 sell_phone = 2;
  void clear_sell_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone() const;
  void set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sell_phone() const;
  void _internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sell_info_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_cardid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ailpay_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alipay_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webchat_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class pay_order_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_order_ca_c) */ {
 public:
  inline pay_order_ca_c() : pay_order_ca_c(nullptr) {}
  virtual ~pay_order_ca_c();
  explicit constexpr pay_order_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_order_ca_c(const pay_order_ca_c& from);
  pay_order_ca_c(pay_order_ca_c&& from) noexcept
    : pay_order_ca_c() {
    *this = ::std::move(from);
  }

  inline pay_order_ca_c& operator=(const pay_order_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_order_ca_c& operator=(pay_order_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_order_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_order_ca_c* internal_default_instance() {
    return reinterpret_cast<const pay_order_ca_c*>(
               &_pay_order_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(pay_order_ca_c& a, pay_order_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_order_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_order_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_order_ca_c* New() const final {
    return CreateMaybeMessage<pay_order_ca_c>(nullptr);
  }

  pay_order_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_order_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_order_ca_c& from);
  void MergeFrom(const pay_order_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_order_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_order_ca_c";
  }
  protected:
  explicit pay_order_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayVoucherFieldNumber = 2,
    kOrderIdFieldNumber = 1,
  };
  // string pay_voucher = 2;
  void clear_pay_voucher();
  const std::string& pay_voucher() const;
  void set_pay_voucher(const std::string& value);
  void set_pay_voucher(std::string&& value);
  void set_pay_voucher(const char* value);
  void set_pay_voucher(const char* value, size_t size);
  std::string* mutable_pay_voucher();
  std::string* release_pay_voucher();
  void set_allocated_pay_voucher(std::string* pay_voucher);
  private:
  const std::string& _internal_pay_voucher() const;
  void _internal_set_pay_voucher(const std::string& value);
  std::string* _internal_mutable_pay_voucher();
  public:

  // int64 order_id = 1;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::int64 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_order_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_voucher_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class pay_order_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_order_ca_s) */ {
 public:
  inline pay_order_ca_s() : pay_order_ca_s(nullptr) {}
  virtual ~pay_order_ca_s();
  explicit constexpr pay_order_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_order_ca_s(const pay_order_ca_s& from);
  pay_order_ca_s(pay_order_ca_s&& from) noexcept
    : pay_order_ca_s() {
    *this = ::std::move(from);
  }

  inline pay_order_ca_s& operator=(const pay_order_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_order_ca_s& operator=(pay_order_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_order_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_order_ca_s* internal_default_instance() {
    return reinterpret_cast<const pay_order_ca_s*>(
               &_pay_order_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(pay_order_ca_s& a, pay_order_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_order_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_order_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_order_ca_s* New() const final {
    return CreateMaybeMessage<pay_order_ca_s>(nullptr);
  }

  pay_order_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_order_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_order_ca_s& from);
  void MergeFrom(const pay_order_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_order_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_order_ca_s";
  }
  protected:
  explicit pay_order_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_order_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class buy_info_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.buy_info_ca_c) */ {
 public:
  inline buy_info_ca_c() : buy_info_ca_c(nullptr) {}
  virtual ~buy_info_ca_c();
  explicit constexpr buy_info_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  buy_info_ca_c(const buy_info_ca_c& from);
  buy_info_ca_c(buy_info_ca_c&& from) noexcept
    : buy_info_ca_c() {
    *this = ::std::move(from);
  }

  inline buy_info_ca_c& operator=(const buy_info_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline buy_info_ca_c& operator=(buy_info_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const buy_info_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const buy_info_ca_c* internal_default_instance() {
    return reinterpret_cast<const buy_info_ca_c*>(
               &_buy_info_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(buy_info_ca_c& a, buy_info_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(buy_info_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(buy_info_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline buy_info_ca_c* New() const final {
    return CreateMaybeMessage<buy_info_ca_c>(nullptr);
  }

  buy_info_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<buy_info_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const buy_info_ca_c& from);
  void MergeFrom(const buy_info_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(buy_info_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.buy_info_ca_c";
  }
  protected:
  explicit buy_info_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // int64 order_id = 1;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::int64 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.buy_info_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class buy_info_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.buy_info_ca_s) */ {
 public:
  inline buy_info_ca_s() : buy_info_ca_s(nullptr) {}
  virtual ~buy_info_ca_s();
  explicit constexpr buy_info_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  buy_info_ca_s(const buy_info_ca_s& from);
  buy_info_ca_s(buy_info_ca_s&& from) noexcept
    : buy_info_ca_s() {
    *this = ::std::move(from);
  }

  inline buy_info_ca_s& operator=(const buy_info_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline buy_info_ca_s& operator=(buy_info_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const buy_info_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const buy_info_ca_s* internal_default_instance() {
    return reinterpret_cast<const buy_info_ca_s*>(
               &_buy_info_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(buy_info_ca_s& a, buy_info_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(buy_info_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(buy_info_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline buy_info_ca_s* New() const final {
    return CreateMaybeMessage<buy_info_ca_s>(nullptr);
  }

  buy_info_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<buy_info_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const buy_info_ca_s& from);
  void MergeFrom(const buy_info_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(buy_info_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.buy_info_ca_s";
  }
  protected:
  explicit buy_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 1,
    kPayVoucherFieldNumber = 3,
    kPhoneFieldNumber = 2,
  };
  // string nichen = 1;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string pay_voucher = 3;
  void clear_pay_voucher();
  const std::string& pay_voucher() const;
  void set_pay_voucher(const std::string& value);
  void set_pay_voucher(std::string&& value);
  void set_pay_voucher(const char* value);
  void set_pay_voucher(const char* value, size_t size);
  std::string* mutable_pay_voucher();
  std::string* release_pay_voucher();
  void set_allocated_pay_voucher(std::string* pay_voucher);
  private:
  const std::string& _internal_pay_voucher() const;
  void _internal_set_pay_voucher(const std::string& value);
  std::string* _internal_mutable_pay_voucher();
  public:

  // int64 phone = 2;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.buy_info_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_voucher_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class order_oper_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_oper_ca_c) */ {
 public:
  inline order_oper_ca_c() : order_oper_ca_c(nullptr) {}
  virtual ~order_oper_ca_c();
  explicit constexpr order_oper_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_oper_ca_c(const order_oper_ca_c& from);
  order_oper_ca_c(order_oper_ca_c&& from) noexcept
    : order_oper_ca_c() {
    *this = ::std::move(from);
  }

  inline order_oper_ca_c& operator=(const order_oper_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_oper_ca_c& operator=(order_oper_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_oper_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_oper_ca_c* internal_default_instance() {
    return reinterpret_cast<const order_oper_ca_c*>(
               &_order_oper_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(order_oper_ca_c& a, order_oper_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(order_oper_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_oper_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_oper_ca_c* New() const final {
    return CreateMaybeMessage<order_oper_ca_c>(nullptr);
  }

  order_oper_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_oper_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_oper_ca_c& from);
  void MergeFrom(const order_oper_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_oper_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_oper_ca_c";
  }
  protected:
  explicit order_oper_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kOperTypeFieldNumber = 2,
    kTradeCodeFieldNumber = 3,
  };
  // int64 order_id = 1;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::int64 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 oper_type = 2;
  void clear_oper_type();
  ::PROTOBUF_NAMESPACE_ID::int32 oper_type() const;
  void set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oper_type() const;
  void _internal_set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trade_code = 3;
  void clear_trade_code();
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code() const;
  void set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade_code() const;
  void _internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_oper_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 oper_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class order_oper_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_oper_ca_s) */ {
 public:
  inline order_oper_ca_s() : order_oper_ca_s(nullptr) {}
  virtual ~order_oper_ca_s();
  explicit constexpr order_oper_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_oper_ca_s(const order_oper_ca_s& from);
  order_oper_ca_s(order_oper_ca_s&& from) noexcept
    : order_oper_ca_s() {
    *this = ::std::move(from);
  }

  inline order_oper_ca_s& operator=(const order_oper_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_oper_ca_s& operator=(order_oper_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_oper_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_oper_ca_s* internal_default_instance() {
    return reinterpret_cast<const order_oper_ca_s*>(
               &_order_oper_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(order_oper_ca_s& a, order_oper_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(order_oper_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_oper_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_oper_ca_s* New() const final {
    return CreateMaybeMessage<order_oper_ca_s>(nullptr);
  }

  order_oper_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_oper_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_oper_ca_s& from);
  void MergeFrom(const order_oper_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_oper_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_oper_ca_s";
  }
  protected:
  explicit order_oper_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kOperTypeFieldNumber = 2,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oper_type = 2;
  void clear_oper_type();
  ::PROTOBUF_NAMESPACE_ID::int32 oper_type() const;
  void set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oper_type() const;
  void _internal_set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_oper_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 oper_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class upload_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.upload_ca_c) */ {
 public:
  inline upload_ca_c() : upload_ca_c(nullptr) {}
  virtual ~upload_ca_c();
  explicit constexpr upload_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  upload_ca_c(const upload_ca_c& from);
  upload_ca_c(upload_ca_c&& from) noexcept
    : upload_ca_c() {
    *this = ::std::move(from);
  }

  inline upload_ca_c& operator=(const upload_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline upload_ca_c& operator=(upload_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const upload_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const upload_ca_c* internal_default_instance() {
    return reinterpret_cast<const upload_ca_c*>(
               &_upload_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(upload_ca_c& a, upload_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(upload_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(upload_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline upload_ca_c* New() const final {
    return CreateMaybeMessage<upload_ca_c>(nullptr);
  }

  upload_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<upload_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const upload_ca_c& from);
  void MergeFrom(const upload_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(upload_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.upload_ca_c";
  }
  protected:
  explicit upload_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.upload_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class upload_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.upload_ca_s) */ {
 public:
  inline upload_ca_s() : upload_ca_s(nullptr) {}
  virtual ~upload_ca_s();
  explicit constexpr upload_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  upload_ca_s(const upload_ca_s& from);
  upload_ca_s(upload_ca_s&& from) noexcept
    : upload_ca_s() {
    *this = ::std::move(from);
  }

  inline upload_ca_s& operator=(const upload_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline upload_ca_s& operator=(upload_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const upload_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const upload_ca_s* internal_default_instance() {
    return reinterpret_cast<const upload_ca_s*>(
               &_upload_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(upload_ca_s& a, upload_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(upload_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(upload_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline upload_ca_s* New() const final {
    return CreateMaybeMessage<upload_ca_s>(nullptr);
  }

  upload_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<upload_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const upload_ca_s& from);
  void MergeFrom(const upload_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(upload_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.upload_ca_s";
  }
  protected:
  explicit upload_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.upload_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class user_info_ca_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_info_ca_c) */ {
 public:
  inline user_info_ca_c() : user_info_ca_c(nullptr) {}
  virtual ~user_info_ca_c();
  explicit constexpr user_info_ca_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_info_ca_c(const user_info_ca_c& from);
  user_info_ca_c(user_info_ca_c&& from) noexcept
    : user_info_ca_c() {
    *this = ::std::move(from);
  }

  inline user_info_ca_c& operator=(const user_info_ca_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_info_ca_c& operator=(user_info_ca_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_info_ca_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_info_ca_c* internal_default_instance() {
    return reinterpret_cast<const user_info_ca_c*>(
               &_user_info_ca_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(user_info_ca_c& a, user_info_ca_c& b) {
    a.Swap(&b);
  }
  inline void Swap(user_info_ca_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_info_ca_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_info_ca_c* New() const final {
    return CreateMaybeMessage<user_info_ca_c>(nullptr);
  }

  user_info_ca_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_info_ca_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_info_ca_c& from);
  void MergeFrom(const user_info_ca_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info_ca_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_info_ca_c";
  }
  protected:
  explicit user_info_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_info_ca_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// -------------------------------------------------------------------

class user_info_ca_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_info_ca_s) */ {
 public:
  inline user_info_ca_s() : user_info_ca_s(nullptr) {}
  virtual ~user_info_ca_s();
  explicit constexpr user_info_ca_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_info_ca_s(const user_info_ca_s& from);
  user_info_ca_s(user_info_ca_s&& from) noexcept
    : user_info_ca_s() {
    *this = ::std::move(from);
  }

  inline user_info_ca_s& operator=(const user_info_ca_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_info_ca_s& operator=(user_info_ca_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_info_ca_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_info_ca_s* internal_default_instance() {
    return reinterpret_cast<const user_info_ca_s*>(
               &_user_info_ca_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(user_info_ca_s& a, user_info_ca_s& b) {
    a.Swap(&b);
  }
  inline void Swap(user_info_ca_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_info_ca_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_info_ca_s* New() const final {
    return CreateMaybeMessage<user_info_ca_s>(nullptr);
  }

  user_info_ca_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_info_ca_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_info_ca_s& from);
  void MergeFrom(const user_info_ca_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info_ca_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_info_ca_s";
  }
  protected:
  explicit user_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_animal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kActivatedCoinFieldNumber = 2,
    kDispatchCoinFieldNumber = 3,
    kStaticIncomeFieldNumber = 4,
    kPromoteIncomeFieldNumber = 5,
    kTeamIncomeFieldNumber = 6,
    kPromoteCurrentIncomeFieldNumber = 7,
    kTeamCurrentIncomeFieldNumber = 8,
    kAssetsFieldNumber = 9,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 activated_coin = 2;
  void clear_activated_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin() const;
  void set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_coin() const;
  void _internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dispatch_coin = 3;
  void clear_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin() const;
  void set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dispatch_coin() const;
  void _internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float static_income = 4;
  void clear_static_income();
  float static_income() const;
  void set_static_income(float value);
  private:
  float _internal_static_income() const;
  void _internal_set_static_income(float value);
  public:

  // float promote_income = 5;
  void clear_promote_income();
  float promote_income() const;
  void set_promote_income(float value);
  private:
  float _internal_promote_income() const;
  void _internal_set_promote_income(float value);
  public:

  // float team_income = 6;
  void clear_team_income();
  float team_income() const;
  void set_team_income(float value);
  private:
  float _internal_team_income() const;
  void _internal_set_team_income(float value);
  public:

  // float promote_current_income = 7;
  void clear_promote_current_income();
  float promote_current_income() const;
  void set_promote_current_income(float value);
  private:
  float _internal_promote_current_income() const;
  void _internal_set_promote_current_income(float value);
  public:

  // float team_current_income = 8;
  void clear_team_current_income();
  float team_current_income() const;
  void set_team_current_income(float value);
  private:
  float _internal_team_current_income() const;
  void _internal_set_team_current_income(float value);
  public:

  // float assets = 9;
  void clear_assets();
  float assets() const;
  void set_assets(float value);
  private:
  float _internal_assets() const;
  void _internal_set_assets(float value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_info_ca_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_;
  float static_income_;
  float promote_income_;
  float team_income_;
  float promote_current_income_;
  float team_current_income_;
  float assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_ca_c

// int64 phone = 1;
inline void login_ca_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 login_ca_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 login_ca_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_c.phone)
  return _internal_phone();
}
inline void login_ca_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void login_ca_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_c.phone)
}

// string pwd = 2;
inline void login_ca_c::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& login_ca_c::pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_c.pwd)
  return _internal_pwd();
}
inline void login_ca_c::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_c.pwd)
}
inline std::string* login_ca_c::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_c.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& login_ca_c::_internal_pwd() const {
  return pwd_.Get();
}
inline void login_ca_c::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_c::set_pwd(std::string&& value) {
  
  pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_c.pwd)
}
inline void login_ca_c::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_c.pwd)
}
inline void login_ca_c::set_pwd(const char* value,
    size_t size) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_c.pwd)
}
inline std::string* login_ca_c::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_c::release_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_c.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_c::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_c.pwd)
}

// -------------------------------------------------------------------

// login_ca_s

// int32 result = 1;
inline void login_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.result)
  return _internal_result();
}
inline void login_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void login_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.result)
}

// int32 activated_coin = 2;
inline void login_ca_s::clear_activated_coin() {
  activated_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_activated_coin() const {
  return activated_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::activated_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.activated_coin)
  return _internal_activated_coin();
}
inline void login_ca_s::_internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_coin_ = value;
}
inline void login_ca_s::set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.activated_coin)
}

// int32 dispatch_coin = 3;
inline void login_ca_s::clear_dispatch_coin() {
  dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_dispatch_coin() const {
  return dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.dispatch_coin)
  return _internal_dispatch_coin();
}
inline void login_ca_s::_internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dispatch_coin_ = value;
}
inline void login_ca_s::set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.dispatch_coin)
}

// float static_income = 4;
inline void login_ca_s::clear_static_income() {
  static_income_ = 0;
}
inline float login_ca_s::_internal_static_income() const {
  return static_income_;
}
inline float login_ca_s::static_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.static_income)
  return _internal_static_income();
}
inline void login_ca_s::_internal_set_static_income(float value) {
  
  static_income_ = value;
}
inline void login_ca_s::set_static_income(float value) {
  _internal_set_static_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.static_income)
}

// float promote_income = 5;
inline void login_ca_s::clear_promote_income() {
  promote_income_ = 0;
}
inline float login_ca_s::_internal_promote_income() const {
  return promote_income_;
}
inline float login_ca_s::promote_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.promote_income)
  return _internal_promote_income();
}
inline void login_ca_s::_internal_set_promote_income(float value) {
  
  promote_income_ = value;
}
inline void login_ca_s::set_promote_income(float value) {
  _internal_set_promote_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.promote_income)
}

// float team_income = 6;
inline void login_ca_s::clear_team_income() {
  team_income_ = 0;
}
inline float login_ca_s::_internal_team_income() const {
  return team_income_;
}
inline float login_ca_s::team_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.team_income)
  return _internal_team_income();
}
inline void login_ca_s::_internal_set_team_income(float value) {
  
  team_income_ = value;
}
inline void login_ca_s::set_team_income(float value) {
  _internal_set_team_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.team_income)
}

// bool enable = 7;
inline void login_ca_s::clear_enable() {
  enable_ = false;
}
inline bool login_ca_s::_internal_enable() const {
  return enable_;
}
inline bool login_ca_s::enable() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.enable)
  return _internal_enable();
}
inline void login_ca_s::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void login_ca_s::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.enable)
}

// float assets = 8;
inline void login_ca_s::clear_assets() {
  assets_ = 0;
}
inline float login_ca_s::_internal_assets() const {
  return assets_;
}
inline float login_ca_s::assets() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.assets)
  return _internal_assets();
}
inline void login_ca_s::_internal_set_assets(float value) {
  
  assets_ = value;
}
inline void login_ca_s::set_assets(float value) {
  _internal_set_assets(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.assets)
}

// int32 level = 9;
inline void login_ca_s::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::level() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.level)
  return _internal_level();
}
inline void login_ca_s::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void login_ca_s::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.level)
}

// int32 name_verifie = 10;
inline void login_ca_s::clear_name_verifie() {
  name_verifie_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_name_verifie() const {
  return name_verifie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::name_verifie() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.name_verifie)
  return _internal_name_verifie();
}
inline void login_ca_s::_internal_set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_verifie_ = value;
}
inline void login_ca_s::set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name_verifie(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.name_verifie)
}

// int32 pay_verifie = 11;
inline void login_ca_s::clear_pay_verifie() {
  pay_verifie_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_pay_verifie() const {
  return pay_verifie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::pay_verifie() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.pay_verifie)
  return _internal_pay_verifie();
}
inline void login_ca_s::_internal_set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pay_verifie_ = value;
}
inline void login_ca_s::set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pay_verifie(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.pay_verifie)
}

// string nichen = 12;
inline void login_ca_s::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& login_ca_s::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.nichen)
  return _internal_nichen();
}
inline void login_ca_s::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.nichen)
}
inline std::string* login_ca_s::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& login_ca_s::_internal_nichen() const {
  return nichen_.Get();
}
inline void login_ca_s::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.nichen)
}
inline void login_ca_s::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.nichen)
}
inline void login_ca_s::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.nichen)
}
inline std::string* login_ca_s::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.nichen)
}

// string bank_name = 13;
inline void login_ca_s::clear_bank_name() {
  bank_name_.ClearToEmpty();
}
inline const std::string& login_ca_s::bank_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.bank_name)
  return _internal_bank_name();
}
inline void login_ca_s::set_bank_name(const std::string& value) {
  _internal_set_bank_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.bank_name)
}
inline std::string* login_ca_s::mutable_bank_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.bank_name)
  return _internal_mutable_bank_name();
}
inline const std::string& login_ca_s::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void login_ca_s::_internal_set_bank_name(const std::string& value) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_bank_name(std::string&& value) {
  
  bank_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.bank_name)
}
inline void login_ca_s::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.bank_name)
}
inline void login_ca_s::set_bank_name(const char* value,
    size_t size) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.bank_name)
}
inline std::string* login_ca_s::_internal_mutable_bank_name() {
  
  return bank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_bank_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.bank_name)
  return bank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.bank_name)
}

// string bank_cardid = 14;
inline void login_ca_s::clear_bank_cardid() {
  bank_cardid_.ClearToEmpty();
}
inline const std::string& login_ca_s::bank_cardid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.bank_cardid)
  return _internal_bank_cardid();
}
inline void login_ca_s::set_bank_cardid(const std::string& value) {
  _internal_set_bank_cardid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.bank_cardid)
}
inline std::string* login_ca_s::mutable_bank_cardid() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.bank_cardid)
  return _internal_mutable_bank_cardid();
}
inline const std::string& login_ca_s::_internal_bank_cardid() const {
  return bank_cardid_.Get();
}
inline void login_ca_s::_internal_set_bank_cardid(const std::string& value) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_bank_cardid(std::string&& value) {
  
  bank_cardid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.bank_cardid)
}
inline void login_ca_s::set_bank_cardid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.bank_cardid)
}
inline void login_ca_s::set_bank_cardid(const char* value,
    size_t size) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.bank_cardid)
}
inline std::string* login_ca_s::_internal_mutable_bank_cardid() {
  
  return bank_cardid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_bank_cardid() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.bank_cardid)
  return bank_cardid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_bank_cardid(std::string* bank_cardid) {
  if (bank_cardid != nullptr) {
    
  } else {
    
  }
  bank_cardid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_cardid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.bank_cardid)
}

// string bank_user_name = 15;
inline void login_ca_s::clear_bank_user_name() {
  bank_user_name_.ClearToEmpty();
}
inline const std::string& login_ca_s::bank_user_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.bank_user_name)
  return _internal_bank_user_name();
}
inline void login_ca_s::set_bank_user_name(const std::string& value) {
  _internal_set_bank_user_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.bank_user_name)
}
inline std::string* login_ca_s::mutable_bank_user_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.bank_user_name)
  return _internal_mutable_bank_user_name();
}
inline const std::string& login_ca_s::_internal_bank_user_name() const {
  return bank_user_name_.Get();
}
inline void login_ca_s::_internal_set_bank_user_name(const std::string& value) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_bank_user_name(std::string&& value) {
  
  bank_user_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.bank_user_name)
}
inline void login_ca_s::set_bank_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.bank_user_name)
}
inline void login_ca_s::set_bank_user_name(const char* value,
    size_t size) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.bank_user_name)
}
inline std::string* login_ca_s::_internal_mutable_bank_user_name() {
  
  return bank_user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_bank_user_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.bank_user_name)
  return bank_user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_bank_user_name(std::string* bank_user_name) {
  if (bank_user_name != nullptr) {
    
  } else {
    
  }
  bank_user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.bank_user_name)
}

// string ailpay_id = 16;
inline void login_ca_s::clear_ailpay_id() {
  ailpay_id_.ClearToEmpty();
}
inline const std::string& login_ca_s::ailpay_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.ailpay_id)
  return _internal_ailpay_id();
}
inline void login_ca_s::set_ailpay_id(const std::string& value) {
  _internal_set_ailpay_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.ailpay_id)
}
inline std::string* login_ca_s::mutable_ailpay_id() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.ailpay_id)
  return _internal_mutable_ailpay_id();
}
inline const std::string& login_ca_s::_internal_ailpay_id() const {
  return ailpay_id_.Get();
}
inline void login_ca_s::_internal_set_ailpay_id(const std::string& value) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_ailpay_id(std::string&& value) {
  
  ailpay_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.ailpay_id)
}
inline void login_ca_s::set_ailpay_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.ailpay_id)
}
inline void login_ca_s::set_ailpay_id(const char* value,
    size_t size) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.ailpay_id)
}
inline std::string* login_ca_s::_internal_mutable_ailpay_id() {
  
  return ailpay_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_ailpay_id() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.ailpay_id)
  return ailpay_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_ailpay_id(std::string* ailpay_id) {
  if (ailpay_id != nullptr) {
    
  } else {
    
  }
  ailpay_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ailpay_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.ailpay_id)
}

// string alipay_name = 17;
inline void login_ca_s::clear_alipay_name() {
  alipay_name_.ClearToEmpty();
}
inline const std::string& login_ca_s::alipay_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.alipay_name)
  return _internal_alipay_name();
}
inline void login_ca_s::set_alipay_name(const std::string& value) {
  _internal_set_alipay_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.alipay_name)
}
inline std::string* login_ca_s::mutable_alipay_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.alipay_name)
  return _internal_mutable_alipay_name();
}
inline const std::string& login_ca_s::_internal_alipay_name() const {
  return alipay_name_.Get();
}
inline void login_ca_s::_internal_set_alipay_name(const std::string& value) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_alipay_name(std::string&& value) {
  
  alipay_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.alipay_name)
}
inline void login_ca_s::set_alipay_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.alipay_name)
}
inline void login_ca_s::set_alipay_name(const char* value,
    size_t size) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.alipay_name)
}
inline std::string* login_ca_s::_internal_mutable_alipay_name() {
  
  return alipay_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_alipay_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.alipay_name)
  return alipay_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_alipay_name(std::string* alipay_name) {
  if (alipay_name != nullptr) {
    
  } else {
    
  }
  alipay_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alipay_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.alipay_name)
}

// string webchat_name = 18;
inline void login_ca_s::clear_webchat_name() {
  webchat_name_.ClearToEmpty();
}
inline const std::string& login_ca_s::webchat_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.webchat_name)
  return _internal_webchat_name();
}
inline void login_ca_s::set_webchat_name(const std::string& value) {
  _internal_set_webchat_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.webchat_name)
}
inline std::string* login_ca_s::mutable_webchat_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.webchat_name)
  return _internal_mutable_webchat_name();
}
inline const std::string& login_ca_s::_internal_webchat_name() const {
  return webchat_name_.Get();
}
inline void login_ca_s::_internal_set_webchat_name(const std::string& value) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_webchat_name(std::string&& value) {
  
  webchat_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.webchat_name)
}
inline void login_ca_s::set_webchat_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.webchat_name)
}
inline void login_ca_s::set_webchat_name(const char* value,
    size_t size) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.webchat_name)
}
inline std::string* login_ca_s::_internal_mutable_webchat_name() {
  
  return webchat_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_webchat_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.webchat_name)
  return webchat_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_webchat_name(std::string* webchat_name) {
  if (webchat_name != nullptr) {
    
  } else {
    
  }
  webchat_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webchat_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.webchat_name)
}

// string name = 19;
inline void login_ca_s::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& login_ca_s::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.name)
  return _internal_name();
}
inline void login_ca_s::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.name)
}
inline std::string* login_ca_s::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.name)
  return _internal_mutable_name();
}
inline const std::string& login_ca_s::_internal_name() const {
  return name_.Get();
}
inline void login_ca_s::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.name)
}
inline void login_ca_s::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.name)
}
inline void login_ca_s::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.name)
}
inline std::string* login_ca_s::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.name)
}

// string idcard = 20;
inline void login_ca_s::clear_idcard() {
  idcard_.ClearToEmpty();
}
inline const std::string& login_ca_s::idcard() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.idcard)
  return _internal_idcard();
}
inline void login_ca_s::set_idcard(const std::string& value) {
  _internal_set_idcard(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.idcard)
}
inline std::string* login_ca_s::mutable_idcard() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.idcard)
  return _internal_mutable_idcard();
}
inline const std::string& login_ca_s::_internal_idcard() const {
  return idcard_.Get();
}
inline void login_ca_s::_internal_set_idcard(const std::string& value) {
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_idcard(std::string&& value) {
  
  idcard_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.idcard)
}
inline void login_ca_s::set_idcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.idcard)
}
inline void login_ca_s::set_idcard(const char* value,
    size_t size) {
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.idcard)
}
inline std::string* login_ca_s::_internal_mutable_idcard() {
  
  return idcard_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_idcard() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.idcard)
  return idcard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_idcard(std::string* idcard) {
  if (idcard != nullptr) {
    
  } else {
    
  }
  idcard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idcard,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.idcard)
}

// float promote_current_income = 21;
inline void login_ca_s::clear_promote_current_income() {
  promote_current_income_ = 0;
}
inline float login_ca_s::_internal_promote_current_income() const {
  return promote_current_income_;
}
inline float login_ca_s::promote_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.promote_current_income)
  return _internal_promote_current_income();
}
inline void login_ca_s::_internal_set_promote_current_income(float value) {
  
  promote_current_income_ = value;
}
inline void login_ca_s::set_promote_current_income(float value) {
  _internal_set_promote_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.promote_current_income)
}

// float team_current_income = 22;
inline void login_ca_s::clear_team_current_income() {
  team_current_income_ = 0;
}
inline float login_ca_s::_internal_team_current_income() const {
  return team_current_income_;
}
inline float login_ca_s::team_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.team_current_income)
  return _internal_team_current_income();
}
inline void login_ca_s::_internal_set_team_current_income(float value) {
  
  team_current_income_ = value;
}
inline void login_ca_s::set_team_current_income(float value) {
  _internal_set_team_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.team_current_income)
}

// int32 sign_time = 23;
inline void login_ca_s::clear_sign_time() {
  sign_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::_internal_sign_time() const {
  return sign_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_ca_s::sign_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.sign_time)
  return _internal_sign_time();
}
inline void login_ca_s::_internal_set_sign_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sign_time_ = value;
}
inline void login_ca_s::set_sign_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sign_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.sign_time)
}

// string invite = 24;
inline void login_ca_s::clear_invite() {
  invite_.ClearToEmpty();
}
inline const std::string& login_ca_s::invite() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_ca_s.invite)
  return _internal_invite();
}
inline void login_ca_s::set_invite(const std::string& value) {
  _internal_set_invite(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_ca_s.invite)
}
inline std::string* login_ca_s::mutable_invite() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_ca_s.invite)
  return _internal_mutable_invite();
}
inline const std::string& login_ca_s::_internal_invite() const {
  return invite_.Get();
}
inline void login_ca_s::_internal_set_invite(const std::string& value) {
  
  invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_ca_s::set_invite(std::string&& value) {
  
  invite_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_ca_s.invite)
}
inline void login_ca_s::set_invite(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_ca_s.invite)
}
inline void login_ca_s::set_invite(const char* value,
    size_t size) {
  
  invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_ca_s.invite)
}
inline std::string* login_ca_s::_internal_mutable_invite() {
  
  return invite_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_ca_s::release_invite() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_ca_s.invite)
  return invite_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_ca_s::set_allocated_invite(std::string* invite) {
  if (invite != nullptr) {
    
  } else {
    
  }
  invite_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_ca_s.invite)
}

// -------------------------------------------------------------------

// enabled_ca_s

// int32 result = 1;
inline void enabled_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enabled_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enabled_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.enabled_ca_s.result)
  return _internal_result();
}
inline void enabled_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void enabled_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.enabled_ca_s.result)
}

// int32 activated_coin = 2;
inline void enabled_ca_s::clear_activated_coin() {
  activated_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enabled_ca_s::_internal_activated_coin() const {
  return activated_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enabled_ca_s::activated_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.enabled_ca_s.activated_coin)
  return _internal_activated_coin();
}
inline void enabled_ca_s::_internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_coin_ = value;
}
inline void enabled_ca_s::set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.enabled_ca_s.activated_coin)
}

// -------------------------------------------------------------------

// setwallet_ca_c

// string bank_name = 1;
inline void setwallet_ca_c::clear_bank_name() {
  bank_name_.ClearToEmpty();
}
inline const std::string& setwallet_ca_c::bank_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_c.bank_name)
  return _internal_bank_name();
}
inline void setwallet_ca_c::set_bank_name(const std::string& value) {
  _internal_set_bank_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_c.bank_name)
}
inline std::string* setwallet_ca_c::mutable_bank_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.setwallet_ca_c.bank_name)
  return _internal_mutable_bank_name();
}
inline const std::string& setwallet_ca_c::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void setwallet_ca_c::_internal_set_bank_name(const std::string& value) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setwallet_ca_c::set_bank_name(std::string&& value) {
  
  bank_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.setwallet_ca_c.bank_name)
}
inline void setwallet_ca_c::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.setwallet_ca_c.bank_name)
}
inline void setwallet_ca_c::set_bank_name(const char* value,
    size_t size) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.setwallet_ca_c.bank_name)
}
inline std::string* setwallet_ca_c::_internal_mutable_bank_name() {
  
  return bank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setwallet_ca_c::release_bank_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.setwallet_ca_c.bank_name)
  return bank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setwallet_ca_c::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.setwallet_ca_c.bank_name)
}

// string bank_cardid = 2;
inline void setwallet_ca_c::clear_bank_cardid() {
  bank_cardid_.ClearToEmpty();
}
inline const std::string& setwallet_ca_c::bank_cardid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_c.bank_cardid)
  return _internal_bank_cardid();
}
inline void setwallet_ca_c::set_bank_cardid(const std::string& value) {
  _internal_set_bank_cardid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_c.bank_cardid)
}
inline std::string* setwallet_ca_c::mutable_bank_cardid() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.setwallet_ca_c.bank_cardid)
  return _internal_mutable_bank_cardid();
}
inline const std::string& setwallet_ca_c::_internal_bank_cardid() const {
  return bank_cardid_.Get();
}
inline void setwallet_ca_c::_internal_set_bank_cardid(const std::string& value) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setwallet_ca_c::set_bank_cardid(std::string&& value) {
  
  bank_cardid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.setwallet_ca_c.bank_cardid)
}
inline void setwallet_ca_c::set_bank_cardid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.setwallet_ca_c.bank_cardid)
}
inline void setwallet_ca_c::set_bank_cardid(const char* value,
    size_t size) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.setwallet_ca_c.bank_cardid)
}
inline std::string* setwallet_ca_c::_internal_mutable_bank_cardid() {
  
  return bank_cardid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setwallet_ca_c::release_bank_cardid() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.setwallet_ca_c.bank_cardid)
  return bank_cardid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setwallet_ca_c::set_allocated_bank_cardid(std::string* bank_cardid) {
  if (bank_cardid != nullptr) {
    
  } else {
    
  }
  bank_cardid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_cardid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.setwallet_ca_c.bank_cardid)
}

// string bank_user_name = 3;
inline void setwallet_ca_c::clear_bank_user_name() {
  bank_user_name_.ClearToEmpty();
}
inline const std::string& setwallet_ca_c::bank_user_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_c.bank_user_name)
  return _internal_bank_user_name();
}
inline void setwallet_ca_c::set_bank_user_name(const std::string& value) {
  _internal_set_bank_user_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_c.bank_user_name)
}
inline std::string* setwallet_ca_c::mutable_bank_user_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.setwallet_ca_c.bank_user_name)
  return _internal_mutable_bank_user_name();
}
inline const std::string& setwallet_ca_c::_internal_bank_user_name() const {
  return bank_user_name_.Get();
}
inline void setwallet_ca_c::_internal_set_bank_user_name(const std::string& value) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setwallet_ca_c::set_bank_user_name(std::string&& value) {
  
  bank_user_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.setwallet_ca_c.bank_user_name)
}
inline void setwallet_ca_c::set_bank_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.setwallet_ca_c.bank_user_name)
}
inline void setwallet_ca_c::set_bank_user_name(const char* value,
    size_t size) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.setwallet_ca_c.bank_user_name)
}
inline std::string* setwallet_ca_c::_internal_mutable_bank_user_name() {
  
  return bank_user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setwallet_ca_c::release_bank_user_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.setwallet_ca_c.bank_user_name)
  return bank_user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setwallet_ca_c::set_allocated_bank_user_name(std::string* bank_user_name) {
  if (bank_user_name != nullptr) {
    
  } else {
    
  }
  bank_user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.setwallet_ca_c.bank_user_name)
}

// string ailpay_id = 4;
inline void setwallet_ca_c::clear_ailpay_id() {
  ailpay_id_.ClearToEmpty();
}
inline const std::string& setwallet_ca_c::ailpay_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_c.ailpay_id)
  return _internal_ailpay_id();
}
inline void setwallet_ca_c::set_ailpay_id(const std::string& value) {
  _internal_set_ailpay_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_c.ailpay_id)
}
inline std::string* setwallet_ca_c::mutable_ailpay_id() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.setwallet_ca_c.ailpay_id)
  return _internal_mutable_ailpay_id();
}
inline const std::string& setwallet_ca_c::_internal_ailpay_id() const {
  return ailpay_id_.Get();
}
inline void setwallet_ca_c::_internal_set_ailpay_id(const std::string& value) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setwallet_ca_c::set_ailpay_id(std::string&& value) {
  
  ailpay_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.setwallet_ca_c.ailpay_id)
}
inline void setwallet_ca_c::set_ailpay_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.setwallet_ca_c.ailpay_id)
}
inline void setwallet_ca_c::set_ailpay_id(const char* value,
    size_t size) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.setwallet_ca_c.ailpay_id)
}
inline std::string* setwallet_ca_c::_internal_mutable_ailpay_id() {
  
  return ailpay_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setwallet_ca_c::release_ailpay_id() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.setwallet_ca_c.ailpay_id)
  return ailpay_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setwallet_ca_c::set_allocated_ailpay_id(std::string* ailpay_id) {
  if (ailpay_id != nullptr) {
    
  } else {
    
  }
  ailpay_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ailpay_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.setwallet_ca_c.ailpay_id)
}

// string alipay_name = 5;
inline void setwallet_ca_c::clear_alipay_name() {
  alipay_name_.ClearToEmpty();
}
inline const std::string& setwallet_ca_c::alipay_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_c.alipay_name)
  return _internal_alipay_name();
}
inline void setwallet_ca_c::set_alipay_name(const std::string& value) {
  _internal_set_alipay_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_c.alipay_name)
}
inline std::string* setwallet_ca_c::mutable_alipay_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.setwallet_ca_c.alipay_name)
  return _internal_mutable_alipay_name();
}
inline const std::string& setwallet_ca_c::_internal_alipay_name() const {
  return alipay_name_.Get();
}
inline void setwallet_ca_c::_internal_set_alipay_name(const std::string& value) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setwallet_ca_c::set_alipay_name(std::string&& value) {
  
  alipay_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.setwallet_ca_c.alipay_name)
}
inline void setwallet_ca_c::set_alipay_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.setwallet_ca_c.alipay_name)
}
inline void setwallet_ca_c::set_alipay_name(const char* value,
    size_t size) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.setwallet_ca_c.alipay_name)
}
inline std::string* setwallet_ca_c::_internal_mutable_alipay_name() {
  
  return alipay_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setwallet_ca_c::release_alipay_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.setwallet_ca_c.alipay_name)
  return alipay_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setwallet_ca_c::set_allocated_alipay_name(std::string* alipay_name) {
  if (alipay_name != nullptr) {
    
  } else {
    
  }
  alipay_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alipay_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.setwallet_ca_c.alipay_name)
}

// string webchat_name = 6;
inline void setwallet_ca_c::clear_webchat_name() {
  webchat_name_.ClearToEmpty();
}
inline const std::string& setwallet_ca_c::webchat_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_c.webchat_name)
  return _internal_webchat_name();
}
inline void setwallet_ca_c::set_webchat_name(const std::string& value) {
  _internal_set_webchat_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_c.webchat_name)
}
inline std::string* setwallet_ca_c::mutable_webchat_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.setwallet_ca_c.webchat_name)
  return _internal_mutable_webchat_name();
}
inline const std::string& setwallet_ca_c::_internal_webchat_name() const {
  return webchat_name_.Get();
}
inline void setwallet_ca_c::_internal_set_webchat_name(const std::string& value) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setwallet_ca_c::set_webchat_name(std::string&& value) {
  
  webchat_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.setwallet_ca_c.webchat_name)
}
inline void setwallet_ca_c::set_webchat_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.setwallet_ca_c.webchat_name)
}
inline void setwallet_ca_c::set_webchat_name(const char* value,
    size_t size) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.setwallet_ca_c.webchat_name)
}
inline std::string* setwallet_ca_c::_internal_mutable_webchat_name() {
  
  return webchat_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setwallet_ca_c::release_webchat_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.setwallet_ca_c.webchat_name)
  return webchat_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setwallet_ca_c::set_allocated_webchat_name(std::string* webchat_name) {
  if (webchat_name != nullptr) {
    
  } else {
    
  }
  webchat_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webchat_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.setwallet_ca_c.webchat_name)
}

// -------------------------------------------------------------------

// setwallet_ca_s

// int32 result = 1;
inline void setwallet_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setwallet_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setwallet_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_s.result)
  return _internal_result();
}
inline void setwallet_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void setwallet_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_s.result)
}

// int32 pay_verifie = 2;
inline void setwallet_ca_s::clear_pay_verifie() {
  pay_verifie_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setwallet_ca_s::_internal_pay_verifie() const {
  return pay_verifie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setwallet_ca_s::pay_verifie() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.setwallet_ca_s.pay_verifie)
  return _internal_pay_verifie();
}
inline void setwallet_ca_s::_internal_set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pay_verifie_ = value;
}
inline void setwallet_ca_s::set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pay_verifie(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.setwallet_ca_s.pay_verifie)
}

// -------------------------------------------------------------------

// myteam_ca_s

// float team_total_assets = 1;
inline void myteam_ca_s::clear_team_total_assets() {
  team_total_assets_ = 0;
}
inline float myteam_ca_s::_internal_team_total_assets() const {
  return team_total_assets_;
}
inline float myteam_ca_s::team_total_assets() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.team_total_assets)
  return _internal_team_total_assets();
}
inline void myteam_ca_s::_internal_set_team_total_assets(float value) {
  
  team_total_assets_ = value;
}
inline void myteam_ca_s::set_team_total_assets(float value) {
  _internal_set_team_total_assets(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.team_total_assets)
}

// int32 team_total_activated_num = 2;
inline void myteam_ca_s::clear_team_total_activated_num() {
  team_total_activated_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_team_total_activated_num() const {
  return team_total_activated_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::team_total_activated_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.team_total_activated_num)
  return _internal_team_total_activated_num();
}
inline void myteam_ca_s::_internal_set_team_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_total_activated_num_ = value;
}
inline void myteam_ca_s::set_team_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_total_activated_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.team_total_activated_num)
}

// int32 team_total_register_num = 3;
inline void myteam_ca_s::clear_team_total_register_num() {
  team_total_register_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_team_total_register_num() const {
  return team_total_register_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::team_total_register_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.team_total_register_num)
  return _internal_team_total_register_num();
}
inline void myteam_ca_s::_internal_set_team_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_total_register_num_ = value;
}
inline void myteam_ca_s::set_team_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_total_register_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.team_total_register_num)
}

// int32 depth1_total_activated_num = 4;
inline void myteam_ca_s::clear_depth1_total_activated_num() {
  depth1_total_activated_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_depth1_total_activated_num() const {
  return depth1_total_activated_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::depth1_total_activated_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.depth1_total_activated_num)
  return _internal_depth1_total_activated_num();
}
inline void myteam_ca_s::_internal_set_depth1_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth1_total_activated_num_ = value;
}
inline void myteam_ca_s::set_depth1_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth1_total_activated_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.depth1_total_activated_num)
}

// int32 depth1_total_register_num = 5;
inline void myteam_ca_s::clear_depth1_total_register_num() {
  depth1_total_register_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_depth1_total_register_num() const {
  return depth1_total_register_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::depth1_total_register_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.depth1_total_register_num)
  return _internal_depth1_total_register_num();
}
inline void myteam_ca_s::_internal_set_depth1_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth1_total_register_num_ = value;
}
inline void myteam_ca_s::set_depth1_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth1_total_register_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.depth1_total_register_num)
}

// int32 depth2_total_activated_num = 6;
inline void myteam_ca_s::clear_depth2_total_activated_num() {
  depth2_total_activated_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_depth2_total_activated_num() const {
  return depth2_total_activated_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::depth2_total_activated_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.depth2_total_activated_num)
  return _internal_depth2_total_activated_num();
}
inline void myteam_ca_s::_internal_set_depth2_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth2_total_activated_num_ = value;
}
inline void myteam_ca_s::set_depth2_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth2_total_activated_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.depth2_total_activated_num)
}

// int32 depth2_total_register_num = 7;
inline void myteam_ca_s::clear_depth2_total_register_num() {
  depth2_total_register_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_depth2_total_register_num() const {
  return depth2_total_register_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::depth2_total_register_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.depth2_total_register_num)
  return _internal_depth2_total_register_num();
}
inline void myteam_ca_s::_internal_set_depth2_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth2_total_register_num_ = value;
}
inline void myteam_ca_s::set_depth2_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth2_total_register_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.depth2_total_register_num)
}

// int32 depth3_total_activated_num = 8;
inline void myteam_ca_s::clear_depth3_total_activated_num() {
  depth3_total_activated_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_depth3_total_activated_num() const {
  return depth3_total_activated_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::depth3_total_activated_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.depth3_total_activated_num)
  return _internal_depth3_total_activated_num();
}
inline void myteam_ca_s::_internal_set_depth3_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth3_total_activated_num_ = value;
}
inline void myteam_ca_s::set_depth3_total_activated_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth3_total_activated_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.depth3_total_activated_num)
}

// int32 depth3_total_register_num = 9;
inline void myteam_ca_s::clear_depth3_total_register_num() {
  depth3_total_register_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::_internal_depth3_total_register_num() const {
  return depth3_total_register_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myteam_ca_s::depth3_total_register_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.myteam_ca_s.depth3_total_register_num)
  return _internal_depth3_total_register_num();
}
inline void myteam_ca_s::_internal_set_depth3_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth3_total_register_num_ = value;
}
inline void myteam_ca_s::set_depth3_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth3_total_register_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.myteam_ca_s.depth3_total_register_num)
}

// -------------------------------------------------------------------

// depth_list_ca_s_item

// string nc = 1;
inline void depth_list_ca_s_item::clear_nc() {
  nc_.ClearToEmpty();
}
inline const std::string& depth_list_ca_s_item::nc() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.depth_list_ca_s.item.nc)
  return _internal_nc();
}
inline void depth_list_ca_s_item::set_nc(const std::string& value) {
  _internal_set_nc(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.depth_list_ca_s.item.nc)
}
inline std::string* depth_list_ca_s_item::mutable_nc() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.depth_list_ca_s.item.nc)
  return _internal_mutable_nc();
}
inline const std::string& depth_list_ca_s_item::_internal_nc() const {
  return nc_.Get();
}
inline void depth_list_ca_s_item::_internal_set_nc(const std::string& value) {
  
  nc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void depth_list_ca_s_item::set_nc(std::string&& value) {
  
  nc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.depth_list_ca_s.item.nc)
}
inline void depth_list_ca_s_item::set_nc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.depth_list_ca_s.item.nc)
}
inline void depth_list_ca_s_item::set_nc(const char* value,
    size_t size) {
  
  nc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.depth_list_ca_s.item.nc)
}
inline std::string* depth_list_ca_s_item::_internal_mutable_nc() {
  
  return nc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* depth_list_ca_s_item::release_nc() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.depth_list_ca_s.item.nc)
  return nc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void depth_list_ca_s_item::set_allocated_nc(std::string* nc) {
  if (nc != nullptr) {
    
  } else {
    
  }
  nc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.depth_list_ca_s.item.nc)
}

// int32 num = 2;
inline void depth_list_ca_s_item::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 depth_list_ca_s_item::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 depth_list_ca_s_item::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.depth_list_ca_s.item.num)
  return _internal_num();
}
inline void depth_list_ca_s_item::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void depth_list_ca_s_item::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.depth_list_ca_s.item.num)
}

// float assets = 3;
inline void depth_list_ca_s_item::clear_assets() {
  assets_ = 0;
}
inline float depth_list_ca_s_item::_internal_assets() const {
  return assets_;
}
inline float depth_list_ca_s_item::assets() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.depth_list_ca_s.item.assets)
  return _internal_assets();
}
inline void depth_list_ca_s_item::_internal_set_assets(float value) {
  
  assets_ = value;
}
inline void depth_list_ca_s_item::set_assets(float value) {
  _internal_set_assets(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.depth_list_ca_s.item.assets)
}

// -------------------------------------------------------------------

// depth_list_ca_s

// repeated .frmpub.protocc.depth_list_ca_s.item sifs = 1;
inline int depth_list_ca_s::_internal_sifs_size() const {
  return sifs_.size();
}
inline int depth_list_ca_s::sifs_size() const {
  return _internal_sifs_size();
}
inline void depth_list_ca_s::clear_sifs() {
  sifs_.Clear();
}
inline ::frmpub::protocc::depth_list_ca_s_item* depth_list_ca_s::mutable_sifs(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.depth_list_ca_s.sifs)
  return sifs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::depth_list_ca_s_item >*
depth_list_ca_s::mutable_sifs() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.depth_list_ca_s.sifs)
  return &sifs_;
}
inline const ::frmpub::protocc::depth_list_ca_s_item& depth_list_ca_s::_internal_sifs(int index) const {
  return sifs_.Get(index);
}
inline const ::frmpub::protocc::depth_list_ca_s_item& depth_list_ca_s::sifs(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.depth_list_ca_s.sifs)
  return _internal_sifs(index);
}
inline ::frmpub::protocc::depth_list_ca_s_item* depth_list_ca_s::_internal_add_sifs() {
  return sifs_.Add();
}
inline ::frmpub::protocc::depth_list_ca_s_item* depth_list_ca_s::add_sifs() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.depth_list_ca_s.sifs)
  return _internal_add_sifs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::depth_list_ca_s_item >&
depth_list_ca_s::sifs() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.depth_list_ca_s.sifs)
  return sifs_;
}

// -------------------------------------------------------------------

// idcard_ca_c

// string name = 1;
inline void idcard_ca_c::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& idcard_ca_c::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.idcard_ca_c.name)
  return _internal_name();
}
inline void idcard_ca_c::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.idcard_ca_c.name)
}
inline std::string* idcard_ca_c::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.idcard_ca_c.name)
  return _internal_mutable_name();
}
inline const std::string& idcard_ca_c::_internal_name() const {
  return name_.Get();
}
inline void idcard_ca_c::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void idcard_ca_c::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.idcard_ca_c.name)
}
inline void idcard_ca_c::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.idcard_ca_c.name)
}
inline void idcard_ca_c::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.idcard_ca_c.name)
}
inline std::string* idcard_ca_c::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* idcard_ca_c::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.idcard_ca_c.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void idcard_ca_c::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.idcard_ca_c.name)
}

// string idcard = 2;
inline void idcard_ca_c::clear_idcard() {
  idcard_.ClearToEmpty();
}
inline const std::string& idcard_ca_c::idcard() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.idcard_ca_c.idcard)
  return _internal_idcard();
}
inline void idcard_ca_c::set_idcard(const std::string& value) {
  _internal_set_idcard(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.idcard_ca_c.idcard)
}
inline std::string* idcard_ca_c::mutable_idcard() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.idcard_ca_c.idcard)
  return _internal_mutable_idcard();
}
inline const std::string& idcard_ca_c::_internal_idcard() const {
  return idcard_.Get();
}
inline void idcard_ca_c::_internal_set_idcard(const std::string& value) {
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void idcard_ca_c::set_idcard(std::string&& value) {
  
  idcard_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.idcard_ca_c.idcard)
}
inline void idcard_ca_c::set_idcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.idcard_ca_c.idcard)
}
inline void idcard_ca_c::set_idcard(const char* value,
    size_t size) {
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.idcard_ca_c.idcard)
}
inline std::string* idcard_ca_c::_internal_mutable_idcard() {
  
  return idcard_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* idcard_ca_c::release_idcard() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.idcard_ca_c.idcard)
  return idcard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void idcard_ca_c::set_allocated_idcard(std::string* idcard) {
  if (idcard != nullptr) {
    
  } else {
    
  }
  idcard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idcard,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.idcard_ca_c.idcard)
}

// -------------------------------------------------------------------

// idcard_ca_s

// int32 result = 1;
inline void idcard_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 idcard_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 idcard_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.idcard_ca_s.result)
  return _internal_result();
}
inline void idcard_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void idcard_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.idcard_ca_s.result)
}

// int32 name_verifie = 2;
inline void idcard_ca_s::clear_name_verifie() {
  name_verifie_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 idcard_ca_s::_internal_name_verifie() const {
  return name_verifie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 idcard_ca_s::name_verifie() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.idcard_ca_s.name_verifie)
  return _internal_name_verifie();
}
inline void idcard_ca_s::_internal_set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_verifie_ = value;
}
inline void idcard_ca_s::set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name_verifie(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.idcard_ca_s.name_verifie)
}

// -------------------------------------------------------------------

// sign_ca_s

// int32 result = 1;
inline void sign_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sign_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sign_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sign_ca_s.result)
  return _internal_result();
}
inline void sign_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void sign_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sign_ca_s.result)
}

// int32 dispatch_coin = 2;
inline void sign_ca_s::clear_dispatch_coin() {
  dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sign_ca_s::_internal_dispatch_coin() const {
  return dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sign_ca_s::dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sign_ca_s.dispatch_coin)
  return _internal_dispatch_coin();
}
inline void sign_ca_s::_internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dispatch_coin_ = value;
}
inline void sign_ca_s::set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sign_ca_s.dispatch_coin)
}

// -------------------------------------------------------------------

// login_pwd_ca_c

// string source_pwd = 1;
inline void login_pwd_ca_c::clear_source_pwd() {
  source_pwd_.ClearToEmpty();
}
inline const std::string& login_pwd_ca_c::source_pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_pwd_ca_c.source_pwd)
  return _internal_source_pwd();
}
inline void login_pwd_ca_c::set_source_pwd(const std::string& value) {
  _internal_set_source_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_pwd_ca_c.source_pwd)
}
inline std::string* login_pwd_ca_c::mutable_source_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_pwd_ca_c.source_pwd)
  return _internal_mutable_source_pwd();
}
inline const std::string& login_pwd_ca_c::_internal_source_pwd() const {
  return source_pwd_.Get();
}
inline void login_pwd_ca_c::_internal_set_source_pwd(const std::string& value) {
  
  source_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_pwd_ca_c::set_source_pwd(std::string&& value) {
  
  source_pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_pwd_ca_c.source_pwd)
}
inline void login_pwd_ca_c::set_source_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_pwd_ca_c.source_pwd)
}
inline void login_pwd_ca_c::set_source_pwd(const char* value,
    size_t size) {
  
  source_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_pwd_ca_c.source_pwd)
}
inline std::string* login_pwd_ca_c::_internal_mutable_source_pwd() {
  
  return source_pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_pwd_ca_c::release_source_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_pwd_ca_c.source_pwd)
  return source_pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_pwd_ca_c::set_allocated_source_pwd(std::string* source_pwd) {
  if (source_pwd != nullptr) {
    
  } else {
    
  }
  source_pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_pwd_ca_c.source_pwd)
}

// string target_pwd = 2;
inline void login_pwd_ca_c::clear_target_pwd() {
  target_pwd_.ClearToEmpty();
}
inline const std::string& login_pwd_ca_c::target_pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_pwd_ca_c.target_pwd)
  return _internal_target_pwd();
}
inline void login_pwd_ca_c::set_target_pwd(const std::string& value) {
  _internal_set_target_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_pwd_ca_c.target_pwd)
}
inline std::string* login_pwd_ca_c::mutable_target_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_pwd_ca_c.target_pwd)
  return _internal_mutable_target_pwd();
}
inline const std::string& login_pwd_ca_c::_internal_target_pwd() const {
  return target_pwd_.Get();
}
inline void login_pwd_ca_c::_internal_set_target_pwd(const std::string& value) {
  
  target_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_pwd_ca_c::set_target_pwd(std::string&& value) {
  
  target_pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_pwd_ca_c.target_pwd)
}
inline void login_pwd_ca_c::set_target_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_pwd_ca_c.target_pwd)
}
inline void login_pwd_ca_c::set_target_pwd(const char* value,
    size_t size) {
  
  target_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_pwd_ca_c.target_pwd)
}
inline std::string* login_pwd_ca_c::_internal_mutable_target_pwd() {
  
  return target_pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_pwd_ca_c::release_target_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_pwd_ca_c.target_pwd)
  return target_pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_pwd_ca_c::set_allocated_target_pwd(std::string* target_pwd) {
  if (target_pwd != nullptr) {
    
  } else {
    
  }
  target_pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_pwd_ca_c.target_pwd)
}

// -------------------------------------------------------------------

// login_pwd_ca_s

// int32 result = 1;
inline void login_pwd_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_pwd_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_pwd_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_pwd_ca_s.result)
  return _internal_result();
}
inline void login_pwd_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void login_pwd_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_pwd_ca_s.result)
}

// -------------------------------------------------------------------

// dispatch_coin_log_ca_s_item

// int32 id = 1;
inline void dispatch_coin_log_ca_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.item.id)
  return _internal_id();
}
inline void dispatch_coin_log_ca_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void dispatch_coin_log_ca_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.dispatch_coin_log_ca_s.item.id)
}

// int64 time = 2;
inline void dispatch_coin_log_ca_s_item::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dispatch_coin_log_ca_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dispatch_coin_log_ca_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.item.time)
  return _internal_time();
}
inline void dispatch_coin_log_ca_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void dispatch_coin_log_ca_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.dispatch_coin_log_ca_s.item.time)
}

// int32 type = 3;
inline void dispatch_coin_log_ca_s_item::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.item.type)
  return _internal_type();
}
inline void dispatch_coin_log_ca_s_item::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void dispatch_coin_log_ca_s_item::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.dispatch_coin_log_ca_s.item.type)
}

// int64 target_phone = 4;
inline void dispatch_coin_log_ca_s_item::clear_target_phone() {
  target_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dispatch_coin_log_ca_s_item::_internal_target_phone() const {
  return target_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dispatch_coin_log_ca_s_item::target_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.item.target_phone)
  return _internal_target_phone();
}
inline void dispatch_coin_log_ca_s_item::_internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_phone_ = value;
}
inline void dispatch_coin_log_ca_s_item::set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.dispatch_coin_log_ca_s.item.target_phone)
}

// int32 num = 5;
inline void dispatch_coin_log_ca_s_item::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.item.num)
  return _internal_num();
}
inline void dispatch_coin_log_ca_s_item::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void dispatch_coin_log_ca_s_item::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.dispatch_coin_log_ca_s.item.num)
}

// int32 contract_type = 6;
inline void dispatch_coin_log_ca_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_log_ca_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.item.contract_type)
  return _internal_contract_type();
}
inline void dispatch_coin_log_ca_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void dispatch_coin_log_ca_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.dispatch_coin_log_ca_s.item.contract_type)
}

// -------------------------------------------------------------------

// dispatch_coin_log_ca_s

// repeated .frmpub.protocc.dispatch_coin_log_ca_s.item its = 1;
inline int dispatch_coin_log_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int dispatch_coin_log_ca_s::its_size() const {
  return _internal_its_size();
}
inline void dispatch_coin_log_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::dispatch_coin_log_ca_s_item* dispatch_coin_log_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.dispatch_coin_log_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::dispatch_coin_log_ca_s_item >*
dispatch_coin_log_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.dispatch_coin_log_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::dispatch_coin_log_ca_s_item& dispatch_coin_log_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::dispatch_coin_log_ca_s_item& dispatch_coin_log_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.dispatch_coin_log_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::dispatch_coin_log_ca_s_item* dispatch_coin_log_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::dispatch_coin_log_ca_s_item* dispatch_coin_log_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.dispatch_coin_log_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::dispatch_coin_log_ca_s_item >&
dispatch_coin_log_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.dispatch_coin_log_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// recharge_ca_c

// int32 type = 1;
inline void recharge_ca_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_ca_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_ca_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_ca_c.type)
  return _internal_type();
}
inline void recharge_ca_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void recharge_ca_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_ca_c.type)
}

// int32 num = 2;
inline void recharge_ca_c::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_ca_c::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_ca_c::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_ca_c.num)
  return _internal_num();
}
inline void recharge_ca_c::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void recharge_ca_c::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_ca_c.num)
}

// float rmb = 3;
inline void recharge_ca_c::clear_rmb() {
  rmb_ = 0;
}
inline float recharge_ca_c::_internal_rmb() const {
  return rmb_;
}
inline float recharge_ca_c::rmb() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_ca_c.rmb)
  return _internal_rmb();
}
inline void recharge_ca_c::_internal_set_rmb(float value) {
  
  rmb_ = value;
}
inline void recharge_ca_c::set_rmb(float value) {
  _internal_set_rmb(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_ca_c.rmb)
}

// string paycert = 4;
inline void recharge_ca_c::clear_paycert() {
  paycert_.ClearToEmpty();
}
inline const std::string& recharge_ca_c::paycert() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_ca_c.paycert)
  return _internal_paycert();
}
inline void recharge_ca_c::set_paycert(const std::string& value) {
  _internal_set_paycert(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_ca_c.paycert)
}
inline std::string* recharge_ca_c::mutable_paycert() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.recharge_ca_c.paycert)
  return _internal_mutable_paycert();
}
inline const std::string& recharge_ca_c::_internal_paycert() const {
  return paycert_.Get();
}
inline void recharge_ca_c::_internal_set_paycert(const std::string& value) {
  
  paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recharge_ca_c::set_paycert(std::string&& value) {
  
  paycert_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.recharge_ca_c.paycert)
}
inline void recharge_ca_c::set_paycert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.recharge_ca_c.paycert)
}
inline void recharge_ca_c::set_paycert(const char* value,
    size_t size) {
  
  paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.recharge_ca_c.paycert)
}
inline std::string* recharge_ca_c::_internal_mutable_paycert() {
  
  return paycert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recharge_ca_c::release_paycert() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.recharge_ca_c.paycert)
  return paycert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recharge_ca_c::set_allocated_paycert(std::string* paycert) {
  if (paycert != nullptr) {
    
  } else {
    
  }
  paycert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paycert,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.recharge_ca_c.paycert)
}

// -------------------------------------------------------------------

// recharge_ca_s

// int32 result = 1;
inline void recharge_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_ca_s.result)
  return _internal_result();
}
inline void recharge_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void recharge_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_ca_s.result)
}

// -------------------------------------------------------------------

// transfer_ca_c

// int32 type = 1;
inline void transfer_ca_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_c.type)
  return _internal_type();
}
inline void transfer_ca_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void transfer_ca_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_c.type)
}

// int32 num = 2;
inline void transfer_ca_c::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_c::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_c::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_c.num)
  return _internal_num();
}
inline void transfer_ca_c::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void transfer_ca_c::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_c.num)
}

// int64 target_phone = 3;
inline void transfer_ca_c::clear_target_phone() {
  target_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 transfer_ca_c::_internal_target_phone() const {
  return target_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 transfer_ca_c::target_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_c.target_phone)
  return _internal_target_phone();
}
inline void transfer_ca_c::_internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_phone_ = value;
}
inline void transfer_ca_c::set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_c.target_phone)
}

// int32 trade_code = 4;
inline void transfer_ca_c::clear_trade_code() {
  trade_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_c::_internal_trade_code() const {
  return trade_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_c::trade_code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_c.trade_code)
  return _internal_trade_code();
}
inline void transfer_ca_c::_internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_code_ = value;
}
inline void transfer_ca_c::set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_c.trade_code)
}

// -------------------------------------------------------------------

// transfer_ca_s

// int32 result = 1;
inline void transfer_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_s.result)
  return _internal_result();
}
inline void transfer_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void transfer_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_s.result)
}

// int32 type = 2;
inline void transfer_ca_s::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_s::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_s::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_s.type)
  return _internal_type();
}
inline void transfer_ca_s::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void transfer_ca_s::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_s.type)
}

// int32 curr_num = 3;
inline void transfer_ca_s::clear_curr_num() {
  curr_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_s::_internal_curr_num() const {
  return curr_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_s::curr_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_s.curr_num)
  return _internal_curr_num();
}
inline void transfer_ca_s::_internal_set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_num_ = value;
}
inline void transfer_ca_s::set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_s.curr_num)
}

// -------------------------------------------------------------------

// transfer_ca_cs

// int32 type = 1;
inline void transfer_ca_cs::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_cs::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_cs::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_cs.type)
  return _internal_type();
}
inline void transfer_ca_cs::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void transfer_ca_cs::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_cs.type)
}

// int32 curr_num = 2;
inline void transfer_ca_cs::clear_curr_num() {
  curr_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_cs::_internal_curr_num() const {
  return curr_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transfer_ca_cs::curr_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.transfer_ca_cs.curr_num)
  return _internal_curr_num();
}
inline void transfer_ca_cs::_internal_set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_num_ = value;
}
inline void transfer_ca_cs::set_curr_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.transfer_ca_cs.curr_num)
}

// -------------------------------------------------------------------

// activated_coin_log_ca_s_item

// int32 id = 1;
inline void activated_coin_log_ca_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_log_ca_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_log_ca_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.activated_coin_log_ca_s.item.id)
  return _internal_id();
}
inline void activated_coin_log_ca_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void activated_coin_log_ca_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.activated_coin_log_ca_s.item.id)
}

// int64 time = 2;
inline void activated_coin_log_ca_s_item::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 activated_coin_log_ca_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 activated_coin_log_ca_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.activated_coin_log_ca_s.item.time)
  return _internal_time();
}
inline void activated_coin_log_ca_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void activated_coin_log_ca_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.activated_coin_log_ca_s.item.time)
}

// int32 type = 3;
inline void activated_coin_log_ca_s_item::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_log_ca_s_item::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_log_ca_s_item::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.activated_coin_log_ca_s.item.type)
  return _internal_type();
}
inline void activated_coin_log_ca_s_item::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void activated_coin_log_ca_s_item::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.activated_coin_log_ca_s.item.type)
}

// int64 target_phone = 4;
inline void activated_coin_log_ca_s_item::clear_target_phone() {
  target_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 activated_coin_log_ca_s_item::_internal_target_phone() const {
  return target_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 activated_coin_log_ca_s_item::target_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.activated_coin_log_ca_s.item.target_phone)
  return _internal_target_phone();
}
inline void activated_coin_log_ca_s_item::_internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_phone_ = value;
}
inline void activated_coin_log_ca_s_item::set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.activated_coin_log_ca_s.item.target_phone)
}

// int32 num = 5;
inline void activated_coin_log_ca_s_item::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_log_ca_s_item::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_log_ca_s_item::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.activated_coin_log_ca_s.item.num)
  return _internal_num();
}
inline void activated_coin_log_ca_s_item::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void activated_coin_log_ca_s_item::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.activated_coin_log_ca_s.item.num)
}

// -------------------------------------------------------------------

// activated_coin_log_ca_s

// repeated .frmpub.protocc.activated_coin_log_ca_s.item its = 1;
inline int activated_coin_log_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int activated_coin_log_ca_s::its_size() const {
  return _internal_its_size();
}
inline void activated_coin_log_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::activated_coin_log_ca_s_item* activated_coin_log_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.activated_coin_log_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::activated_coin_log_ca_s_item >*
activated_coin_log_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.activated_coin_log_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::activated_coin_log_ca_s_item& activated_coin_log_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::activated_coin_log_ca_s_item& activated_coin_log_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.activated_coin_log_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::activated_coin_log_ca_s_item* activated_coin_log_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::activated_coin_log_ca_s_item* activated_coin_log_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.activated_coin_log_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::activated_coin_log_ca_s_item >&
activated_coin_log_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.activated_coin_log_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// self_assets_ca_s_item

// int32 type = 1;
inline void self_assets_ca_s_item::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 self_assets_ca_s_item::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 self_assets_ca_s_item::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.self_assets_ca_s.item.type)
  return _internal_type();
}
inline void self_assets_ca_s_item::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void self_assets_ca_s_item::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.self_assets_ca_s.item.type)
}

// float price = 2;
inline void self_assets_ca_s_item::clear_price() {
  price_ = 0;
}
inline float self_assets_ca_s_item::_internal_price() const {
  return price_;
}
inline float self_assets_ca_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.self_assets_ca_s.item.price)
  return _internal_price();
}
inline void self_assets_ca_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void self_assets_ca_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.self_assets_ca_s.item.price)
}

// int32 time = 3;
inline void self_assets_ca_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 self_assets_ca_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 self_assets_ca_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.self_assets_ca_s.item.time)
  return _internal_time();
}
inline void self_assets_ca_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void self_assets_ca_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.self_assets_ca_s.item.time)
}

// int32 getway = 4;
inline void self_assets_ca_s_item::clear_getway() {
  getway_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 self_assets_ca_s_item::_internal_getway() const {
  return getway_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 self_assets_ca_s_item::getway() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.self_assets_ca_s.item.getway)
  return _internal_getway();
}
inline void self_assets_ca_s_item::_internal_set_getway(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  getway_ = value;
}
inline void self_assets_ca_s_item::set_getway(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_getway(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.self_assets_ca_s.item.getway)
}

// -------------------------------------------------------------------

// self_assets_ca_s

// repeated .frmpub.protocc.self_assets_ca_s.item its = 1;
inline int self_assets_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int self_assets_ca_s::its_size() const {
  return _internal_its_size();
}
inline void self_assets_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::self_assets_ca_s_item* self_assets_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.self_assets_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::self_assets_ca_s_item >*
self_assets_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.self_assets_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::self_assets_ca_s_item& self_assets_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::self_assets_ca_s_item& self_assets_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.self_assets_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::self_assets_ca_s_item* self_assets_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::self_assets_ca_s_item* self_assets_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.self_assets_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::self_assets_ca_s_item >&
self_assets_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.self_assets_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// income_log_ca_c

// int32 type = 1;
inline void income_log_ca_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_c.type)
  return _internal_type();
}
inline void income_log_ca_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void income_log_ca_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.income_log_ca_c.type)
}

// -------------------------------------------------------------------

// income_log_ca_s_item

// int32 type = 1;
inline void income_log_ca_s_item::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_s_item::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_s_item::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_s.item.type)
  return _internal_type();
}
inline void income_log_ca_s_item::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void income_log_ca_s_item::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.income_log_ca_s.item.type)
}

// float price = 2;
inline void income_log_ca_s_item::clear_price() {
  price_ = 0;
}
inline float income_log_ca_s_item::_internal_price() const {
  return price_;
}
inline float income_log_ca_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_s.item.price)
  return _internal_price();
}
inline void income_log_ca_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void income_log_ca_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.income_log_ca_s.item.price)
}

// int32 time = 3;
inline void income_log_ca_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_s.item.time)
  return _internal_time();
}
inline void income_log_ca_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void income_log_ca_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.income_log_ca_s.item.time)
}

// int32 depth = 4;
inline void income_log_ca_s_item::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_s_item::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 income_log_ca_s_item::depth() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_s.item.depth)
  return _internal_depth();
}
inline void income_log_ca_s_item::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void income_log_ca_s_item::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.income_log_ca_s.item.depth)
}

// int64 target_phone = 5;
inline void income_log_ca_s_item::clear_target_phone() {
  target_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 income_log_ca_s_item::_internal_target_phone() const {
  return target_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 income_log_ca_s_item::target_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_s.item.target_phone)
  return _internal_target_phone();
}
inline void income_log_ca_s_item::_internal_set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_phone_ = value;
}
inline void income_log_ca_s_item::set_target_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.income_log_ca_s.item.target_phone)
}

// -------------------------------------------------------------------

// income_log_ca_s

// repeated .frmpub.protocc.income_log_ca_s.item its = 1;
inline int income_log_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int income_log_ca_s::its_size() const {
  return _internal_its_size();
}
inline void income_log_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::income_log_ca_s_item* income_log_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.income_log_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::income_log_ca_s_item >*
income_log_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.income_log_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::income_log_ca_s_item& income_log_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::income_log_ca_s_item& income_log_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.income_log_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::income_log_ca_s_item* income_log_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::income_log_ca_s_item* income_log_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.income_log_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::income_log_ca_s_item >&
income_log_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.income_log_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// getcontract_ca_c

// float price = 1;
inline void getcontract_ca_c::clear_price() {
  price_ = 0;
}
inline float getcontract_ca_c::_internal_price() const {
  return price_;
}
inline float getcontract_ca_c::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_c.price)
  return _internal_price();
}
inline void getcontract_ca_c::_internal_set_price(float value) {
  
  price_ = value;
}
inline void getcontract_ca_c::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_c.price)
}

// int32 contract_type = 2;
inline void getcontract_ca_c::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_c::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_c::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_c.contract_type)
  return _internal_contract_type();
}
inline void getcontract_ca_c::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void getcontract_ca_c::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_c.contract_type)
}

// int32 change_type = 3;
inline void getcontract_ca_c::clear_change_type() {
  change_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_c::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_c::change_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_c.change_type)
  return _internal_change_type();
}
inline void getcontract_ca_c::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_type_ = value;
}
inline void getcontract_ca_c::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_c.change_type)
}

// int32 trade_code = 4;
inline void getcontract_ca_c::clear_trade_code() {
  trade_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_c::_internal_trade_code() const {
  return trade_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_c::trade_code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_c.trade_code)
  return _internal_trade_code();
}
inline void getcontract_ca_c::_internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_code_ = value;
}
inline void getcontract_ca_c::set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_c.trade_code)
}

// -------------------------------------------------------------------

// getcontract_ca_s

// int32 result = 1;
inline void getcontract_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_s.result)
  return _internal_result();
}
inline void getcontract_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void getcontract_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_s.result)
}

// float income = 2;
inline void getcontract_ca_s::clear_income() {
  income_ = 0;
}
inline float getcontract_ca_s::_internal_income() const {
  return income_;
}
inline float getcontract_ca_s::income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_s.income)
  return _internal_income();
}
inline void getcontract_ca_s::_internal_set_income(float value) {
  
  income_ = value;
}
inline void getcontract_ca_s::set_income(float value) {
  _internal_set_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_s.income)
}

// int32 change_type = 3;
inline void getcontract_ca_s::clear_change_type() {
  change_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_s::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getcontract_ca_s::change_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.getcontract_ca_s.change_type)
  return _internal_change_type();
}
inline void getcontract_ca_s::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_type_ = value;
}
inline void getcontract_ca_s::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.getcontract_ca_s.change_type)
}

// -------------------------------------------------------------------

// get_coin_ca_c

// int32 num = 1;
inline void get_coin_ca_c::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_c.num)
  return _internal_num();
}
inline void get_coin_ca_c::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void get_coin_ca_c::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_c.num)
}

// int32 change_type = 2;
inline void get_coin_ca_c::clear_change_type() {
  change_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::change_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_c.change_type)
  return _internal_change_type();
}
inline void get_coin_ca_c::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_type_ = value;
}
inline void get_coin_ca_c::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_c.change_type)
}

// int32 coin_type = 3;
inline void get_coin_ca_c::clear_coin_type() {
  coin_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::_internal_coin_type() const {
  return coin_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::coin_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_c.coin_type)
  return _internal_coin_type();
}
inline void get_coin_ca_c::_internal_set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_type_ = value;
}
inline void get_coin_ca_c::set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_c.coin_type)
}

// int32 trade_code = 4;
inline void get_coin_ca_c::clear_trade_code() {
  trade_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::_internal_trade_code() const {
  return trade_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_c::trade_code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_c.trade_code)
  return _internal_trade_code();
}
inline void get_coin_ca_c::_internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_code_ = value;
}
inline void get_coin_ca_c::set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_c.trade_code)
}

// -------------------------------------------------------------------

// get_coin_ca_s

// int32 result = 1;
inline void get_coin_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_s.result)
  return _internal_result();
}
inline void get_coin_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void get_coin_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_s.result)
}

// float income = 2;
inline void get_coin_ca_s::clear_income() {
  income_ = 0;
}
inline float get_coin_ca_s::_internal_income() const {
  return income_;
}
inline float get_coin_ca_s::income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_s.income)
  return _internal_income();
}
inline void get_coin_ca_s::_internal_set_income(float value) {
  
  income_ = value;
}
inline void get_coin_ca_s::set_income(float value) {
  _internal_set_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_s.income)
}

// int32 change_type = 3;
inline void get_coin_ca_s::clear_change_type() {
  change_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::change_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_s.change_type)
  return _internal_change_type();
}
inline void get_coin_ca_s::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_type_ = value;
}
inline void get_coin_ca_s::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_s.change_type)
}

// int32 coin_type = 4;
inline void get_coin_ca_s::clear_coin_type() {
  coin_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::_internal_coin_type() const {
  return coin_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::coin_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_s.coin_type)
  return _internal_coin_type();
}
inline void get_coin_ca_s::_internal_set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_type_ = value;
}
inline void get_coin_ca_s::set_coin_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_s.coin_type)
}

// int32 coin_value = 5;
inline void get_coin_ca_s::clear_coin_value() {
  coin_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::_internal_coin_value() const {
  return coin_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_coin_ca_s::coin_value() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.get_coin_ca_s.coin_value)
  return _internal_coin_value();
}
inline void get_coin_ca_s::_internal_set_coin_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_value_ = value;
}
inline void get_coin_ca_s::set_coin_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin_value(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.get_coin_ca_s.coin_value)
}

// -------------------------------------------------------------------

// mail_list_ca_s_item

// int32 id = 1;
inline void mail_list_ca_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_list_ca_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_list_ca_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_list_ca_s.item.id)
  return _internal_id();
}
inline void mail_list_ca_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void mail_list_ca_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_list_ca_s.item.id)
}

// string topic = 2;
inline void mail_list_ca_s_item::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& mail_list_ca_s_item::topic() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_list_ca_s.item.topic)
  return _internal_topic();
}
inline void mail_list_ca_s_item::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_list_ca_s.item.topic)
}
inline std::string* mail_list_ca_s_item::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.mail_list_ca_s.item.topic)
  return _internal_mutable_topic();
}
inline const std::string& mail_list_ca_s_item::_internal_topic() const {
  return topic_.Get();
}
inline void mail_list_ca_s_item::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mail_list_ca_s_item::set_topic(std::string&& value) {
  
  topic_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.mail_list_ca_s.item.topic)
}
inline void mail_list_ca_s_item::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.mail_list_ca_s.item.topic)
}
inline void mail_list_ca_s_item::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.mail_list_ca_s.item.topic)
}
inline std::string* mail_list_ca_s_item::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mail_list_ca_s_item::release_topic() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.mail_list_ca_s.item.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mail_list_ca_s_item::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.mail_list_ca_s.item.topic)
}

// string info = 3;
inline void mail_list_ca_s_item::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& mail_list_ca_s_item::info() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_list_ca_s.item.info)
  return _internal_info();
}
inline void mail_list_ca_s_item::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_list_ca_s.item.info)
}
inline std::string* mail_list_ca_s_item::mutable_info() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.mail_list_ca_s.item.info)
  return _internal_mutable_info();
}
inline const std::string& mail_list_ca_s_item::_internal_info() const {
  return info_.Get();
}
inline void mail_list_ca_s_item::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mail_list_ca_s_item::set_info(std::string&& value) {
  
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.mail_list_ca_s.item.info)
}
inline void mail_list_ca_s_item::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.mail_list_ca_s.item.info)
}
inline void mail_list_ca_s_item::set_info(const char* value,
    size_t size) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.mail_list_ca_s.item.info)
}
inline std::string* mail_list_ca_s_item::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mail_list_ca_s_item::release_info() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.mail_list_ca_s.item.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mail_list_ca_s_item::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.mail_list_ca_s.item.info)
}

// int32 time = 4;
inline void mail_list_ca_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_list_ca_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_list_ca_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_list_ca_s.item.time)
  return _internal_time();
}
inline void mail_list_ca_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void mail_list_ca_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_list_ca_s.item.time)
}

// int32 state = 5;
inline void mail_list_ca_s_item::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_list_ca_s_item::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_list_ca_s_item::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_list_ca_s.item.state)
  return _internal_state();
}
inline void mail_list_ca_s_item::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void mail_list_ca_s_item::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_list_ca_s.item.state)
}

// -------------------------------------------------------------------

// mail_list_ca_s

// repeated .frmpub.protocc.mail_list_ca_s.item its = 1;
inline int mail_list_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int mail_list_ca_s::its_size() const {
  return _internal_its_size();
}
inline void mail_list_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::mail_list_ca_s_item* mail_list_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.mail_list_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::mail_list_ca_s_item >*
mail_list_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.mail_list_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::mail_list_ca_s_item& mail_list_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::mail_list_ca_s_item& mail_list_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_list_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::mail_list_ca_s_item* mail_list_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::mail_list_ca_s_item* mail_list_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.mail_list_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::mail_list_ca_s_item >&
mail_list_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.mail_list_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// mail_look_ca_c

// int32 id = 1;
inline void mail_look_ca_c::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_c::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_c::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_look_ca_c.id)
  return _internal_id();
}
inline void mail_look_ca_c::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void mail_look_ca_c::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_look_ca_c.id)
}

// -------------------------------------------------------------------

// mail_look_ca_s

// int32 result = 1;
inline void mail_look_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_look_ca_s.result)
  return _internal_result();
}
inline void mail_look_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void mail_look_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_look_ca_s.result)
}

// int32 id = 2;
inline void mail_look_ca_s::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_s::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_s::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_look_ca_s.id)
  return _internal_id();
}
inline void mail_look_ca_s::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void mail_look_ca_s::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_look_ca_s.id)
}

// int32 state = 3;
inline void mail_look_ca_s::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_s::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail_look_ca_s::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.mail_look_ca_s.state)
  return _internal_state();
}
inline void mail_look_ca_s::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void mail_look_ca_s::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.mail_look_ca_s.state)
}

// -------------------------------------------------------------------

// sms_ca_c

// int64 phone = 1;
inline void sms_ca_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sms_ca_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sms_ca_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sms_ca_c.phone)
  return _internal_phone();
}
inline void sms_ca_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void sms_ca_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sms_ca_c.phone)
}

// -------------------------------------------------------------------

// sms_ca_s

// int32 result = 1;
inline void sms_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sms_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sms_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sms_ca_s.result)
  return _internal_result();
}
inline void sms_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void sms_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sms_ca_s.result)
}

// int32 code = 2;
inline void sms_ca_s::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sms_ca_s::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sms_ca_s::code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sms_ca_s.code)
  return _internal_code();
}
inline void sms_ca_s::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void sms_ca_s::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sms_ca_s.code)
}

// -------------------------------------------------------------------

// updata_pwd_ca_c

// int32 code = 1;
inline void updata_pwd_ca_c::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_c::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_c::code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.updata_pwd_ca_c.code)
  return _internal_code();
}
inline void updata_pwd_ca_c::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void updata_pwd_ca_c::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.updata_pwd_ca_c.code)
}

// string newpwd = 2;
inline void updata_pwd_ca_c::clear_newpwd() {
  newpwd_.ClearToEmpty();
}
inline const std::string& updata_pwd_ca_c::newpwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.updata_pwd_ca_c.newpwd)
  return _internal_newpwd();
}
inline void updata_pwd_ca_c::set_newpwd(const std::string& value) {
  _internal_set_newpwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.updata_pwd_ca_c.newpwd)
}
inline std::string* updata_pwd_ca_c::mutable_newpwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.updata_pwd_ca_c.newpwd)
  return _internal_mutable_newpwd();
}
inline const std::string& updata_pwd_ca_c::_internal_newpwd() const {
  return newpwd_.Get();
}
inline void updata_pwd_ca_c::_internal_set_newpwd(const std::string& value) {
  
  newpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void updata_pwd_ca_c::set_newpwd(std::string&& value) {
  
  newpwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.updata_pwd_ca_c.newpwd)
}
inline void updata_pwd_ca_c::set_newpwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.updata_pwd_ca_c.newpwd)
}
inline void updata_pwd_ca_c::set_newpwd(const char* value,
    size_t size) {
  
  newpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.updata_pwd_ca_c.newpwd)
}
inline std::string* updata_pwd_ca_c::_internal_mutable_newpwd() {
  
  return newpwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* updata_pwd_ca_c::release_newpwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.updata_pwd_ca_c.newpwd)
  return newpwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void updata_pwd_ca_c::set_allocated_newpwd(std::string* newpwd) {
  if (newpwd != nullptr) {
    
  } else {
    
  }
  newpwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newpwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.updata_pwd_ca_c.newpwd)
}

// int32 type = 3;
inline void updata_pwd_ca_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.updata_pwd_ca_c.type)
  return _internal_type();
}
inline void updata_pwd_ca_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void updata_pwd_ca_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.updata_pwd_ca_c.type)
}

// int64 phone = 4;
inline void updata_pwd_ca_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 updata_pwd_ca_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 updata_pwd_ca_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.updata_pwd_ca_c.phone)
  return _internal_phone();
}
inline void updata_pwd_ca_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void updata_pwd_ca_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.updata_pwd_ca_c.phone)
}

// -------------------------------------------------------------------

// updata_pwd_ca_s

// int32 result = 1;
inline void updata_pwd_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.updata_pwd_ca_s.result)
  return _internal_result();
}
inline void updata_pwd_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void updata_pwd_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.updata_pwd_ca_s.result)
}

// int32 type = 2;
inline void updata_pwd_ca_s::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_s::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 updata_pwd_ca_s::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.updata_pwd_ca_s.type)
  return _internal_type();
}
inline void updata_pwd_ca_s::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void updata_pwd_ca_s::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.updata_pwd_ca_s.type)
}

// -------------------------------------------------------------------

// official_info_ca_s

// string ailpay_name = 1;
inline void official_info_ca_s::clear_ailpay_name() {
  ailpay_name_.ClearToEmpty();
}
inline const std::string& official_info_ca_s::ailpay_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.official_info_ca_s.ailpay_name)
  return _internal_ailpay_name();
}
inline void official_info_ca_s::set_ailpay_name(const std::string& value) {
  _internal_set_ailpay_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.official_info_ca_s.ailpay_name)
}
inline std::string* official_info_ca_s::mutable_ailpay_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.official_info_ca_s.ailpay_name)
  return _internal_mutable_ailpay_name();
}
inline const std::string& official_info_ca_s::_internal_ailpay_name() const {
  return ailpay_name_.Get();
}
inline void official_info_ca_s::_internal_set_ailpay_name(const std::string& value) {
  
  ailpay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void official_info_ca_s::set_ailpay_name(std::string&& value) {
  
  ailpay_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.official_info_ca_s.ailpay_name)
}
inline void official_info_ca_s::set_ailpay_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ailpay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.official_info_ca_s.ailpay_name)
}
inline void official_info_ca_s::set_ailpay_name(const char* value,
    size_t size) {
  
  ailpay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.official_info_ca_s.ailpay_name)
}
inline std::string* official_info_ca_s::_internal_mutable_ailpay_name() {
  
  return ailpay_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* official_info_ca_s::release_ailpay_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.official_info_ca_s.ailpay_name)
  return ailpay_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void official_info_ca_s::set_allocated_ailpay_name(std::string* ailpay_name) {
  if (ailpay_name != nullptr) {
    
  } else {
    
  }
  ailpay_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ailpay_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.official_info_ca_s.ailpay_name)
}

// string ailpay_account = 2;
inline void official_info_ca_s::clear_ailpay_account() {
  ailpay_account_.ClearToEmpty();
}
inline const std::string& official_info_ca_s::ailpay_account() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.official_info_ca_s.ailpay_account)
  return _internal_ailpay_account();
}
inline void official_info_ca_s::set_ailpay_account(const std::string& value) {
  _internal_set_ailpay_account(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.official_info_ca_s.ailpay_account)
}
inline std::string* official_info_ca_s::mutable_ailpay_account() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.official_info_ca_s.ailpay_account)
  return _internal_mutable_ailpay_account();
}
inline const std::string& official_info_ca_s::_internal_ailpay_account() const {
  return ailpay_account_.Get();
}
inline void official_info_ca_s::_internal_set_ailpay_account(const std::string& value) {
  
  ailpay_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void official_info_ca_s::set_ailpay_account(std::string&& value) {
  
  ailpay_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.official_info_ca_s.ailpay_account)
}
inline void official_info_ca_s::set_ailpay_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ailpay_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.official_info_ca_s.ailpay_account)
}
inline void official_info_ca_s::set_ailpay_account(const char* value,
    size_t size) {
  
  ailpay_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.official_info_ca_s.ailpay_account)
}
inline std::string* official_info_ca_s::_internal_mutable_ailpay_account() {
  
  return ailpay_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* official_info_ca_s::release_ailpay_account() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.official_info_ca_s.ailpay_account)
  return ailpay_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void official_info_ca_s::set_allocated_ailpay_account(std::string* ailpay_account) {
  if (ailpay_account != nullptr) {
    
  } else {
    
  }
  ailpay_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ailpay_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.official_info_ca_s.ailpay_account)
}

// string ail_qr = 3;
inline void official_info_ca_s::clear_ail_qr() {
  ail_qr_.ClearToEmpty();
}
inline const std::string& official_info_ca_s::ail_qr() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.official_info_ca_s.ail_qr)
  return _internal_ail_qr();
}
inline void official_info_ca_s::set_ail_qr(const std::string& value) {
  _internal_set_ail_qr(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.official_info_ca_s.ail_qr)
}
inline std::string* official_info_ca_s::mutable_ail_qr() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.official_info_ca_s.ail_qr)
  return _internal_mutable_ail_qr();
}
inline const std::string& official_info_ca_s::_internal_ail_qr() const {
  return ail_qr_.Get();
}
inline void official_info_ca_s::_internal_set_ail_qr(const std::string& value) {
  
  ail_qr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void official_info_ca_s::set_ail_qr(std::string&& value) {
  
  ail_qr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.official_info_ca_s.ail_qr)
}
inline void official_info_ca_s::set_ail_qr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ail_qr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.official_info_ca_s.ail_qr)
}
inline void official_info_ca_s::set_ail_qr(const char* value,
    size_t size) {
  
  ail_qr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.official_info_ca_s.ail_qr)
}
inline std::string* official_info_ca_s::_internal_mutable_ail_qr() {
  
  return ail_qr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* official_info_ca_s::release_ail_qr() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.official_info_ca_s.ail_qr)
  return ail_qr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void official_info_ca_s::set_allocated_ail_qr(std::string* ail_qr) {
  if (ail_qr != nullptr) {
    
  } else {
    
  }
  ail_qr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ail_qr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.official_info_ca_s.ail_qr)
}

// string bank_card = 4;
inline void official_info_ca_s::clear_bank_card() {
  bank_card_.ClearToEmpty();
}
inline const std::string& official_info_ca_s::bank_card() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.official_info_ca_s.bank_card)
  return _internal_bank_card();
}
inline void official_info_ca_s::set_bank_card(const std::string& value) {
  _internal_set_bank_card(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.official_info_ca_s.bank_card)
}
inline std::string* official_info_ca_s::mutable_bank_card() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.official_info_ca_s.bank_card)
  return _internal_mutable_bank_card();
}
inline const std::string& official_info_ca_s::_internal_bank_card() const {
  return bank_card_.Get();
}
inline void official_info_ca_s::_internal_set_bank_card(const std::string& value) {
  
  bank_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void official_info_ca_s::set_bank_card(std::string&& value) {
  
  bank_card_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.official_info_ca_s.bank_card)
}
inline void official_info_ca_s::set_bank_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.official_info_ca_s.bank_card)
}
inline void official_info_ca_s::set_bank_card(const char* value,
    size_t size) {
  
  bank_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.official_info_ca_s.bank_card)
}
inline std::string* official_info_ca_s::_internal_mutable_bank_card() {
  
  return bank_card_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* official_info_ca_s::release_bank_card() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.official_info_ca_s.bank_card)
  return bank_card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void official_info_ca_s::set_allocated_bank_card(std::string* bank_card) {
  if (bank_card != nullptr) {
    
  } else {
    
  }
  bank_card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_card,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.official_info_ca_s.bank_card)
}

// string bank_name = 5;
inline void official_info_ca_s::clear_bank_name() {
  bank_name_.ClearToEmpty();
}
inline const std::string& official_info_ca_s::bank_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.official_info_ca_s.bank_name)
  return _internal_bank_name();
}
inline void official_info_ca_s::set_bank_name(const std::string& value) {
  _internal_set_bank_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.official_info_ca_s.bank_name)
}
inline std::string* official_info_ca_s::mutable_bank_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.official_info_ca_s.bank_name)
  return _internal_mutable_bank_name();
}
inline const std::string& official_info_ca_s::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void official_info_ca_s::_internal_set_bank_name(const std::string& value) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void official_info_ca_s::set_bank_name(std::string&& value) {
  
  bank_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.official_info_ca_s.bank_name)
}
inline void official_info_ca_s::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.official_info_ca_s.bank_name)
}
inline void official_info_ca_s::set_bank_name(const char* value,
    size_t size) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.official_info_ca_s.bank_name)
}
inline std::string* official_info_ca_s::_internal_mutable_bank_name() {
  
  return bank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* official_info_ca_s::release_bank_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.official_info_ca_s.bank_name)
  return bank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void official_info_ca_s::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.official_info_ca_s.bank_name)
}

// string bank_account = 6;
inline void official_info_ca_s::clear_bank_account() {
  bank_account_.ClearToEmpty();
}
inline const std::string& official_info_ca_s::bank_account() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.official_info_ca_s.bank_account)
  return _internal_bank_account();
}
inline void official_info_ca_s::set_bank_account(const std::string& value) {
  _internal_set_bank_account(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.official_info_ca_s.bank_account)
}
inline std::string* official_info_ca_s::mutable_bank_account() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.official_info_ca_s.bank_account)
  return _internal_mutable_bank_account();
}
inline const std::string& official_info_ca_s::_internal_bank_account() const {
  return bank_account_.Get();
}
inline void official_info_ca_s::_internal_set_bank_account(const std::string& value) {
  
  bank_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void official_info_ca_s::set_bank_account(std::string&& value) {
  
  bank_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.official_info_ca_s.bank_account)
}
inline void official_info_ca_s::set_bank_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.official_info_ca_s.bank_account)
}
inline void official_info_ca_s::set_bank_account(const char* value,
    size_t size) {
  
  bank_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.official_info_ca_s.bank_account)
}
inline std::string* official_info_ca_s::_internal_mutable_bank_account() {
  
  return bank_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* official_info_ca_s::release_bank_account() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.official_info_ca_s.bank_account)
  return bank_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void official_info_ca_s::set_allocated_bank_account(std::string* bank_account) {
  if (bank_account != nullptr) {
    
  } else {
    
  }
  bank_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.official_info_ca_s.bank_account)
}

// -------------------------------------------------------------------

// register_ca_c

// int64 phone = 1;
inline void register_ca_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 register_ca_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 register_ca_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_c.phone)
  return _internal_phone();
}
inline void register_ca_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void register_ca_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_c.phone)
}

// int32 code = 2;
inline void register_ca_c::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_ca_c::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_ca_c::code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_c.code)
  return _internal_code();
}
inline void register_ca_c::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void register_ca_c::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_c.code)
}

// string nichen = 3;
inline void register_ca_c::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& register_ca_c::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_c.nichen)
  return _internal_nichen();
}
inline void register_ca_c::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_c.nichen)
}
inline std::string* register_ca_c::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.register_ca_c.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& register_ca_c::_internal_nichen() const {
  return nichen_.Get();
}
inline void register_ca_c::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void register_ca_c::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.register_ca_c.nichen)
}
inline void register_ca_c::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.register_ca_c.nichen)
}
inline void register_ca_c::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.register_ca_c.nichen)
}
inline std::string* register_ca_c::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* register_ca_c::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.register_ca_c.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void register_ca_c::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.register_ca_c.nichen)
}

// string pwd = 4;
inline void register_ca_c::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& register_ca_c::pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_c.pwd)
  return _internal_pwd();
}
inline void register_ca_c::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_c.pwd)
}
inline std::string* register_ca_c::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.register_ca_c.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& register_ca_c::_internal_pwd() const {
  return pwd_.Get();
}
inline void register_ca_c::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void register_ca_c::set_pwd(std::string&& value) {
  
  pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.register_ca_c.pwd)
}
inline void register_ca_c::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.register_ca_c.pwd)
}
inline void register_ca_c::set_pwd(const char* value,
    size_t size) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.register_ca_c.pwd)
}
inline std::string* register_ca_c::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* register_ca_c::release_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.register_ca_c.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void register_ca_c::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.register_ca_c.pwd)
}

// int32 trade = 5;
inline void register_ca_c::clear_trade() {
  trade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_ca_c::_internal_trade() const {
  return trade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_ca_c::trade() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_c.trade)
  return _internal_trade();
}
inline void register_ca_c::_internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_ = value;
}
inline void register_ca_c::set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_c.trade)
}

// string invite = 6;
inline void register_ca_c::clear_invite() {
  invite_.ClearToEmpty();
}
inline const std::string& register_ca_c::invite() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_c.invite)
  return _internal_invite();
}
inline void register_ca_c::set_invite(const std::string& value) {
  _internal_set_invite(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_c.invite)
}
inline std::string* register_ca_c::mutable_invite() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.register_ca_c.invite)
  return _internal_mutable_invite();
}
inline const std::string& register_ca_c::_internal_invite() const {
  return invite_.Get();
}
inline void register_ca_c::_internal_set_invite(const std::string& value) {
  
  invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void register_ca_c::set_invite(std::string&& value) {
  
  invite_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.register_ca_c.invite)
}
inline void register_ca_c::set_invite(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.register_ca_c.invite)
}
inline void register_ca_c::set_invite(const char* value,
    size_t size) {
  
  invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.register_ca_c.invite)
}
inline std::string* register_ca_c::_internal_mutable_invite() {
  
  return invite_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* register_ca_c::release_invite() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.register_ca_c.invite)
  return invite_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void register_ca_c::set_allocated_invite(std::string* invite) {
  if (invite != nullptr) {
    
  } else {
    
  }
  invite_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.register_ca_c.invite)
}

// -------------------------------------------------------------------

// register_ca_s

// int32 result = 1;
inline void register_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_ca_s.result)
  return _internal_result();
}
inline void register_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void register_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_ca_s.result)
}

// -------------------------------------------------------------------

// booking_list_ca_s_item

// int32 id = 1;
inline void booking_list_ca_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_list_ca_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_list_ca_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_list_ca_s.item.id)
  return _internal_id();
}
inline void booking_list_ca_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void booking_list_ca_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_list_ca_s.item.id)
}

// int32 contract_type = 2;
inline void booking_list_ca_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_list_ca_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_list_ca_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_list_ca_s.item.contract_type)
  return _internal_contract_type();
}
inline void booking_list_ca_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void booking_list_ca_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_list_ca_s.item.contract_type)
}

// int32 time = 3;
inline void booking_list_ca_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_list_ca_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_list_ca_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_list_ca_s.item.time)
  return _internal_time();
}
inline void booking_list_ca_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void booking_list_ca_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_list_ca_s.item.time)
}

// -------------------------------------------------------------------

// booking_list_ca_s

// repeated .frmpub.protocc.booking_list_ca_s.item its = 1;
inline int booking_list_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int booking_list_ca_s::its_size() const {
  return _internal_its_size();
}
inline void booking_list_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::booking_list_ca_s_item* booking_list_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.booking_list_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_list_ca_s_item >*
booking_list_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.booking_list_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::booking_list_ca_s_item& booking_list_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::booking_list_ca_s_item& booking_list_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_list_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::booking_list_ca_s_item* booking_list_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::booking_list_ca_s_item* booking_list_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.booking_list_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_list_ca_s_item >&
booking_list_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.booking_list_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// contract_rob_ca_s_item

// int32 contract_type = 1;
inline void contract_rob_ca_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_rob_ca_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_rob_ca_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_rob_ca_s.item.contract_type)
  return _internal_contract_type();
}
inline void contract_rob_ca_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void contract_rob_ca_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_rob_ca_s.item.contract_type)
}

// int32 rob = 2;
inline void contract_rob_ca_s_item::clear_rob() {
  rob_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_rob_ca_s_item::_internal_rob() const {
  return rob_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_rob_ca_s_item::rob() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_rob_ca_s.item.rob)
  return _internal_rob();
}
inline void contract_rob_ca_s_item::_internal_set_rob(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rob_ = value;
}
inline void contract_rob_ca_s_item::set_rob(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rob(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_rob_ca_s.item.rob)
}

// -------------------------------------------------------------------

// contract_rob_ca_s

// repeated .frmpub.protocc.contract_rob_ca_s.item its = 1;
inline int contract_rob_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int contract_rob_ca_s::its_size() const {
  return _internal_its_size();
}
inline void contract_rob_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::contract_rob_ca_s_item* contract_rob_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.contract_rob_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_rob_ca_s_item >*
contract_rob_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.contract_rob_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::contract_rob_ca_s_item& contract_rob_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::contract_rob_ca_s_item& contract_rob_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_rob_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::contract_rob_ca_s_item* contract_rob_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::contract_rob_ca_s_item* contract_rob_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.contract_rob_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_rob_ca_s_item >&
contract_rob_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.contract_rob_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// booking_ca_c

// int32 contract_type = 1;
inline void booking_ca_c::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_ca_c::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_ca_c::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_ca_c.contract_type)
  return _internal_contract_type();
}
inline void booking_ca_c::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void booking_ca_c::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_ca_c.contract_type)
}

// -------------------------------------------------------------------

// booking_ca_s

// int32 result = 1;
inline void booking_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_ca_s.result)
  return _internal_result();
}
inline void booking_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void booking_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_ca_s.result)
}

// int32 curr_dispatch_coin = 2;
inline void booking_ca_s::clear_curr_dispatch_coin() {
  curr_dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_ca_s::_internal_curr_dispatch_coin() const {
  return curr_dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_ca_s::curr_dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_ca_s.curr_dispatch_coin)
  return _internal_curr_dispatch_coin();
}
inline void booking_ca_s::_internal_set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_dispatch_coin_ = value;
}
inline void booking_ca_s::set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_ca_s.curr_dispatch_coin)
}

// -------------------------------------------------------------------

// rob_ca_c

// int32 contract_type = 1;
inline void rob_ca_c::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rob_ca_c::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rob_ca_c::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.rob_ca_c.contract_type)
  return _internal_contract_type();
}
inline void rob_ca_c::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void rob_ca_c::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.rob_ca_c.contract_type)
}

// -------------------------------------------------------------------

// rob_ca_s

// int32 result = 1;
inline void rob_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rob_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rob_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.rob_ca_s.result)
  return _internal_result();
}
inline void rob_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void rob_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.rob_ca_s.result)
}

// int32 curr_dispatch_coin = 2;
inline void rob_ca_s::clear_curr_dispatch_coin() {
  curr_dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rob_ca_s::_internal_curr_dispatch_coin() const {
  return curr_dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rob_ca_s::curr_dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.rob_ca_s.curr_dispatch_coin)
  return _internal_curr_dispatch_coin();
}
inline void rob_ca_s::_internal_set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_dispatch_coin_ = value;
}
inline void rob_ca_s::set_curr_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.rob_ca_s.curr_dispatch_coin)
}

// -------------------------------------------------------------------

// order_list_ca_c

// int32 type = 1;
inline void order_list_ca_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_c.type)
  return _internal_type();
}
inline void order_list_ca_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void order_list_ca_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_c.type)
}

// -------------------------------------------------------------------

// order_list_ca_s_item

// int64 id = 1;
inline void order_list_ca_s_item::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_ca_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_ca_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.id)
  return _internal_id();
}
inline void order_list_ca_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void order_list_ca_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.id)
}

// int32 contract_type = 2;
inline void order_list_ca_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.contract_type)
  return _internal_contract_type();
}
inline void order_list_ca_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void order_list_ca_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.contract_type)
}

// int32 robtime = 3;
inline void order_list_ca_s_item::clear_robtime() {
  robtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::_internal_robtime() const {
  return robtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::robtime() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.robtime)
  return _internal_robtime();
}
inline void order_list_ca_s_item::_internal_set_robtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robtime_ = value;
}
inline void order_list_ca_s_item::set_robtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robtime(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.robtime)
}

// int32 paytime = 4;
inline void order_list_ca_s_item::clear_paytime() {
  paytime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::_internal_paytime() const {
  return paytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::paytime() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.paytime)
  return _internal_paytime();
}
inline void order_list_ca_s_item::_internal_set_paytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  paytime_ = value;
}
inline void order_list_ca_s_item::set_paytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_paytime(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.paytime)
}

// int32 oktime = 5;
inline void order_list_ca_s_item::clear_oktime() {
  oktime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::_internal_oktime() const {
  return oktime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::oktime() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.oktime)
  return _internal_oktime();
}
inline void order_list_ca_s_item::_internal_set_oktime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oktime_ = value;
}
inline void order_list_ca_s_item::set_oktime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oktime(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.oktime)
}

// int32 state = 6;
inline void order_list_ca_s_item::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s_item::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.state)
  return _internal_state();
}
inline void order_list_ca_s_item::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void order_list_ca_s_item::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.state)
}

// int64 sell_phone = 7;
inline void order_list_ca_s_item::clear_sell_phone() {
  sell_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_ca_s_item::_internal_sell_phone() const {
  return sell_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_ca_s_item::sell_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.sell_phone)
  return _internal_sell_phone();
}
inline void order_list_ca_s_item::_internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sell_phone_ = value;
}
inline void order_list_ca_s_item::set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sell_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.sell_phone)
}

// int64 buy_phone = 8;
inline void order_list_ca_s_item::clear_buy_phone() {
  buy_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_ca_s_item::_internal_buy_phone() const {
  return buy_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_ca_s_item::buy_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.buy_phone)
  return _internal_buy_phone();
}
inline void order_list_ca_s_item::_internal_set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buy_phone_ = value;
}
inline void order_list_ca_s_item::set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buy_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.buy_phone)
}

// float price = 9;
inline void order_list_ca_s_item::clear_price() {
  price_ = 0;
}
inline float order_list_ca_s_item::_internal_price() const {
  return price_;
}
inline float order_list_ca_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.item.price)
  return _internal_price();
}
inline void order_list_ca_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void order_list_ca_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.item.price)
}

// -------------------------------------------------------------------

// order_list_ca_s

// int32 type = 1;
inline void order_list_ca_s::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_ca_s::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.type)
  return _internal_type();
}
inline void order_list_ca_s::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void order_list_ca_s::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_ca_s.type)
}

// repeated .frmpub.protocc.order_list_ca_s.item its = 2;
inline int order_list_ca_s::_internal_its_size() const {
  return its_.size();
}
inline int order_list_ca_s::its_size() const {
  return _internal_its_size();
}
inline void order_list_ca_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::order_list_ca_s_item* order_list_ca_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.order_list_ca_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_ca_s_item >*
order_list_ca_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.order_list_ca_s.its)
  return &its_;
}
inline const ::frmpub::protocc::order_list_ca_s_item& order_list_ca_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::order_list_ca_s_item& order_list_ca_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_ca_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::order_list_ca_s_item* order_list_ca_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::order_list_ca_s_item* order_list_ca_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.order_list_ca_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_ca_s_item >&
order_list_ca_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.order_list_ca_s.its)
  return its_;
}

// -------------------------------------------------------------------

// sell_info_ca_c

// int64 sell_phone = 1;
inline void sell_info_ca_c::clear_sell_phone() {
  sell_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sell_info_ca_c::_internal_sell_phone() const {
  return sell_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sell_info_ca_c::sell_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_c.sell_phone)
  return _internal_sell_phone();
}
inline void sell_info_ca_c::_internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sell_phone_ = value;
}
inline void sell_info_ca_c::set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sell_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_c.sell_phone)
}

// -------------------------------------------------------------------

// sell_info_ca_s

// string nichen = 1;
inline void sell_info_ca_s::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.nichen)
  return _internal_nichen();
}
inline void sell_info_ca_s::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.nichen)
}
inline std::string* sell_info_ca_s::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& sell_info_ca_s::_internal_nichen() const {
  return nichen_.Get();
}
inline void sell_info_ca_s::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.nichen)
}
inline void sell_info_ca_s::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.nichen)
}
inline void sell_info_ca_s::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.nichen)
}
inline std::string* sell_info_ca_s::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.nichen)
}

// int64 sell_phone = 2;
inline void sell_info_ca_s::clear_sell_phone() {
  sell_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sell_info_ca_s::_internal_sell_phone() const {
  return sell_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sell_info_ca_s::sell_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.sell_phone)
  return _internal_sell_phone();
}
inline void sell_info_ca_s::_internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sell_phone_ = value;
}
inline void sell_info_ca_s::set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sell_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.sell_phone)
}

// string bank_name = 3;
inline void sell_info_ca_s::clear_bank_name() {
  bank_name_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::bank_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.bank_name)
  return _internal_bank_name();
}
inline void sell_info_ca_s::set_bank_name(const std::string& value) {
  _internal_set_bank_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.bank_name)
}
inline std::string* sell_info_ca_s::mutable_bank_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.bank_name)
  return _internal_mutable_bank_name();
}
inline const std::string& sell_info_ca_s::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void sell_info_ca_s::_internal_set_bank_name(const std::string& value) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_bank_name(std::string&& value) {
  
  bank_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.bank_name)
}
inline void sell_info_ca_s::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.bank_name)
}
inline void sell_info_ca_s::set_bank_name(const char* value,
    size_t size) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.bank_name)
}
inline std::string* sell_info_ca_s::_internal_mutable_bank_name() {
  
  return bank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_bank_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.bank_name)
  return bank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.bank_name)
}

// string bank_cardid = 4;
inline void sell_info_ca_s::clear_bank_cardid() {
  bank_cardid_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::bank_cardid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.bank_cardid)
  return _internal_bank_cardid();
}
inline void sell_info_ca_s::set_bank_cardid(const std::string& value) {
  _internal_set_bank_cardid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.bank_cardid)
}
inline std::string* sell_info_ca_s::mutable_bank_cardid() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.bank_cardid)
  return _internal_mutable_bank_cardid();
}
inline const std::string& sell_info_ca_s::_internal_bank_cardid() const {
  return bank_cardid_.Get();
}
inline void sell_info_ca_s::_internal_set_bank_cardid(const std::string& value) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_bank_cardid(std::string&& value) {
  
  bank_cardid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.bank_cardid)
}
inline void sell_info_ca_s::set_bank_cardid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.bank_cardid)
}
inline void sell_info_ca_s::set_bank_cardid(const char* value,
    size_t size) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.bank_cardid)
}
inline std::string* sell_info_ca_s::_internal_mutable_bank_cardid() {
  
  return bank_cardid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_bank_cardid() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.bank_cardid)
  return bank_cardid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_bank_cardid(std::string* bank_cardid) {
  if (bank_cardid != nullptr) {
    
  } else {
    
  }
  bank_cardid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_cardid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.bank_cardid)
}

// string bank_user_name = 5;
inline void sell_info_ca_s::clear_bank_user_name() {
  bank_user_name_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::bank_user_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.bank_user_name)
  return _internal_bank_user_name();
}
inline void sell_info_ca_s::set_bank_user_name(const std::string& value) {
  _internal_set_bank_user_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.bank_user_name)
}
inline std::string* sell_info_ca_s::mutable_bank_user_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.bank_user_name)
  return _internal_mutable_bank_user_name();
}
inline const std::string& sell_info_ca_s::_internal_bank_user_name() const {
  return bank_user_name_.Get();
}
inline void sell_info_ca_s::_internal_set_bank_user_name(const std::string& value) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_bank_user_name(std::string&& value) {
  
  bank_user_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.bank_user_name)
}
inline void sell_info_ca_s::set_bank_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.bank_user_name)
}
inline void sell_info_ca_s::set_bank_user_name(const char* value,
    size_t size) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.bank_user_name)
}
inline std::string* sell_info_ca_s::_internal_mutable_bank_user_name() {
  
  return bank_user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_bank_user_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.bank_user_name)
  return bank_user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_bank_user_name(std::string* bank_user_name) {
  if (bank_user_name != nullptr) {
    
  } else {
    
  }
  bank_user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.bank_user_name)
}

// string ailpay_id = 6;
inline void sell_info_ca_s::clear_ailpay_id() {
  ailpay_id_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::ailpay_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.ailpay_id)
  return _internal_ailpay_id();
}
inline void sell_info_ca_s::set_ailpay_id(const std::string& value) {
  _internal_set_ailpay_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.ailpay_id)
}
inline std::string* sell_info_ca_s::mutable_ailpay_id() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.ailpay_id)
  return _internal_mutable_ailpay_id();
}
inline const std::string& sell_info_ca_s::_internal_ailpay_id() const {
  return ailpay_id_.Get();
}
inline void sell_info_ca_s::_internal_set_ailpay_id(const std::string& value) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_ailpay_id(std::string&& value) {
  
  ailpay_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.ailpay_id)
}
inline void sell_info_ca_s::set_ailpay_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.ailpay_id)
}
inline void sell_info_ca_s::set_ailpay_id(const char* value,
    size_t size) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.ailpay_id)
}
inline std::string* sell_info_ca_s::_internal_mutable_ailpay_id() {
  
  return ailpay_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_ailpay_id() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.ailpay_id)
  return ailpay_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_ailpay_id(std::string* ailpay_id) {
  if (ailpay_id != nullptr) {
    
  } else {
    
  }
  ailpay_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ailpay_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.ailpay_id)
}

// string alipay_name = 7;
inline void sell_info_ca_s::clear_alipay_name() {
  alipay_name_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::alipay_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.alipay_name)
  return _internal_alipay_name();
}
inline void sell_info_ca_s::set_alipay_name(const std::string& value) {
  _internal_set_alipay_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.alipay_name)
}
inline std::string* sell_info_ca_s::mutable_alipay_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.alipay_name)
  return _internal_mutable_alipay_name();
}
inline const std::string& sell_info_ca_s::_internal_alipay_name() const {
  return alipay_name_.Get();
}
inline void sell_info_ca_s::_internal_set_alipay_name(const std::string& value) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_alipay_name(std::string&& value) {
  
  alipay_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.alipay_name)
}
inline void sell_info_ca_s::set_alipay_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.alipay_name)
}
inline void sell_info_ca_s::set_alipay_name(const char* value,
    size_t size) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.alipay_name)
}
inline std::string* sell_info_ca_s::_internal_mutable_alipay_name() {
  
  return alipay_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_alipay_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.alipay_name)
  return alipay_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_alipay_name(std::string* alipay_name) {
  if (alipay_name != nullptr) {
    
  } else {
    
  }
  alipay_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alipay_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.alipay_name)
}

// string webchat_name = 8;
inline void sell_info_ca_s::clear_webchat_name() {
  webchat_name_.ClearToEmpty();
}
inline const std::string& sell_info_ca_s::webchat_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sell_info_ca_s.webchat_name)
  return _internal_webchat_name();
}
inline void sell_info_ca_s::set_webchat_name(const std::string& value) {
  _internal_set_webchat_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sell_info_ca_s.webchat_name)
}
inline std::string* sell_info_ca_s::mutable_webchat_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sell_info_ca_s.webchat_name)
  return _internal_mutable_webchat_name();
}
inline const std::string& sell_info_ca_s::_internal_webchat_name() const {
  return webchat_name_.Get();
}
inline void sell_info_ca_s::_internal_set_webchat_name(const std::string& value) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sell_info_ca_s::set_webchat_name(std::string&& value) {
  
  webchat_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sell_info_ca_s.webchat_name)
}
inline void sell_info_ca_s::set_webchat_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sell_info_ca_s.webchat_name)
}
inline void sell_info_ca_s::set_webchat_name(const char* value,
    size_t size) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sell_info_ca_s.webchat_name)
}
inline std::string* sell_info_ca_s::_internal_mutable_webchat_name() {
  
  return webchat_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sell_info_ca_s::release_webchat_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sell_info_ca_s.webchat_name)
  return webchat_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sell_info_ca_s::set_allocated_webchat_name(std::string* webchat_name) {
  if (webchat_name != nullptr) {
    
  } else {
    
  }
  webchat_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webchat_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sell_info_ca_s.webchat_name)
}

// -------------------------------------------------------------------

// pay_order_ca_c

// int64 order_id = 1;
inline void pay_order_ca_c::clear_order_id() {
  order_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pay_order_ca_c::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pay_order_ca_c::order_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_order_ca_c.order_id)
  return _internal_order_id();
}
inline void pay_order_ca_c::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_id_ = value;
}
inline void pay_order_ca_c::set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_order_ca_c.order_id)
}

// string pay_voucher = 2;
inline void pay_order_ca_c::clear_pay_voucher() {
  pay_voucher_.ClearToEmpty();
}
inline const std::string& pay_order_ca_c::pay_voucher() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_order_ca_c.pay_voucher)
  return _internal_pay_voucher();
}
inline void pay_order_ca_c::set_pay_voucher(const std::string& value) {
  _internal_set_pay_voucher(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_order_ca_c.pay_voucher)
}
inline std::string* pay_order_ca_c::mutable_pay_voucher() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_order_ca_c.pay_voucher)
  return _internal_mutable_pay_voucher();
}
inline const std::string& pay_order_ca_c::_internal_pay_voucher() const {
  return pay_voucher_.Get();
}
inline void pay_order_ca_c::_internal_set_pay_voucher(const std::string& value) {
  
  pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_order_ca_c::set_pay_voucher(std::string&& value) {
  
  pay_voucher_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_order_ca_c.pay_voucher)
}
inline void pay_order_ca_c::set_pay_voucher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_order_ca_c.pay_voucher)
}
inline void pay_order_ca_c::set_pay_voucher(const char* value,
    size_t size) {
  
  pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_order_ca_c.pay_voucher)
}
inline std::string* pay_order_ca_c::_internal_mutable_pay_voucher() {
  
  return pay_voucher_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_order_ca_c::release_pay_voucher() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_order_ca_c.pay_voucher)
  return pay_voucher_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_order_ca_c::set_allocated_pay_voucher(std::string* pay_voucher) {
  if (pay_voucher != nullptr) {
    
  } else {
    
  }
  pay_voucher_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pay_voucher,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_order_ca_c.pay_voucher)
}

// -------------------------------------------------------------------

// pay_order_ca_s

// int32 result = 1;
inline void pay_order_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_order_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_order_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_order_ca_s.result)
  return _internal_result();
}
inline void pay_order_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void pay_order_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_order_ca_s.result)
}

// -------------------------------------------------------------------

// buy_info_ca_c

// int64 order_id = 1;
inline void buy_info_ca_c::clear_order_id() {
  order_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 buy_info_ca_c::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 buy_info_ca_c::order_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.buy_info_ca_c.order_id)
  return _internal_order_id();
}
inline void buy_info_ca_c::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_id_ = value;
}
inline void buy_info_ca_c::set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.buy_info_ca_c.order_id)
}

// -------------------------------------------------------------------

// buy_info_ca_s

// string nichen = 1;
inline void buy_info_ca_s::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& buy_info_ca_s::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.buy_info_ca_s.nichen)
  return _internal_nichen();
}
inline void buy_info_ca_s::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.buy_info_ca_s.nichen)
}
inline std::string* buy_info_ca_s::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.buy_info_ca_s.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& buy_info_ca_s::_internal_nichen() const {
  return nichen_.Get();
}
inline void buy_info_ca_s::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void buy_info_ca_s::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.buy_info_ca_s.nichen)
}
inline void buy_info_ca_s::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.buy_info_ca_s.nichen)
}
inline void buy_info_ca_s::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.buy_info_ca_s.nichen)
}
inline std::string* buy_info_ca_s::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* buy_info_ca_s::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.buy_info_ca_s.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void buy_info_ca_s::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.buy_info_ca_s.nichen)
}

// int64 phone = 2;
inline void buy_info_ca_s::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 buy_info_ca_s::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 buy_info_ca_s::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.buy_info_ca_s.phone)
  return _internal_phone();
}
inline void buy_info_ca_s::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void buy_info_ca_s::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.buy_info_ca_s.phone)
}

// string pay_voucher = 3;
inline void buy_info_ca_s::clear_pay_voucher() {
  pay_voucher_.ClearToEmpty();
}
inline const std::string& buy_info_ca_s::pay_voucher() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.buy_info_ca_s.pay_voucher)
  return _internal_pay_voucher();
}
inline void buy_info_ca_s::set_pay_voucher(const std::string& value) {
  _internal_set_pay_voucher(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.buy_info_ca_s.pay_voucher)
}
inline std::string* buy_info_ca_s::mutable_pay_voucher() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.buy_info_ca_s.pay_voucher)
  return _internal_mutable_pay_voucher();
}
inline const std::string& buy_info_ca_s::_internal_pay_voucher() const {
  return pay_voucher_.Get();
}
inline void buy_info_ca_s::_internal_set_pay_voucher(const std::string& value) {
  
  pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void buy_info_ca_s::set_pay_voucher(std::string&& value) {
  
  pay_voucher_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.buy_info_ca_s.pay_voucher)
}
inline void buy_info_ca_s::set_pay_voucher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.buy_info_ca_s.pay_voucher)
}
inline void buy_info_ca_s::set_pay_voucher(const char* value,
    size_t size) {
  
  pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.buy_info_ca_s.pay_voucher)
}
inline std::string* buy_info_ca_s::_internal_mutable_pay_voucher() {
  
  return pay_voucher_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* buy_info_ca_s::release_pay_voucher() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.buy_info_ca_s.pay_voucher)
  return pay_voucher_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void buy_info_ca_s::set_allocated_pay_voucher(std::string* pay_voucher) {
  if (pay_voucher != nullptr) {
    
  } else {
    
  }
  pay_voucher_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pay_voucher,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.buy_info_ca_s.pay_voucher)
}

// -------------------------------------------------------------------

// order_oper_ca_c

// int64 order_id = 1;
inline void order_oper_ca_c::clear_order_id() {
  order_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_oper_ca_c::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_oper_ca_c::order_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_oper_ca_c.order_id)
  return _internal_order_id();
}
inline void order_oper_ca_c::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_id_ = value;
}
inline void order_oper_ca_c::set_order_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_oper_ca_c.order_id)
}

// int32 oper_type = 2;
inline void order_oper_ca_c::clear_oper_type() {
  oper_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_c::_internal_oper_type() const {
  return oper_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_c::oper_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_oper_ca_c.oper_type)
  return _internal_oper_type();
}
inline void order_oper_ca_c::_internal_set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oper_type_ = value;
}
inline void order_oper_ca_c::set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oper_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_oper_ca_c.oper_type)
}

// int32 trade_code = 3;
inline void order_oper_ca_c::clear_trade_code() {
  trade_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_c::_internal_trade_code() const {
  return trade_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_c::trade_code() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_oper_ca_c.trade_code)
  return _internal_trade_code();
}
inline void order_oper_ca_c::_internal_set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_code_ = value;
}
inline void order_oper_ca_c::set_trade_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade_code(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_oper_ca_c.trade_code)
}

// -------------------------------------------------------------------

// order_oper_ca_s

// int32 result = 1;
inline void order_oper_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_oper_ca_s.result)
  return _internal_result();
}
inline void order_oper_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void order_oper_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_oper_ca_s.result)
}

// int32 oper_type = 2;
inline void order_oper_ca_s::clear_oper_type() {
  oper_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_s::_internal_oper_type() const {
  return oper_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_oper_ca_s::oper_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_oper_ca_s.oper_type)
  return _internal_oper_type();
}
inline void order_oper_ca_s::_internal_set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oper_type_ = value;
}
inline void order_oper_ca_s::set_oper_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oper_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_oper_ca_s.oper_type)
}

// -------------------------------------------------------------------

// upload_ca_c

// string name = 1;
inline void upload_ca_c::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& upload_ca_c::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.upload_ca_c.name)
  return _internal_name();
}
inline void upload_ca_c::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.upload_ca_c.name)
}
inline std::string* upload_ca_c::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.upload_ca_c.name)
  return _internal_mutable_name();
}
inline const std::string& upload_ca_c::_internal_name() const {
  return name_.Get();
}
inline void upload_ca_c::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void upload_ca_c::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.upload_ca_c.name)
}
inline void upload_ca_c::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.upload_ca_c.name)
}
inline void upload_ca_c::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.upload_ca_c.name)
}
inline std::string* upload_ca_c::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* upload_ca_c::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.upload_ca_c.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void upload_ca_c::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.upload_ca_c.name)
}

// bytes data = 2;
inline void upload_ca_c::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& upload_ca_c::data() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.upload_ca_c.data)
  return _internal_data();
}
inline void upload_ca_c::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.upload_ca_c.data)
}
inline std::string* upload_ca_c::mutable_data() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.upload_ca_c.data)
  return _internal_mutable_data();
}
inline const std::string& upload_ca_c::_internal_data() const {
  return data_.Get();
}
inline void upload_ca_c::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void upload_ca_c::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.upload_ca_c.data)
}
inline void upload_ca_c::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.upload_ca_c.data)
}
inline void upload_ca_c::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.upload_ca_c.data)
}
inline std::string* upload_ca_c::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* upload_ca_c::release_data() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.upload_ca_c.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void upload_ca_c::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.upload_ca_c.data)
}

// -------------------------------------------------------------------

// upload_ca_s

// int32 result = 1;
inline void upload_ca_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 upload_ca_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 upload_ca_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.upload_ca_s.result)
  return _internal_result();
}
inline void upload_ca_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void upload_ca_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.upload_ca_s.result)
}

// -------------------------------------------------------------------

// user_info_ca_c

// int64 phone = 1;
inline void user_info_ca_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_info_ca_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_info_ca_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_c.phone)
  return _internal_phone();
}
inline void user_info_ca_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_info_ca_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_c.phone)
}

// -------------------------------------------------------------------

// user_info_ca_s

// int64 phone = 1;
inline void user_info_ca_s::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_info_ca_s::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_info_ca_s::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.phone)
  return _internal_phone();
}
inline void user_info_ca_s::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_info_ca_s::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.phone)
}

// int32 activated_coin = 2;
inline void user_info_ca_s::clear_activated_coin() {
  activated_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_ca_s::_internal_activated_coin() const {
  return activated_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_ca_s::activated_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.activated_coin)
  return _internal_activated_coin();
}
inline void user_info_ca_s::_internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_coin_ = value;
}
inline void user_info_ca_s::set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.activated_coin)
}

// int32 dispatch_coin = 3;
inline void user_info_ca_s::clear_dispatch_coin() {
  dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_ca_s::_internal_dispatch_coin() const {
  return dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_ca_s::dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.dispatch_coin)
  return _internal_dispatch_coin();
}
inline void user_info_ca_s::_internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dispatch_coin_ = value;
}
inline void user_info_ca_s::set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.dispatch_coin)
}

// float static_income = 4;
inline void user_info_ca_s::clear_static_income() {
  static_income_ = 0;
}
inline float user_info_ca_s::_internal_static_income() const {
  return static_income_;
}
inline float user_info_ca_s::static_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.static_income)
  return _internal_static_income();
}
inline void user_info_ca_s::_internal_set_static_income(float value) {
  
  static_income_ = value;
}
inline void user_info_ca_s::set_static_income(float value) {
  _internal_set_static_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.static_income)
}

// float promote_income = 5;
inline void user_info_ca_s::clear_promote_income() {
  promote_income_ = 0;
}
inline float user_info_ca_s::_internal_promote_income() const {
  return promote_income_;
}
inline float user_info_ca_s::promote_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.promote_income)
  return _internal_promote_income();
}
inline void user_info_ca_s::_internal_set_promote_income(float value) {
  
  promote_income_ = value;
}
inline void user_info_ca_s::set_promote_income(float value) {
  _internal_set_promote_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.promote_income)
}

// float team_income = 6;
inline void user_info_ca_s::clear_team_income() {
  team_income_ = 0;
}
inline float user_info_ca_s::_internal_team_income() const {
  return team_income_;
}
inline float user_info_ca_s::team_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.team_income)
  return _internal_team_income();
}
inline void user_info_ca_s::_internal_set_team_income(float value) {
  
  team_income_ = value;
}
inline void user_info_ca_s::set_team_income(float value) {
  _internal_set_team_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.team_income)
}

// float promote_current_income = 7;
inline void user_info_ca_s::clear_promote_current_income() {
  promote_current_income_ = 0;
}
inline float user_info_ca_s::_internal_promote_current_income() const {
  return promote_current_income_;
}
inline float user_info_ca_s::promote_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.promote_current_income)
  return _internal_promote_current_income();
}
inline void user_info_ca_s::_internal_set_promote_current_income(float value) {
  
  promote_current_income_ = value;
}
inline void user_info_ca_s::set_promote_current_income(float value) {
  _internal_set_promote_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.promote_current_income)
}

// float team_current_income = 8;
inline void user_info_ca_s::clear_team_current_income() {
  team_current_income_ = 0;
}
inline float user_info_ca_s::_internal_team_current_income() const {
  return team_current_income_;
}
inline float user_info_ca_s::team_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.team_current_income)
  return _internal_team_current_income();
}
inline void user_info_ca_s::_internal_set_team_current_income(float value) {
  
  team_current_income_ = value;
}
inline void user_info_ca_s::set_team_current_income(float value) {
  _internal_set_team_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.team_current_income)
}

// float assets = 9;
inline void user_info_ca_s::clear_assets() {
  assets_ = 0;
}
inline float user_info_ca_s::_internal_assets() const {
  return assets_;
}
inline float user_info_ca_s::assets() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_info_ca_s.assets)
  return _internal_assets();
}
inline void user_info_ca_s::_internal_set_assets(float value) {
  
  assets_ = value;
}
inline void user_info_ca_s::set_assets(float value) {
  _internal_set_assets(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_info_ca_s.assets)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocc
}  // namespace frmpub

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frmpub::protocc::AnimalMsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frmpub::protocc::AnimalMsgId>() {
  return ::frmpub::protocc::AnimalMsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_animal_2eproto
