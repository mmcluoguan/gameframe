// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animal.proto

#include "animal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace frmpub {
namespace protocc {
constexpr login_ca_c::login_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0)){}
struct login_ca_cDefaultTypeInternal {
  constexpr login_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_ca_cDefaultTypeInternal() {}
  union {
    login_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_ca_cDefaultTypeInternal _login_ca_c_default_instance_;
constexpr login_ca_s::login_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_cardid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ailpay_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alipay_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webchat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invite_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
  , activated_coin_(0)
  , dispatch_coin_(0)
  , static_income_(0)
  , promote_income_(0)
  , team_income_(0)
  , enable_(false)
  , assets_(0)
  , level_(0)
  , name_verifie_(0)
  , pay_verifie_(0)
  , promote_current_income_(0)
  , team_current_income_(0)
  , sign_time_(0){}
struct login_ca_sDefaultTypeInternal {
  constexpr login_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_ca_sDefaultTypeInternal() {}
  union {
    login_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_ca_sDefaultTypeInternal _login_ca_s_default_instance_;
constexpr enabled_ca_s::enabled_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , activated_coin_(0){}
struct enabled_ca_sDefaultTypeInternal {
  constexpr enabled_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~enabled_ca_sDefaultTypeInternal() {}
  union {
    enabled_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT enabled_ca_sDefaultTypeInternal _enabled_ca_s_default_instance_;
constexpr setwallet_ca_c::setwallet_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bank_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_cardid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ailpay_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alipay_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webchat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct setwallet_ca_cDefaultTypeInternal {
  constexpr setwallet_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~setwallet_ca_cDefaultTypeInternal() {}
  union {
    setwallet_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT setwallet_ca_cDefaultTypeInternal _setwallet_ca_c_default_instance_;
constexpr setwallet_ca_s::setwallet_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , pay_verifie_(0){}
struct setwallet_ca_sDefaultTypeInternal {
  constexpr setwallet_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~setwallet_ca_sDefaultTypeInternal() {}
  union {
    setwallet_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT setwallet_ca_sDefaultTypeInternal _setwallet_ca_s_default_instance_;
constexpr myteam_ca_s::myteam_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_total_assets_(0)
  , team_total_activated_num_(0)
  , team_total_register_num_(0)
  , depth1_total_activated_num_(0)
  , depth1_total_register_num_(0)
  , depth2_total_activated_num_(0)
  , depth2_total_register_num_(0)
  , depth3_total_activated_num_(0)
  , depth3_total_register_num_(0){}
struct myteam_ca_sDefaultTypeInternal {
  constexpr myteam_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~myteam_ca_sDefaultTypeInternal() {}
  union {
    myteam_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT myteam_ca_sDefaultTypeInternal _myteam_ca_s_default_instance_;
constexpr depth_list_ca_s_item::depth_list_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_(0)
  , assets_(0){}
struct depth_list_ca_s_itemDefaultTypeInternal {
  constexpr depth_list_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~depth_list_ca_s_itemDefaultTypeInternal() {}
  union {
    depth_list_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT depth_list_ca_s_itemDefaultTypeInternal _depth_list_ca_s_item_default_instance_;
constexpr depth_list_ca_s::depth_list_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sifs_(){}
struct depth_list_ca_sDefaultTypeInternal {
  constexpr depth_list_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~depth_list_ca_sDefaultTypeInternal() {}
  union {
    depth_list_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT depth_list_ca_sDefaultTypeInternal _depth_list_ca_s_default_instance_;
constexpr idcard_ca_c::idcard_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct idcard_ca_cDefaultTypeInternal {
  constexpr idcard_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~idcard_ca_cDefaultTypeInternal() {}
  union {
    idcard_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT idcard_ca_cDefaultTypeInternal _idcard_ca_c_default_instance_;
constexpr idcard_ca_s::idcard_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , name_verifie_(0){}
struct idcard_ca_sDefaultTypeInternal {
  constexpr idcard_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~idcard_ca_sDefaultTypeInternal() {}
  union {
    idcard_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT idcard_ca_sDefaultTypeInternal _idcard_ca_s_default_instance_;
constexpr sign_ca_s::sign_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , dispatch_coin_(0){}
struct sign_ca_sDefaultTypeInternal {
  constexpr sign_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sign_ca_sDefaultTypeInternal() {}
  union {
    sign_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sign_ca_sDefaultTypeInternal _sign_ca_s_default_instance_;
constexpr login_pwd_ca_c::login_pwd_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct login_pwd_ca_cDefaultTypeInternal {
  constexpr login_pwd_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_pwd_ca_cDefaultTypeInternal() {}
  union {
    login_pwd_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_pwd_ca_cDefaultTypeInternal _login_pwd_ca_c_default_instance_;
constexpr login_pwd_ca_s::login_pwd_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct login_pwd_ca_sDefaultTypeInternal {
  constexpr login_pwd_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_pwd_ca_sDefaultTypeInternal() {}
  union {
    login_pwd_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_pwd_ca_sDefaultTypeInternal _login_pwd_ca_s_default_instance_;
constexpr dispatch_coin_log_ca_s_item::dispatch_coin_log_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(PROTOBUF_LONGLONG(0))
  , id_(0)
  , type_(0)
  , target_phone_(PROTOBUF_LONGLONG(0))
  , num_(0)
  , contract_type_(0){}
struct dispatch_coin_log_ca_s_itemDefaultTypeInternal {
  constexpr dispatch_coin_log_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~dispatch_coin_log_ca_s_itemDefaultTypeInternal() {}
  union {
    dispatch_coin_log_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT dispatch_coin_log_ca_s_itemDefaultTypeInternal _dispatch_coin_log_ca_s_item_default_instance_;
constexpr dispatch_coin_log_ca_s::dispatch_coin_log_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct dispatch_coin_log_ca_sDefaultTypeInternal {
  constexpr dispatch_coin_log_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~dispatch_coin_log_ca_sDefaultTypeInternal() {}
  union {
    dispatch_coin_log_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT dispatch_coin_log_ca_sDefaultTypeInternal _dispatch_coin_log_ca_s_default_instance_;
constexpr recharge_ca_c::recharge_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paycert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , num_(0)
  , rmb_(0){}
struct recharge_ca_cDefaultTypeInternal {
  constexpr recharge_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_ca_cDefaultTypeInternal() {}
  union {
    recharge_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_ca_cDefaultTypeInternal _recharge_ca_c_default_instance_;
constexpr recharge_ca_s::recharge_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct recharge_ca_sDefaultTypeInternal {
  constexpr recharge_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_ca_sDefaultTypeInternal() {}
  union {
    recharge_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_ca_sDefaultTypeInternal _recharge_ca_s_default_instance_;
constexpr transfer_ca_c::transfer_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , num_(0)
  , target_phone_(PROTOBUF_LONGLONG(0))
  , trade_code_(0){}
struct transfer_ca_cDefaultTypeInternal {
  constexpr transfer_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_ca_cDefaultTypeInternal() {}
  union {
    transfer_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_ca_cDefaultTypeInternal _transfer_ca_c_default_instance_;
constexpr transfer_ca_s::transfer_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , type_(0)
  , curr_num_(0){}
struct transfer_ca_sDefaultTypeInternal {
  constexpr transfer_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_ca_sDefaultTypeInternal() {}
  union {
    transfer_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_ca_sDefaultTypeInternal _transfer_ca_s_default_instance_;
constexpr transfer_ca_cs::transfer_ca_cs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , curr_num_(0){}
struct transfer_ca_csDefaultTypeInternal {
  constexpr transfer_ca_csDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_ca_csDefaultTypeInternal() {}
  union {
    transfer_ca_cs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_ca_csDefaultTypeInternal _transfer_ca_cs_default_instance_;
constexpr activated_coin_log_ca_s_item::activated_coin_log_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(PROTOBUF_LONGLONG(0))
  , id_(0)
  , type_(0)
  , target_phone_(PROTOBUF_LONGLONG(0))
  , num_(0){}
struct activated_coin_log_ca_s_itemDefaultTypeInternal {
  constexpr activated_coin_log_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~activated_coin_log_ca_s_itemDefaultTypeInternal() {}
  union {
    activated_coin_log_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT activated_coin_log_ca_s_itemDefaultTypeInternal _activated_coin_log_ca_s_item_default_instance_;
constexpr activated_coin_log_ca_s::activated_coin_log_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct activated_coin_log_ca_sDefaultTypeInternal {
  constexpr activated_coin_log_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~activated_coin_log_ca_sDefaultTypeInternal() {}
  union {
    activated_coin_log_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT activated_coin_log_ca_sDefaultTypeInternal _activated_coin_log_ca_s_default_instance_;
constexpr self_assets_ca_s_item::self_assets_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , price_(0)
  , time_(0)
  , getway_(0){}
struct self_assets_ca_s_itemDefaultTypeInternal {
  constexpr self_assets_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~self_assets_ca_s_itemDefaultTypeInternal() {}
  union {
    self_assets_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT self_assets_ca_s_itemDefaultTypeInternal _self_assets_ca_s_item_default_instance_;
constexpr self_assets_ca_s::self_assets_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct self_assets_ca_sDefaultTypeInternal {
  constexpr self_assets_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~self_assets_ca_sDefaultTypeInternal() {}
  union {
    self_assets_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT self_assets_ca_sDefaultTypeInternal _self_assets_ca_s_default_instance_;
constexpr income_log_ca_c::income_log_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct income_log_ca_cDefaultTypeInternal {
  constexpr income_log_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~income_log_ca_cDefaultTypeInternal() {}
  union {
    income_log_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT income_log_ca_cDefaultTypeInternal _income_log_ca_c_default_instance_;
constexpr income_log_ca_s_item::income_log_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , price_(0)
  , time_(0)
  , depth_(0)
  , target_phone_(PROTOBUF_LONGLONG(0)){}
struct income_log_ca_s_itemDefaultTypeInternal {
  constexpr income_log_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~income_log_ca_s_itemDefaultTypeInternal() {}
  union {
    income_log_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT income_log_ca_s_itemDefaultTypeInternal _income_log_ca_s_item_default_instance_;
constexpr income_log_ca_s::income_log_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct income_log_ca_sDefaultTypeInternal {
  constexpr income_log_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~income_log_ca_sDefaultTypeInternal() {}
  union {
    income_log_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT income_log_ca_sDefaultTypeInternal _income_log_ca_s_default_instance_;
constexpr getcontract_ca_c::getcontract_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(0)
  , contract_type_(0)
  , change_type_(0)
  , trade_code_(0){}
struct getcontract_ca_cDefaultTypeInternal {
  constexpr getcontract_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getcontract_ca_cDefaultTypeInternal() {}
  union {
    getcontract_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getcontract_ca_cDefaultTypeInternal _getcontract_ca_c_default_instance_;
constexpr getcontract_ca_s::getcontract_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , income_(0)
  , change_type_(0){}
struct getcontract_ca_sDefaultTypeInternal {
  constexpr getcontract_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getcontract_ca_sDefaultTypeInternal() {}
  union {
    getcontract_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getcontract_ca_sDefaultTypeInternal _getcontract_ca_s_default_instance_;
constexpr get_coin_ca_c::get_coin_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_(0)
  , change_type_(0)
  , coin_type_(0)
  , trade_code_(0){}
struct get_coin_ca_cDefaultTypeInternal {
  constexpr get_coin_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_coin_ca_cDefaultTypeInternal() {}
  union {
    get_coin_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_coin_ca_cDefaultTypeInternal _get_coin_ca_c_default_instance_;
constexpr get_coin_ca_s::get_coin_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , income_(0)
  , change_type_(0)
  , coin_type_(0)
  , coin_value_(0){}
struct get_coin_ca_sDefaultTypeInternal {
  constexpr get_coin_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_coin_ca_sDefaultTypeInternal() {}
  union {
    get_coin_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_coin_ca_sDefaultTypeInternal _get_coin_ca_s_default_instance_;
constexpr mail_list_ca_s_item::mail_list_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , time_(0)
  , state_(0){}
struct mail_list_ca_s_itemDefaultTypeInternal {
  constexpr mail_list_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mail_list_ca_s_itemDefaultTypeInternal() {}
  union {
    mail_list_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mail_list_ca_s_itemDefaultTypeInternal _mail_list_ca_s_item_default_instance_;
constexpr mail_list_ca_s::mail_list_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct mail_list_ca_sDefaultTypeInternal {
  constexpr mail_list_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mail_list_ca_sDefaultTypeInternal() {}
  union {
    mail_list_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mail_list_ca_sDefaultTypeInternal _mail_list_ca_s_default_instance_;
constexpr mail_look_ca_c::mail_look_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct mail_look_ca_cDefaultTypeInternal {
  constexpr mail_look_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mail_look_ca_cDefaultTypeInternal() {}
  union {
    mail_look_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mail_look_ca_cDefaultTypeInternal _mail_look_ca_c_default_instance_;
constexpr mail_look_ca_s::mail_look_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , id_(0)
  , state_(0){}
struct mail_look_ca_sDefaultTypeInternal {
  constexpr mail_look_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mail_look_ca_sDefaultTypeInternal() {}
  union {
    mail_look_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mail_look_ca_sDefaultTypeInternal _mail_look_ca_s_default_instance_;
constexpr sms_ca_c::sms_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0)){}
struct sms_ca_cDefaultTypeInternal {
  constexpr sms_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sms_ca_cDefaultTypeInternal() {}
  union {
    sms_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sms_ca_cDefaultTypeInternal _sms_ca_c_default_instance_;
constexpr sms_ca_s::sms_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , code_(0){}
struct sms_ca_sDefaultTypeInternal {
  constexpr sms_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sms_ca_sDefaultTypeInternal() {}
  union {
    sms_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sms_ca_sDefaultTypeInternal _sms_ca_s_default_instance_;
constexpr updata_pwd_ca_c::updata_pwd_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : newpwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
  , type_(0)
  , phone_(PROTOBUF_LONGLONG(0)){}
struct updata_pwd_ca_cDefaultTypeInternal {
  constexpr updata_pwd_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~updata_pwd_ca_cDefaultTypeInternal() {}
  union {
    updata_pwd_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT updata_pwd_ca_cDefaultTypeInternal _updata_pwd_ca_c_default_instance_;
constexpr updata_pwd_ca_s::updata_pwd_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , type_(0){}
struct updata_pwd_ca_sDefaultTypeInternal {
  constexpr updata_pwd_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~updata_pwd_ca_sDefaultTypeInternal() {}
  union {
    updata_pwd_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT updata_pwd_ca_sDefaultTypeInternal _updata_pwd_ca_s_default_instance_;
constexpr official_info_ca_s::official_info_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ailpay_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ailpay_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ail_qr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_card_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct official_info_ca_sDefaultTypeInternal {
  constexpr official_info_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~official_info_ca_sDefaultTypeInternal() {}
  union {
    official_info_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT official_info_ca_sDefaultTypeInternal _official_info_ca_s_default_instance_;
constexpr register_ca_c::register_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invite_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , code_(0)
  , trade_(0){}
struct register_ca_cDefaultTypeInternal {
  constexpr register_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_ca_cDefaultTypeInternal() {}
  union {
    register_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_ca_cDefaultTypeInternal _register_ca_c_default_instance_;
constexpr register_ca_s::register_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct register_ca_sDefaultTypeInternal {
  constexpr register_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_ca_sDefaultTypeInternal() {}
  union {
    register_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_ca_sDefaultTypeInternal _register_ca_s_default_instance_;
constexpr booking_list_ca_s_item::booking_list_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , contract_type_(0)
  , time_(0){}
struct booking_list_ca_s_itemDefaultTypeInternal {
  constexpr booking_list_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_list_ca_s_itemDefaultTypeInternal() {}
  union {
    booking_list_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_list_ca_s_itemDefaultTypeInternal _booking_list_ca_s_item_default_instance_;
constexpr booking_list_ca_s::booking_list_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct booking_list_ca_sDefaultTypeInternal {
  constexpr booking_list_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_list_ca_sDefaultTypeInternal() {}
  union {
    booking_list_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_list_ca_sDefaultTypeInternal _booking_list_ca_s_default_instance_;
constexpr contract_rob_ca_s_item::contract_rob_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_type_(0)
  , rob_(0){}
struct contract_rob_ca_s_itemDefaultTypeInternal {
  constexpr contract_rob_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_rob_ca_s_itemDefaultTypeInternal() {}
  union {
    contract_rob_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_rob_ca_s_itemDefaultTypeInternal _contract_rob_ca_s_item_default_instance_;
constexpr contract_rob_ca_s::contract_rob_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct contract_rob_ca_sDefaultTypeInternal {
  constexpr contract_rob_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_rob_ca_sDefaultTypeInternal() {}
  union {
    contract_rob_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_rob_ca_sDefaultTypeInternal _contract_rob_ca_s_default_instance_;
constexpr booking_ca_c::booking_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_type_(0){}
struct booking_ca_cDefaultTypeInternal {
  constexpr booking_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_ca_cDefaultTypeInternal() {}
  union {
    booking_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_ca_cDefaultTypeInternal _booking_ca_c_default_instance_;
constexpr booking_ca_s::booking_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , curr_dispatch_coin_(0){}
struct booking_ca_sDefaultTypeInternal {
  constexpr booking_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_ca_sDefaultTypeInternal() {}
  union {
    booking_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_ca_sDefaultTypeInternal _booking_ca_s_default_instance_;
constexpr rob_ca_c::rob_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_type_(0){}
struct rob_ca_cDefaultTypeInternal {
  constexpr rob_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~rob_ca_cDefaultTypeInternal() {}
  union {
    rob_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT rob_ca_cDefaultTypeInternal _rob_ca_c_default_instance_;
constexpr rob_ca_s::rob_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , curr_dispatch_coin_(0){}
struct rob_ca_sDefaultTypeInternal {
  constexpr rob_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~rob_ca_sDefaultTypeInternal() {}
  union {
    rob_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT rob_ca_sDefaultTypeInternal _rob_ca_s_default_instance_;
constexpr order_list_ca_c::order_list_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct order_list_ca_cDefaultTypeInternal {
  constexpr order_list_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_list_ca_cDefaultTypeInternal() {}
  union {
    order_list_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_list_ca_cDefaultTypeInternal _order_list_ca_c_default_instance_;
constexpr order_list_ca_s_item::order_list_ca_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(PROTOBUF_LONGLONG(0))
  , contract_type_(0)
  , robtime_(0)
  , paytime_(0)
  , oktime_(0)
  , sell_phone_(PROTOBUF_LONGLONG(0))
  , state_(0)
  , price_(0)
  , buy_phone_(PROTOBUF_LONGLONG(0)){}
struct order_list_ca_s_itemDefaultTypeInternal {
  constexpr order_list_ca_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_list_ca_s_itemDefaultTypeInternal() {}
  union {
    order_list_ca_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_list_ca_s_itemDefaultTypeInternal _order_list_ca_s_item_default_instance_;
constexpr order_list_ca_s::order_list_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , type_(0){}
struct order_list_ca_sDefaultTypeInternal {
  constexpr order_list_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_list_ca_sDefaultTypeInternal() {}
  union {
    order_list_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_list_ca_sDefaultTypeInternal _order_list_ca_s_default_instance_;
constexpr sell_info_ca_c::sell_info_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sell_phone_(PROTOBUF_LONGLONG(0)){}
struct sell_info_ca_cDefaultTypeInternal {
  constexpr sell_info_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sell_info_ca_cDefaultTypeInternal() {}
  union {
    sell_info_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sell_info_ca_cDefaultTypeInternal _sell_info_ca_c_default_instance_;
constexpr sell_info_ca_s::sell_info_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_cardid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ailpay_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alipay_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webchat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_phone_(PROTOBUF_LONGLONG(0)){}
struct sell_info_ca_sDefaultTypeInternal {
  constexpr sell_info_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sell_info_ca_sDefaultTypeInternal() {}
  union {
    sell_info_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sell_info_ca_sDefaultTypeInternal _sell_info_ca_s_default_instance_;
constexpr pay_order_ca_c::pay_order_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pay_voucher_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_id_(PROTOBUF_LONGLONG(0)){}
struct pay_order_ca_cDefaultTypeInternal {
  constexpr pay_order_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_order_ca_cDefaultTypeInternal() {}
  union {
    pay_order_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_order_ca_cDefaultTypeInternal _pay_order_ca_c_default_instance_;
constexpr pay_order_ca_s::pay_order_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct pay_order_ca_sDefaultTypeInternal {
  constexpr pay_order_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_order_ca_sDefaultTypeInternal() {}
  union {
    pay_order_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_order_ca_sDefaultTypeInternal _pay_order_ca_s_default_instance_;
constexpr buy_info_ca_c::buy_info_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(PROTOBUF_LONGLONG(0)){}
struct buy_info_ca_cDefaultTypeInternal {
  constexpr buy_info_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~buy_info_ca_cDefaultTypeInternal() {}
  union {
    buy_info_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT buy_info_ca_cDefaultTypeInternal _buy_info_ca_c_default_instance_;
constexpr buy_info_ca_s::buy_info_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pay_voucher_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0)){}
struct buy_info_ca_sDefaultTypeInternal {
  constexpr buy_info_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~buy_info_ca_sDefaultTypeInternal() {}
  union {
    buy_info_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT buy_info_ca_sDefaultTypeInternal _buy_info_ca_s_default_instance_;
constexpr order_oper_ca_c::order_oper_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(PROTOBUF_LONGLONG(0))
  , oper_type_(0)
  , trade_code_(0){}
struct order_oper_ca_cDefaultTypeInternal {
  constexpr order_oper_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_oper_ca_cDefaultTypeInternal() {}
  union {
    order_oper_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_oper_ca_cDefaultTypeInternal _order_oper_ca_c_default_instance_;
constexpr order_oper_ca_s::order_oper_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , oper_type_(0){}
struct order_oper_ca_sDefaultTypeInternal {
  constexpr order_oper_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_oper_ca_sDefaultTypeInternal() {}
  union {
    order_oper_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_oper_ca_sDefaultTypeInternal _order_oper_ca_s_default_instance_;
constexpr upload_ca_c::upload_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct upload_ca_cDefaultTypeInternal {
  constexpr upload_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~upload_ca_cDefaultTypeInternal() {}
  union {
    upload_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT upload_ca_cDefaultTypeInternal _upload_ca_c_default_instance_;
constexpr upload_ca_s::upload_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct upload_ca_sDefaultTypeInternal {
  constexpr upload_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~upload_ca_sDefaultTypeInternal() {}
  union {
    upload_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT upload_ca_sDefaultTypeInternal _upload_ca_s_default_instance_;
constexpr user_info_ca_c::user_info_ca_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0)){}
struct user_info_ca_cDefaultTypeInternal {
  constexpr user_info_ca_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_info_ca_cDefaultTypeInternal() {}
  union {
    user_info_ca_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_info_ca_cDefaultTypeInternal _user_info_ca_c_default_instance_;
constexpr user_info_ca_s::user_info_ca_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , activated_coin_(0)
  , dispatch_coin_(0)
  , static_income_(0)
  , promote_income_(0)
  , team_income_(0)
  , promote_current_income_(0)
  , team_current_income_(0)
  , assets_(0){}
struct user_info_ca_sDefaultTypeInternal {
  constexpr user_info_ca_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_info_ca_sDefaultTypeInternal() {}
  union {
    user_info_ca_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_info_ca_sDefaultTypeInternal _user_info_ca_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_animal_2eproto[65];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_animal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_animal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_animal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_c, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, activated_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, dispatch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, static_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, promote_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, team_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, enable_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, assets_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, level_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, name_verifie_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, pay_verifie_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, bank_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, bank_cardid_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, bank_user_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, ailpay_id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, alipay_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, webchat_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, idcard_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, promote_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, team_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, sign_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_ca_s, invite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::enabled_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::enabled_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::enabled_ca_s, activated_coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, bank_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, bank_cardid_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, bank_user_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, ailpay_id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, alipay_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_c, webchat_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::setwallet_ca_s, pay_verifie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, team_total_assets_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, team_total_activated_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, team_total_register_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, depth1_total_activated_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, depth1_total_register_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, depth2_total_activated_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, depth2_total_register_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, depth3_total_activated_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::myteam_ca_s, depth3_total_register_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::depth_list_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::depth_list_ca_s_item, nc_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::depth_list_ca_s_item, num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::depth_list_ca_s_item, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::depth_list_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::depth_list_ca_s, sifs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::idcard_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::idcard_ca_c, name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::idcard_ca_c, idcard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::idcard_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::idcard_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::idcard_ca_s, name_verifie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sign_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sign_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sign_ca_s, dispatch_coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_pwd_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_pwd_ca_c, source_pwd_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_pwd_ca_c, target_pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_pwd_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_pwd_ca_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, target_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s_item, contract_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::dispatch_coin_log_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_c, num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_c, rmb_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_c, paycert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_ca_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_c, num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_c, target_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_c, trade_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_s, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_s, curr_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_cs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_cs, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::transfer_ca_cs, curr_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s_item, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s_item, target_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s_item, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::activated_coin_log_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s_item, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s_item, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s_item, getway_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::self_assets_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s_item, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s_item, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s_item, depth_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s_item, target_phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::income_log_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_c, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_c, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_c, change_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_c, trade_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_s, income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::getcontract_ca_s, change_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_c, num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_c, change_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_c, coin_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_c, trade_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_s, income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_s, change_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_s, coin_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::get_coin_ca_s, coin_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s_item, topic_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s_item, info_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s_item, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_list_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_look_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_look_ca_c, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_look_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_look_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_look_ca_s, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::mail_look_ca_s, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sms_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sms_ca_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sms_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sms_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sms_ca_s, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_c, code_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_c, newpwd_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_pwd_ca_s, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, ailpay_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, ailpay_account_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, ail_qr_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, bank_card_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, bank_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::official_info_ca_s, bank_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, code_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, pwd_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, trade_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_c, invite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_ca_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_list_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_list_ca_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_list_ca_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_list_ca_s_item, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_list_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_list_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_rob_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_rob_ca_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_rob_ca_s_item, rob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_rob_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_rob_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_ca_c, contract_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_ca_s, curr_dispatch_coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::rob_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::rob_ca_c, contract_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::rob_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::rob_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::rob_ca_s, curr_dispatch_coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, robtime_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, paytime_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, oktime_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, state_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, sell_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, buy_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s_item, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_ca_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_c, sell_phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, sell_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, bank_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, bank_cardid_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, bank_user_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, ailpay_id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, alipay_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::sell_info_ca_s, webchat_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_order_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_order_ca_c, order_id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_order_ca_c, pay_voucher_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_order_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_order_ca_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::buy_info_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::buy_info_ca_c, order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::buy_info_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::buy_info_ca_s, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::buy_info_ca_s, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::buy_info_ca_s, pay_voucher_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_c, order_id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_c, oper_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_c, trade_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_oper_ca_s, oper_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::upload_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::upload_ca_c, name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::upload_ca_c, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::upload_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::upload_ca_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, activated_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, dispatch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, static_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, promote_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, team_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, promote_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, team_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_info_ca_s, assets_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frmpub::protocc::login_ca_c)},
  { 7, -1, sizeof(::frmpub::protocc::login_ca_s)},
  { 36, -1, sizeof(::frmpub::protocc::enabled_ca_s)},
  { 43, -1, sizeof(::frmpub::protocc::setwallet_ca_c)},
  { 54, -1, sizeof(::frmpub::protocc::setwallet_ca_s)},
  { 61, -1, sizeof(::frmpub::protocc::myteam_ca_s)},
  { 75, -1, sizeof(::frmpub::protocc::depth_list_ca_s_item)},
  { 83, -1, sizeof(::frmpub::protocc::depth_list_ca_s)},
  { 89, -1, sizeof(::frmpub::protocc::idcard_ca_c)},
  { 96, -1, sizeof(::frmpub::protocc::idcard_ca_s)},
  { 103, -1, sizeof(::frmpub::protocc::sign_ca_s)},
  { 110, -1, sizeof(::frmpub::protocc::login_pwd_ca_c)},
  { 117, -1, sizeof(::frmpub::protocc::login_pwd_ca_s)},
  { 123, -1, sizeof(::frmpub::protocc::dispatch_coin_log_ca_s_item)},
  { 134, -1, sizeof(::frmpub::protocc::dispatch_coin_log_ca_s)},
  { 140, -1, sizeof(::frmpub::protocc::recharge_ca_c)},
  { 149, -1, sizeof(::frmpub::protocc::recharge_ca_s)},
  { 155, -1, sizeof(::frmpub::protocc::transfer_ca_c)},
  { 164, -1, sizeof(::frmpub::protocc::transfer_ca_s)},
  { 172, -1, sizeof(::frmpub::protocc::transfer_ca_cs)},
  { 179, -1, sizeof(::frmpub::protocc::activated_coin_log_ca_s_item)},
  { 189, -1, sizeof(::frmpub::protocc::activated_coin_log_ca_s)},
  { 195, -1, sizeof(::frmpub::protocc::self_assets_ca_s_item)},
  { 204, -1, sizeof(::frmpub::protocc::self_assets_ca_s)},
  { 210, -1, sizeof(::frmpub::protocc::income_log_ca_c)},
  { 216, -1, sizeof(::frmpub::protocc::income_log_ca_s_item)},
  { 226, -1, sizeof(::frmpub::protocc::income_log_ca_s)},
  { 232, -1, sizeof(::frmpub::protocc::getcontract_ca_c)},
  { 241, -1, sizeof(::frmpub::protocc::getcontract_ca_s)},
  { 249, -1, sizeof(::frmpub::protocc::get_coin_ca_c)},
  { 258, -1, sizeof(::frmpub::protocc::get_coin_ca_s)},
  { 268, -1, sizeof(::frmpub::protocc::mail_list_ca_s_item)},
  { 278, -1, sizeof(::frmpub::protocc::mail_list_ca_s)},
  { 284, -1, sizeof(::frmpub::protocc::mail_look_ca_c)},
  { 290, -1, sizeof(::frmpub::protocc::mail_look_ca_s)},
  { 298, -1, sizeof(::frmpub::protocc::sms_ca_c)},
  { 304, -1, sizeof(::frmpub::protocc::sms_ca_s)},
  { 311, -1, sizeof(::frmpub::protocc::updata_pwd_ca_c)},
  { 320, -1, sizeof(::frmpub::protocc::updata_pwd_ca_s)},
  { 327, -1, sizeof(::frmpub::protocc::official_info_ca_s)},
  { 338, -1, sizeof(::frmpub::protocc::register_ca_c)},
  { 349, -1, sizeof(::frmpub::protocc::register_ca_s)},
  { 355, -1, sizeof(::frmpub::protocc::booking_list_ca_s_item)},
  { 363, -1, sizeof(::frmpub::protocc::booking_list_ca_s)},
  { 369, -1, sizeof(::frmpub::protocc::contract_rob_ca_s_item)},
  { 376, -1, sizeof(::frmpub::protocc::contract_rob_ca_s)},
  { 382, -1, sizeof(::frmpub::protocc::booking_ca_c)},
  { 388, -1, sizeof(::frmpub::protocc::booking_ca_s)},
  { 395, -1, sizeof(::frmpub::protocc::rob_ca_c)},
  { 401, -1, sizeof(::frmpub::protocc::rob_ca_s)},
  { 408, -1, sizeof(::frmpub::protocc::order_list_ca_c)},
  { 414, -1, sizeof(::frmpub::protocc::order_list_ca_s_item)},
  { 428, -1, sizeof(::frmpub::protocc::order_list_ca_s)},
  { 435, -1, sizeof(::frmpub::protocc::sell_info_ca_c)},
  { 441, -1, sizeof(::frmpub::protocc::sell_info_ca_s)},
  { 454, -1, sizeof(::frmpub::protocc::pay_order_ca_c)},
  { 461, -1, sizeof(::frmpub::protocc::pay_order_ca_s)},
  { 467, -1, sizeof(::frmpub::protocc::buy_info_ca_c)},
  { 473, -1, sizeof(::frmpub::protocc::buy_info_ca_s)},
  { 481, -1, sizeof(::frmpub::protocc::order_oper_ca_c)},
  { 489, -1, sizeof(::frmpub::protocc::order_oper_ca_s)},
  { 496, -1, sizeof(::frmpub::protocc::upload_ca_c)},
  { 503, -1, sizeof(::frmpub::protocc::upload_ca_s)},
  { 509, -1, sizeof(::frmpub::protocc::user_info_ca_c)},
  { 515, -1, sizeof(::frmpub::protocc::user_info_ca_s)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_login_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_login_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_enabled_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_setwallet_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_setwallet_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_myteam_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_depth_list_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_depth_list_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_idcard_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_idcard_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_sign_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_login_pwd_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_login_pwd_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_dispatch_coin_log_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_dispatch_coin_log_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_transfer_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_transfer_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_transfer_ca_cs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_activated_coin_log_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_activated_coin_log_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_self_assets_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_self_assets_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_income_log_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_income_log_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_income_log_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_getcontract_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_getcontract_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_get_coin_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_get_coin_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_mail_list_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_mail_list_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_mail_look_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_mail_look_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_sms_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_sms_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_updata_pwd_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_updata_pwd_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_official_info_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_register_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_register_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_list_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_list_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_rob_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_rob_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_rob_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_rob_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_list_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_list_ca_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_list_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_sell_info_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_sell_info_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_order_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_order_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_buy_info_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_buy_info_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_oper_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_oper_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_upload_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_upload_ca_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_info_ca_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_info_ca_s_default_instance_),
};

const char descriptor_table_protodef_animal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014animal.proto\022\016frmpub.protocc\"(\n\nlogin_"
  "ca_c\022\r\n\005phone\030\001 \001(\003\022\013\n\003pwd\030\002 \001(\t\"\365\003\n\nlog"
  "in_ca_s\022\016\n\006result\030\001 \001(\005\022\026\n\016activated_coi"
  "n\030\002 \001(\005\022\025\n\rdispatch_coin\030\003 \001(\005\022\025\n\rstatic"
  "_income\030\004 \001(\002\022\026\n\016promote_income\030\005 \001(\002\022\023\n"
  "\013team_income\030\006 \001(\002\022\016\n\006enable\030\007 \001(\010\022\016\n\006as"
  "sets\030\010 \001(\002\022\r\n\005level\030\t \001(\005\022\024\n\014name_verifi"
  "e\030\n \001(\005\022\023\n\013pay_verifie\030\013 \001(\005\022\016\n\006nichen\030\014"
  " \001(\t\022\021\n\tbank_name\030\r \001(\t\022\023\n\013bank_cardid\030\016"
  " \001(\t\022\026\n\016bank_user_name\030\017 \001(\t\022\021\n\tailpay_i"
  "d\030\020 \001(\t\022\023\n\013alipay_name\030\021 \001(\t\022\024\n\014webchat_"
  "name\030\022 \001(\t\022\014\n\004name\030\023 \001(\t\022\016\n\006idcard\030\024 \001(\t"
  "\022\036\n\026promote_current_income\030\025 \001(\002\022\033\n\023team"
  "_current_income\030\026 \001(\002\022\021\n\tsign_time\030\027 \001(\005"
  "\022\016\n\006invite\030\030 \001(\t\"6\n\014enabled_ca_s\022\016\n\006resu"
  "lt\030\001 \001(\005\022\026\n\016activated_coin\030\002 \001(\005\"\216\001\n\016set"
  "wallet_ca_c\022\021\n\tbank_name\030\001 \001(\t\022\023\n\013bank_c"
  "ardid\030\002 \001(\t\022\026\n\016bank_user_name\030\003 \001(\t\022\021\n\ta"
  "ilpay_id\030\004 \001(\t\022\023\n\013alipay_name\030\005 \001(\t\022\024\n\014w"
  "ebchat_name\030\006 \001(\t\"5\n\016setwallet_ca_s\022\016\n\006r"
  "esult\030\001 \001(\005\022\023\n\013pay_verifie\030\002 \001(\005\"\300\002\n\013myt"
  "eam_ca_s\022\031\n\021team_total_assets\030\001 \001(\002\022 \n\030t"
  "eam_total_activated_num\030\002 \001(\005\022\037\n\027team_to"
  "tal_register_num\030\003 \001(\005\022\"\n\032depth1_total_a"
  "ctivated_num\030\004 \001(\005\022!\n\031depth1_total_regis"
  "ter_num\030\005 \001(\005\022\"\n\032depth2_total_activated_"
  "num\030\006 \001(\005\022!\n\031depth2_total_register_num\030\007"
  " \001(\005\022\"\n\032depth3_total_activated_num\030\010 \001(\005"
  "\022!\n\031depth3_total_register_num\030\t \001(\005\"v\n\017d"
  "epth_list_ca_s\0222\n\004sifs\030\001 \003(\0132$.frmpub.pr"
  "otocc.depth_list_ca_s.item\032/\n\004item\022\n\n\002nc"
  "\030\001 \001(\t\022\013\n\003num\030\002 \001(\005\022\016\n\006assets\030\003 \001(\002\"+\n\013i"
  "dcard_ca_c\022\014\n\004name\030\001 \001(\t\022\016\n\006idcard\030\002 \001(\t"
  "\"3\n\013idcard_ca_s\022\016\n\006result\030\001 \001(\005\022\024\n\014name_"
  "verifie\030\002 \001(\005\"2\n\tsign_ca_s\022\016\n\006result\030\001 \001"
  "(\005\022\025\n\rdispatch_coin\030\002 \001(\005\"8\n\016login_pwd_c"
  "a_c\022\022\n\nsource_pwd\030\001 \001(\t\022\022\n\ntarget_pwd\030\002 "
  "\001(\t\" \n\016login_pwd_ca_s\022\016\n\006result\030\001 \001(\005\"\274\001"
  "\n\026dispatch_coin_log_ca_s\0228\n\003its\030\001 \003(\0132+."
  "frmpub.protocc.dispatch_coin_log_ca_s.it"
  "em\032h\n\004item\022\n\n\002id\030\001 \001(\005\022\014\n\004time\030\002 \001(\003\022\014\n\004"
  "type\030\003 \001(\005\022\024\n\014target_phone\030\004 \001(\003\022\013\n\003num\030"
  "\005 \001(\005\022\025\n\rcontract_type\030\006 \001(\005\"H\n\rrecharge"
  "_ca_c\022\014\n\004type\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\013\n\003rmb\030"
  "\003 \001(\002\022\017\n\007paycert\030\004 \001(\t\"\037\n\rrecharge_ca_s\022"
  "\016\n\006result\030\001 \001(\005\"T\n\rtransfer_ca_c\022\014\n\004type"
  "\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\024\n\014target_phone\030\003 \001("
  "\003\022\022\n\ntrade_code\030\004 \001(\005\"\?\n\rtransfer_ca_s\022\016"
  "\n\006result\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\020\n\010curr_num"
  "\030\003 \001(\005\"0\n\016transfer_ca_cs\022\014\n\004type\030\001 \001(\005\022\020"
  "\n\010curr_num\030\002 \001(\005\"\247\001\n\027activated_coin_log_"
  "ca_s\0229\n\003its\030\001 \003(\0132,.frmpub.protocc.activ"
  "ated_coin_log_ca_s.item\032Q\n\004item\022\n\n\002id\030\001 "
  "\001(\005\022\014\n\004time\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\024\n\014targe"
  "t_phone\030\004 \001(\003\022\013\n\003num\030\005 \001(\005\"\211\001\n\020self_asse"
  "ts_ca_s\0222\n\003its\030\001 \003(\0132%.frmpub.protocc.se"
  "lf_assets_ca_s.item\032A\n\004item\022\014\n\004type\030\001 \001("
  "\005\022\r\n\005price\030\002 \001(\002\022\014\n\004time\030\003 \001(\005\022\016\n\006getway"
  "\030\004 \001(\005\"\037\n\017income_log_ca_c\022\014\n\004type\030\001 \001(\005\""
  "\234\001\n\017income_log_ca_s\0221\n\003its\030\001 \003(\0132$.frmpu"
  "b.protocc.income_log_ca_s.item\032V\n\004item\022\014"
  "\n\004type\030\001 \001(\005\022\r\n\005price\030\002 \001(\002\022\014\n\004time\030\003 \001("
  "\005\022\r\n\005depth\030\004 \001(\005\022\024\n\014target_phone\030\005 \001(\003\"a"
  "\n\020getcontract_ca_c\022\r\n\005price\030\001 \001(\002\022\025\n\rcon"
  "tract_type\030\002 \001(\005\022\023\n\013change_type\030\003 \001(\005\022\022\n"
  "\ntrade_code\030\004 \001(\005\"G\n\020getcontract_ca_s\022\016\n"
  "\006result\030\001 \001(\005\022\016\n\006income\030\002 \001(\002\022\023\n\013change_"
  "type\030\003 \001(\005\"X\n\rget_coin_ca_c\022\013\n\003num\030\001 \001(\005"
  "\022\023\n\013change_type\030\002 \001(\005\022\021\n\tcoin_type\030\003 \001(\005"
  "\022\022\n\ntrade_code\030\004 \001(\005\"k\n\rget_coin_ca_s\022\016\n"
  "\006result\030\001 \001(\005\022\016\n\006income\030\002 \001(\002\022\023\n\013change_"
  "type\030\003 \001(\005\022\021\n\tcoin_type\030\004 \001(\005\022\022\n\ncoin_va"
  "lue\030\005 \001(\005\"\220\001\n\016mail_list_ca_s\0220\n\003its\030\001 \003("
  "\0132#.frmpub.protocc.mail_list_ca_s.item\032L"
  "\n\004item\022\n\n\002id\030\001 \001(\005\022\r\n\005topic\030\002 \001(\t\022\014\n\004inf"
  "o\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\"\034\n\016"
  "mail_look_ca_c\022\n\n\002id\030\001 \001(\005\";\n\016mail_look_"
  "ca_s\022\016\n\006result\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005stat"
  "e\030\003 \001(\005\"\031\n\010sms_ca_c\022\r\n\005phone\030\001 \001(\003\"(\n\010sm"
  "s_ca_s\022\016\n\006result\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\"L\n\017"
  "updata_pwd_ca_c\022\014\n\004code\030\001 \001(\005\022\016\n\006newpwd\030"
  "\002 \001(\t\022\014\n\004type\030\003 \001(\005\022\r\n\005phone\030\004 \001(\003\"/\n\017up"
  "data_pwd_ca_s\022\016\n\006result\030\001 \001(\005\022\014\n\004type\030\002 "
  "\001(\005\"\215\001\n\022official_info_ca_s\022\023\n\013ailpay_nam"
  "e\030\001 \001(\t\022\026\n\016ailpay_account\030\002 \001(\t\022\016\n\006ail_q"
  "r\030\003 \001(\t\022\021\n\tbank_card\030\004 \001(\t\022\021\n\tbank_name\030"
  "\005 \001(\t\022\024\n\014bank_account\030\006 \001(\t\"h\n\rregister_"
  "ca_c\022\r\n\005phone\030\001 \001(\003\022\014\n\004code\030\002 \001(\005\022\016\n\006nic"
  "hen\030\003 \001(\t\022\013\n\003pwd\030\004 \001(\t\022\r\n\005trade\030\005 \001(\005\022\016\n"
  "\006invite\030\006 \001(\t\"\037\n\rregister_ca_s\022\016\n\006result"
  "\030\001 \001(\005\"\201\001\n\021booking_list_ca_s\0223\n\003its\030\001 \003("
  "\0132&.frmpub.protocc.booking_list_ca_s.ite"
  "m\0327\n\004item\022\n\n\002id\030\001 \001(\005\022\025\n\rcontract_type\030\002"
  " \001(\005\022\014\n\004time\030\003 \001(\005\"t\n\021contract_rob_ca_s\022"
  "3\n\003its\030\001 \003(\0132&.frmpub.protocc.contract_r"
  "ob_ca_s.item\032*\n\004item\022\025\n\rcontract_type\030\001 "
  "\001(\005\022\013\n\003rob\030\002 \001(\005\"%\n\014booking_ca_c\022\025\n\rcont"
  "ract_type\030\001 \001(\005\":\n\014booking_ca_s\022\016\n\006resul"
  "t\030\001 \001(\005\022\032\n\022curr_dispatch_coin\030\002 \001(\005\"!\n\010r"
  "ob_ca_c\022\025\n\rcontract_type\030\001 \001(\005\"6\n\010rob_ca"
  "_s\022\016\n\006result\030\001 \001(\005\022\032\n\022curr_dispatch_coin"
  "\030\002 \001(\005\"\037\n\017order_list_ca_c\022\014\n\004type\030\001 \001(\005\""
  "\365\001\n\017order_list_ca_s\022\014\n\004type\030\001 \001(\005\0221\n\003its"
  "\030\002 \003(\0132$.frmpub.protocc.order_list_ca_s."
  "item\032\240\001\n\004item\022\n\n\002id\030\001 \001(\003\022\025\n\rcontract_ty"
  "pe\030\002 \001(\005\022\017\n\007robtime\030\003 \001(\005\022\017\n\007paytime\030\004 \001"
  "(\005\022\016\n\006oktime\030\005 \001(\005\022\r\n\005state\030\006 \001(\005\022\022\n\nsel"
  "l_phone\030\007 \001(\003\022\021\n\tbuy_phone\030\010 \001(\003\022\r\n\005pric"
  "e\030\t \001(\002\"$\n\016sell_info_ca_c\022\022\n\nsell_phone\030"
  "\001 \001(\003\"\262\001\n\016sell_info_ca_s\022\016\n\006nichen\030\001 \001(\t"
  "\022\022\n\nsell_phone\030\002 \001(\003\022\021\n\tbank_name\030\003 \001(\t\022"
  "\023\n\013bank_cardid\030\004 \001(\t\022\026\n\016bank_user_name\030\005"
  " \001(\t\022\021\n\tailpay_id\030\006 \001(\t\022\023\n\013alipay_name\030\007"
  " \001(\t\022\024\n\014webchat_name\030\010 \001(\t\"7\n\016pay_order_"
  "ca_c\022\020\n\010order_id\030\001 \001(\003\022\023\n\013pay_voucher\030\002 "
  "\001(\t\" \n\016pay_order_ca_s\022\016\n\006result\030\001 \001(\005\"!\n"
  "\rbuy_info_ca_c\022\020\n\010order_id\030\001 \001(\003\"C\n\rbuy_"
  "info_ca_s\022\016\n\006nichen\030\001 \001(\t\022\r\n\005phone\030\002 \001(\003"
  "\022\023\n\013pay_voucher\030\003 \001(\t\"J\n\017order_oper_ca_c"
  "\022\020\n\010order_id\030\001 \001(\003\022\021\n\toper_type\030\002 \001(\005\022\022\n"
  "\ntrade_code\030\003 \001(\005\"4\n\017order_oper_ca_s\022\016\n\006"
  "result\030\001 \001(\005\022\021\n\toper_type\030\002 \001(\005\")\n\013uploa"
  "d_ca_c\022\014\n\004name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"\035\n\013up"
  "load_ca_s\022\016\n\006result\030\001 \001(\005\"\037\n\016user_info_c"
  "a_c\022\r\n\005phone\030\001 \001(\003\"\337\001\n\016user_info_ca_s\022\r\n"
  "\005phone\030\001 \001(\003\022\026\n\016activated_coin\030\002 \001(\005\022\025\n\r"
  "dispatch_coin\030\003 \001(\005\022\025\n\rstatic_income\030\004 \001"
  "(\002\022\026\n\016promote_income\030\005 \001(\002\022\023\n\013team_incom"
  "e\030\006 \001(\002\022\036\n\026promote_current_income\030\007 \001(\002\022"
  "\033\n\023team_current_income\030\010 \001(\002\022\016\n\006assets\030\t"
  " \001(\002*\345\013\n\013AnimalMsgId\022\025\n\021ANIMALMSGID_BEGI"
  "N\020\000\022\030\n\023CLIENT_ANIMAL_BEGIN\020\334\013\022\017\n\nLOGIN_C"
  "A_C\020\335\013\022\017\n\nLOGIN_CA_S\020\336\013\022\021\n\014ENABLED_CA_C\020"
  "\337\013\022\021\n\014ENABLED_CA_S\020\340\013\022\023\n\016SETWALLET_CA_C\020"
  "\341\013\022\023\n\016SETWALLET_CA_S\020\342\013\022\020\n\013MYTEAM_CA_C\020\343"
  "\013\022\020\n\013MYTEAM_CA_S\020\344\013\022\024\n\017DEPTH_LIST_CA_C\020\345"
  "\013\022\024\n\017DEPTH_LIST_CA_S\020\346\013\022\020\n\013IDCARD_CA_C\020\347"
  "\013\022\020\n\013IDCARD_CA_S\020\350\013\022\016\n\tSIGN_CA_C\020\351\013\022\016\n\tS"
  "IGN_CA_S\020\352\013\022\023\n\016LOGIN_PWD_CA_C\020\353\013\022\023\n\016LOGI"
  "N_PWD_CA_S\020\354\013\022\033\n\026DISPATCH_COIN_LOG_CA_C\020"
  "\355\013\022\033\n\026DISPATCH_COIN_LOG_CA_S\020\356\013\022\022\n\rRECHA"
  "RGE_CA_C\020\357\013\022\022\n\rRECHARGE_CA_S\020\360\013\022\022\n\rTRANS"
  "FER_CA_C\020\361\013\022\022\n\rTRANSFER_CA_S\020\362\013\022\023\n\016TRANS"
  "FER_CA_CS\020\363\013\022\034\n\027ACTIVATED_COIN_LOG_CA_C\020"
  "\365\013\022\034\n\027ACTIVATED_COIN_LOG_CA_S\020\366\013\022\025\n\020SELF"
  "_ASSETS_CA_C\020\367\013\022\025\n\020SELF_ASSETS_CA_S\020\370\013\022\024"
  "\n\017INCOME_LOG_CA_C\020\371\013\022\024\n\017INCOME_LOG_CA_S\020"
  "\372\013\022\025\n\020GETCONTRACT_CA_C\020\373\013\022\025\n\020GETCONTRACT"
  "_CA_S\020\374\013\022\022\n\rGET_COIN_CA_C\020\375\013\022\022\n\rGET_COIN"
  "_CA_S\020\376\013\022\023\n\016MAIL_LIST_CA_C\020\377\013\022\023\n\016MAIL_LI"
  "ST_CA_S\020\200\014\022\023\n\016MAIL_LOOK_CA_C\020\201\014\022\023\n\016MAIL_"
  "LOOK_CA_S\020\202\014\022\r\n\010SMS_CA_C\020\203\014\022\r\n\010SMS_CA_S\020"
  "\204\014\022\024\n\017UPDATA_PWD_CA_C\020\205\014\022\024\n\017UPDATA_PWD_C"
  "A_S\020\206\014\022\027\n\022OFFICIAL_INFO_CA_C\020\207\014\022\027\n\022OFFIC"
  "IAL_INFO_CA_S\020\210\014\022\022\n\rREGISTER_CA_C\020\211\014\022\022\n\r"
  "REGISTER_CA_S\020\212\014\022\026\n\021BOOKING_LIST_CA_C\020\213\014"
  "\022\026\n\021BOOKING_LIST_CA_S\020\214\014\022\026\n\021CONTRACT_ROB"
  "_CA_C\020\215\014\022\026\n\021CONTRACT_ROB_CA_S\020\216\014\022\021\n\014BOOK"
  "ING_CA_C\020\217\014\022\021\n\014BOOKING_CA_S\020\220\014\022\r\n\010ROB_CA"
  "_C\020\221\014\022\r\n\010ROB_CA_S\020\222\014\022\024\n\017ORDER_LIST_CA_C\020"
  "\223\014\022\024\n\017ORDER_LIST_CA_S\020\224\014\022\023\n\016SELL_INFO_CA"
  "_C\020\225\014\022\023\n\016SELL_INFO_CA_S\020\226\014\022\023\n\016PAY_ORDER_"
  "CA_C\020\227\014\022\023\n\016PAY_ORDER_CA_S\020\230\014\022\022\n\rBUY_INFO"
  "_CA_C\020\231\014\022\022\n\rBUY_INFO_CA_S\020\232\014\022\024\n\017ORDER_OP"
  "ER_CA_C\020\233\014\022\024\n\017ORDER_OPER_CA_S\020\234\014\022\020\n\013UPLO"
  "AD_CA_C\020\235\014\022\020\n\013UPLOAD_CA_S\020\236\014\022\023\n\016USER_INF"
  "O_CA_C\020\237\014\022\023\n\016USER_INFO_CA_S\020\240\014\022\026\n\021CLIENT"
  "_ANIMAL_END\020\320\017\022\024\n\017ANIMALMSGID_END\020\210\'b\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_animal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_animal_2eproto = {
  false, false, 6724, descriptor_table_protodef_animal_2eproto, "animal.proto", 
  &descriptor_table_animal_2eproto_once, nullptr, 0, 65,
  schemas, file_default_instances, TableStruct_animal_2eproto::offsets,
  file_level_metadata_animal_2eproto, file_level_enum_descriptors_animal_2eproto, file_level_service_descriptors_animal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_animal_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_animal_2eproto);
  return descriptor_table_animal_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_animal_2eproto(&descriptor_table_animal_2eproto);
namespace frmpub {
namespace protocc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimalMsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_animal_2eproto);
  return file_level_enum_descriptors_animal_2eproto[0];
}
bool AnimalMsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1517:
    case 1518:
    case 1519:
    case 1520:
    case 1521:
    case 1522:
    case 1523:
    case 1525:
    case 1526:
    case 1527:
    case 1528:
    case 1529:
    case 1530:
    case 1531:
    case 1532:
    case 1533:
    case 1534:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1540:
    case 1541:
    case 1542:
    case 1543:
    case 1544:
    case 1545:
    case 1546:
    case 1547:
    case 1548:
    case 1549:
    case 1550:
    case 1551:
    case 1552:
    case 1553:
    case 1554:
    case 1555:
    case 1556:
    case 1557:
    case 1558:
    case 1559:
    case 1560:
    case 1561:
    case 1562:
    case 1563:
    case 1564:
    case 1565:
    case 1566:
    case 1567:
    case 1568:
    case 2000:
    case 5000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class login_ca_c::_Internal {
 public:
};

login_ca_c::login_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.login_ca_c)
}
login_ca_c::login_ca_c(const login_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArena());
  }
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.login_ca_c)
}

void login_ca_c::SharedCtor() {
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_ = PROTOBUF_LONGLONG(0);
}

login_ca_c::~login_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.login_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_ca_c::ArenaDtor(void* object) {
  login_ca_c* _this = reinterpret_cast< login_ca_c* >(object);
  (void)_this;
}
void login_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.login_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pwd_.ClearToEmpty();
  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_c.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.login_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_c.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.login_ca_c)
  return target;
}

size_t login_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.login_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.login_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const login_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.login_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.login_ca_c)
    MergeFrom(*source);
  }
}

void login_ca_c::MergeFrom(const login_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.login_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void login_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.login_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_ca_c::CopyFrom(const login_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.login_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_ca_c::IsInitialized() const {
  return true;
}

void login_ca_c::InternalSwap(login_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class login_ca_s::_Internal {
 public:
};

login_ca_s::login_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.login_ca_s)
}
login_ca_s::login_ca_s(const login_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_name().empty()) {
    bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_name(), 
      GetArena());
  }
  bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_cardid().empty()) {
    bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_cardid(), 
      GetArena());
  }
  bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_user_name().empty()) {
    bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_user_name(), 
      GetArena());
  }
  ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ailpay_id().empty()) {
    ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ailpay_id(), 
      GetArena());
  }
  alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alipay_name().empty()) {
    alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alipay_name(), 
      GetArena());
  }
  webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_webchat_name().empty()) {
    webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webchat_name(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idcard().empty()) {
    idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idcard(), 
      GetArena());
  }
  invite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite().empty()) {
    invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&sign_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(sign_time_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.login_ca_s)
}

void login_ca_s::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sign_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(sign_time_));
}

login_ca_s::~login_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.login_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_cardid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ailpay_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alipay_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webchat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_ca_s::ArenaDtor(void* object) {
  login_ca_s* _this = reinterpret_cast< login_ca_s* >(object);
  (void)_this;
}
void login_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.login_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  bank_name_.ClearToEmpty();
  bank_cardid_.ClearToEmpty();
  bank_user_name_.ClearToEmpty();
  ailpay_id_.ClearToEmpty();
  alipay_name_.ClearToEmpty();
  webchat_name_.ClearToEmpty();
  name_.ClearToEmpty();
  idcard_.ClearToEmpty();
  invite_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sign_time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sign_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activated_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dispatch_coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float static_income = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          static_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float promote_income = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          promote_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float team_income = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          team_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool enable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float assets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          assets_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name_verifie = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          name_verifie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pay_verifie = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pay_verifie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_bank_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.bank_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_cardid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_bank_cardid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.bank_cardid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_user_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bank_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.bank_user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ailpay_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_ailpay_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.ailpay_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alipay_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_alipay_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.alipay_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string webchat_name = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_webchat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.webchat_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idcard = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_idcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.idcard"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float promote_current_income = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          promote_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float team_current_income = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          team_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 sign_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          sign_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_invite();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_ca_s.invite"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.login_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_activated_coin(), target);
  }

  // int32 dispatch_coin = 3;
  if (this->dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dispatch_coin(), target);
  }

  // float static_income = 4;
  if (!(this->static_income() <= 0 && this->static_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_static_income(), target);
  }

  // float promote_income = 5;
  if (!(this->promote_income() <= 0 && this->promote_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_promote_income(), target);
  }

  // float team_income = 6;
  if (!(this->team_income() <= 0 && this->team_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_team_income(), target);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable(), target);
  }

  // float assets = 8;
  if (!(this->assets() <= 0 && this->assets() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_assets(), target);
  }

  // int32 level = 9;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_level(), target);
  }

  // int32 name_verifie = 10;
  if (this->name_verifie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_name_verifie(), target);
  }

  // int32 pay_verifie = 11;
  if (this->pay_verifie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_pay_verifie(), target);
  }

  // string nichen = 12;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.nichen");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_nichen(), target);
  }

  // string bank_name = 13;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_name().data(), static_cast<int>(this->_internal_bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.bank_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_bank_name(), target);
  }

  // string bank_cardid = 14;
  if (this->bank_cardid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_cardid().data(), static_cast<int>(this->_internal_bank_cardid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.bank_cardid");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_bank_cardid(), target);
  }

  // string bank_user_name = 15;
  if (this->bank_user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_user_name().data(), static_cast<int>(this->_internal_bank_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.bank_user_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_bank_user_name(), target);
  }

  // string ailpay_id = 16;
  if (this->ailpay_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ailpay_id().data(), static_cast<int>(this->_internal_ailpay_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.ailpay_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_ailpay_id(), target);
  }

  // string alipay_name = 17;
  if (this->alipay_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alipay_name().data(), static_cast<int>(this->_internal_alipay_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.alipay_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_alipay_name(), target);
  }

  // string webchat_name = 18;
  if (this->webchat_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webchat_name().data(), static_cast<int>(this->_internal_webchat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.webchat_name");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_webchat_name(), target);
  }

  // string name = 19;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.name");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_name(), target);
  }

  // string idcard = 20;
  if (this->idcard().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idcard().data(), static_cast<int>(this->_internal_idcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.idcard");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_idcard(), target);
  }

  // float promote_current_income = 21;
  if (!(this->promote_current_income() <= 0 && this->promote_current_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_promote_current_income(), target);
  }

  // float team_current_income = 22;
  if (!(this->team_current_income() <= 0 && this->team_current_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_team_current_income(), target);
  }

  // int32 sign_time = 23;
  if (this->sign_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_sign_time(), target);
  }

  // string invite = 24;
  if (this->invite().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite().data(), static_cast<int>(this->_internal_invite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_ca_s.invite");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_invite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.login_ca_s)
  return target;
}

size_t login_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.login_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 12;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string bank_name = 13;
  if (this->bank_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_name());
  }

  // string bank_cardid = 14;
  if (this->bank_cardid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_cardid());
  }

  // string bank_user_name = 15;
  if (this->bank_user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_user_name());
  }

  // string ailpay_id = 16;
  if (this->ailpay_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ailpay_id());
  }

  // string alipay_name = 17;
  if (this->alipay_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alipay_name());
  }

  // string webchat_name = 18;
  if (this->webchat_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webchat_name());
  }

  // string name = 19;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string idcard = 20;
  if (this->idcard().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idcard());
  }

  // string invite = 24;
  if (this->invite().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_coin());
  }

  // int32 dispatch_coin = 3;
  if (this->dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dispatch_coin());
  }

  // float static_income = 4;
  if (!(this->static_income() <= 0 && this->static_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float promote_income = 5;
  if (!(this->promote_income() <= 0 && this->promote_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float team_income = 6;
  if (!(this->team_income() <= 0 && this->team_income() >= 0)) {
    total_size += 1 + 4;
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // float assets = 8;
  if (!(this->assets() <= 0 && this->assets() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 level = 9;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 name_verifie = 10;
  if (this->name_verifie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name_verifie());
  }

  // int32 pay_verifie = 11;
  if (this->pay_verifie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pay_verifie());
  }

  // float promote_current_income = 21;
  if (!(this->promote_current_income() <= 0 && this->promote_current_income() >= 0)) {
    total_size += 2 + 4;
  }

  // float team_current_income = 22;
  if (!(this->team_current_income() <= 0 && this->team_current_income() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 sign_time = 23;
  if (this->sign_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sign_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.login_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const login_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.login_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.login_ca_s)
    MergeFrom(*source);
  }
}

void login_ca_s::MergeFrom(const login_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.login_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.bank_name().size() > 0) {
    _internal_set_bank_name(from._internal_bank_name());
  }
  if (from.bank_cardid().size() > 0) {
    _internal_set_bank_cardid(from._internal_bank_cardid());
  }
  if (from.bank_user_name().size() > 0) {
    _internal_set_bank_user_name(from._internal_bank_user_name());
  }
  if (from.ailpay_id().size() > 0) {
    _internal_set_ailpay_id(from._internal_ailpay_id());
  }
  if (from.alipay_name().size() > 0) {
    _internal_set_alipay_name(from._internal_alipay_name());
  }
  if (from.webchat_name().size() > 0) {
    _internal_set_webchat_name(from._internal_webchat_name());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.idcard().size() > 0) {
    _internal_set_idcard(from._internal_idcard());
  }
  if (from.invite().size() > 0) {
    _internal_set_invite(from._internal_invite());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.activated_coin() != 0) {
    _internal_set_activated_coin(from._internal_activated_coin());
  }
  if (from.dispatch_coin() != 0) {
    _internal_set_dispatch_coin(from._internal_dispatch_coin());
  }
  if (!(from.static_income() <= 0 && from.static_income() >= 0)) {
    _internal_set_static_income(from._internal_static_income());
  }
  if (!(from.promote_income() <= 0 && from.promote_income() >= 0)) {
    _internal_set_promote_income(from._internal_promote_income());
  }
  if (!(from.team_income() <= 0 && from.team_income() >= 0)) {
    _internal_set_team_income(from._internal_team_income());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (!(from.assets() <= 0 && from.assets() >= 0)) {
    _internal_set_assets(from._internal_assets());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.name_verifie() != 0) {
    _internal_set_name_verifie(from._internal_name_verifie());
  }
  if (from.pay_verifie() != 0) {
    _internal_set_pay_verifie(from._internal_pay_verifie());
  }
  if (!(from.promote_current_income() <= 0 && from.promote_current_income() >= 0)) {
    _internal_set_promote_current_income(from._internal_promote_current_income());
  }
  if (!(from.team_current_income() <= 0 && from.team_current_income() >= 0)) {
    _internal_set_team_current_income(from._internal_team_current_income());
  }
  if (from.sign_time() != 0) {
    _internal_set_sign_time(from._internal_sign_time());
  }
}

void login_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.login_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_ca_s::CopyFrom(const login_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.login_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_ca_s::IsInitialized() const {
  return true;
}

void login_ca_s::InternalSwap(login_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_cardid_.Swap(&other->bank_cardid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_user_name_.Swap(&other->bank_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ailpay_id_.Swap(&other->ailpay_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alipay_name_.Swap(&other->alipay_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webchat_name_.Swap(&other->webchat_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idcard_.Swap(&other->idcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invite_.Swap(&other->invite_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(login_ca_s, sign_time_)
      + sizeof(login_ca_s::sign_time_)
      - PROTOBUF_FIELD_OFFSET(login_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata login_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class enabled_ca_s::_Internal {
 public:
};

enabled_ca_s::enabled_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.enabled_ca_s)
}
enabled_ca_s::enabled_ca_s(const enabled_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&activated_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(activated_coin_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.enabled_ca_s)
}

void enabled_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&activated_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(activated_coin_));
}

enabled_ca_s::~enabled_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.enabled_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void enabled_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void enabled_ca_s::ArenaDtor(void* object) {
  enabled_ca_s* _this = reinterpret_cast< enabled_ca_s* >(object);
  (void)_this;
}
void enabled_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void enabled_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void enabled_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.enabled_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activated_coin_) -
      reinterpret_cast<char*>(&result_)) + sizeof(activated_coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* enabled_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activated_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* enabled_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.enabled_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_activated_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.enabled_ca_s)
  return target;
}

size_t enabled_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.enabled_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enabled_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.enabled_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const enabled_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<enabled_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.enabled_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.enabled_ca_s)
    MergeFrom(*source);
  }
}

void enabled_ca_s::MergeFrom(const enabled_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.enabled_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.activated_coin() != 0) {
    _internal_set_activated_coin(from._internal_activated_coin());
  }
}

void enabled_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.enabled_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enabled_ca_s::CopyFrom(const enabled_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.enabled_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enabled_ca_s::IsInitialized() const {
  return true;
}

void enabled_ca_s::InternalSwap(enabled_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(enabled_ca_s, activated_coin_)
      + sizeof(enabled_ca_s::activated_coin_)
      - PROTOBUF_FIELD_OFFSET(enabled_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata enabled_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class setwallet_ca_c::_Internal {
 public:
};

setwallet_ca_c::setwallet_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.setwallet_ca_c)
}
setwallet_ca_c::setwallet_ca_c(const setwallet_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_name().empty()) {
    bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_name(), 
      GetArena());
  }
  bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_cardid().empty()) {
    bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_cardid(), 
      GetArena());
  }
  bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_user_name().empty()) {
    bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_user_name(), 
      GetArena());
  }
  ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ailpay_id().empty()) {
    ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ailpay_id(), 
      GetArena());
  }
  alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alipay_name().empty()) {
    alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alipay_name(), 
      GetArena());
  }
  webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_webchat_name().empty()) {
    webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webchat_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.setwallet_ca_c)
}

void setwallet_ca_c::SharedCtor() {
bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

setwallet_ca_c::~setwallet_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.setwallet_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void setwallet_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_cardid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ailpay_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alipay_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webchat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void setwallet_ca_c::ArenaDtor(void* object) {
  setwallet_ca_c* _this = reinterpret_cast< setwallet_ca_c* >(object);
  (void)_this;
}
void setwallet_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setwallet_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setwallet_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.setwallet_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bank_name_.ClearToEmpty();
  bank_cardid_.ClearToEmpty();
  bank_user_name_.ClearToEmpty();
  ailpay_id_.ClearToEmpty();
  alipay_name_.ClearToEmpty();
  webchat_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setwallet_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bank_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bank_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.setwallet_ca_c.bank_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_cardid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bank_cardid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.setwallet_ca_c.bank_cardid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bank_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.setwallet_ca_c.bank_user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ailpay_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ailpay_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.setwallet_ca_c.ailpay_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alipay_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_alipay_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.setwallet_ca_c.alipay_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string webchat_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_webchat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.setwallet_ca_c.webchat_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setwallet_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.setwallet_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bank_name = 1;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_name().data(), static_cast<int>(this->_internal_bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.setwallet_ca_c.bank_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bank_name(), target);
  }

  // string bank_cardid = 2;
  if (this->bank_cardid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_cardid().data(), static_cast<int>(this->_internal_bank_cardid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.setwallet_ca_c.bank_cardid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bank_cardid(), target);
  }

  // string bank_user_name = 3;
  if (this->bank_user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_user_name().data(), static_cast<int>(this->_internal_bank_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.setwallet_ca_c.bank_user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bank_user_name(), target);
  }

  // string ailpay_id = 4;
  if (this->ailpay_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ailpay_id().data(), static_cast<int>(this->_internal_ailpay_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.setwallet_ca_c.ailpay_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ailpay_id(), target);
  }

  // string alipay_name = 5;
  if (this->alipay_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alipay_name().data(), static_cast<int>(this->_internal_alipay_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.setwallet_ca_c.alipay_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_alipay_name(), target);
  }

  // string webchat_name = 6;
  if (this->webchat_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webchat_name().data(), static_cast<int>(this->_internal_webchat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.setwallet_ca_c.webchat_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_webchat_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.setwallet_ca_c)
  return target;
}

size_t setwallet_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.setwallet_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bank_name = 1;
  if (this->bank_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_name());
  }

  // string bank_cardid = 2;
  if (this->bank_cardid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_cardid());
  }

  // string bank_user_name = 3;
  if (this->bank_user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_user_name());
  }

  // string ailpay_id = 4;
  if (this->ailpay_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ailpay_id());
  }

  // string alipay_name = 5;
  if (this->alipay_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alipay_name());
  }

  // string webchat_name = 6;
  if (this->webchat_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webchat_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void setwallet_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.setwallet_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const setwallet_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<setwallet_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.setwallet_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.setwallet_ca_c)
    MergeFrom(*source);
  }
}

void setwallet_ca_c::MergeFrom(const setwallet_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.setwallet_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bank_name().size() > 0) {
    _internal_set_bank_name(from._internal_bank_name());
  }
  if (from.bank_cardid().size() > 0) {
    _internal_set_bank_cardid(from._internal_bank_cardid());
  }
  if (from.bank_user_name().size() > 0) {
    _internal_set_bank_user_name(from._internal_bank_user_name());
  }
  if (from.ailpay_id().size() > 0) {
    _internal_set_ailpay_id(from._internal_ailpay_id());
  }
  if (from.alipay_name().size() > 0) {
    _internal_set_alipay_name(from._internal_alipay_name());
  }
  if (from.webchat_name().size() > 0) {
    _internal_set_webchat_name(from._internal_webchat_name());
  }
}

void setwallet_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.setwallet_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setwallet_ca_c::CopyFrom(const setwallet_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.setwallet_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setwallet_ca_c::IsInitialized() const {
  return true;
}

void setwallet_ca_c::InternalSwap(setwallet_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_cardid_.Swap(&other->bank_cardid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_user_name_.Swap(&other->bank_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ailpay_id_.Swap(&other->ailpay_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alipay_name_.Swap(&other->alipay_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webchat_name_.Swap(&other->webchat_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata setwallet_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class setwallet_ca_s::_Internal {
 public:
};

setwallet_ca_s::setwallet_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.setwallet_ca_s)
}
setwallet_ca_s::setwallet_ca_s(const setwallet_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&pay_verifie_) -
    reinterpret_cast<char*>(&result_)) + sizeof(pay_verifie_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.setwallet_ca_s)
}

void setwallet_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pay_verifie_) -
    reinterpret_cast<char*>(&result_)) + sizeof(pay_verifie_));
}

setwallet_ca_s::~setwallet_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.setwallet_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void setwallet_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void setwallet_ca_s::ArenaDtor(void* object) {
  setwallet_ca_s* _this = reinterpret_cast< setwallet_ca_s* >(object);
  (void)_this;
}
void setwallet_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setwallet_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setwallet_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.setwallet_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pay_verifie_) -
      reinterpret_cast<char*>(&result_)) + sizeof(pay_verifie_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setwallet_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pay_verifie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pay_verifie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setwallet_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.setwallet_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 pay_verifie = 2;
  if (this->pay_verifie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pay_verifie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.setwallet_ca_s)
  return target;
}

size_t setwallet_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.setwallet_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 pay_verifie = 2;
  if (this->pay_verifie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pay_verifie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void setwallet_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.setwallet_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const setwallet_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<setwallet_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.setwallet_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.setwallet_ca_s)
    MergeFrom(*source);
  }
}

void setwallet_ca_s::MergeFrom(const setwallet_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.setwallet_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.pay_verifie() != 0) {
    _internal_set_pay_verifie(from._internal_pay_verifie());
  }
}

void setwallet_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.setwallet_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setwallet_ca_s::CopyFrom(const setwallet_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.setwallet_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setwallet_ca_s::IsInitialized() const {
  return true;
}

void setwallet_ca_s::InternalSwap(setwallet_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(setwallet_ca_s, pay_verifie_)
      + sizeof(setwallet_ca_s::pay_verifie_)
      - PROTOBUF_FIELD_OFFSET(setwallet_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata setwallet_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class myteam_ca_s::_Internal {
 public:
};

myteam_ca_s::myteam_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.myteam_ca_s)
}
myteam_ca_s::myteam_ca_s(const myteam_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_total_assets_, &from.team_total_assets_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth3_total_register_num_) -
    reinterpret_cast<char*>(&team_total_assets_)) + sizeof(depth3_total_register_num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.myteam_ca_s)
}

void myteam_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_total_assets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depth3_total_register_num_) -
    reinterpret_cast<char*>(&team_total_assets_)) + sizeof(depth3_total_register_num_));
}

myteam_ca_s::~myteam_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.myteam_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void myteam_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void myteam_ca_s::ArenaDtor(void* object) {
  myteam_ca_s* _this = reinterpret_cast< myteam_ca_s* >(object);
  (void)_this;
}
void myteam_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void myteam_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void myteam_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.myteam_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_total_assets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth3_total_register_num_) -
      reinterpret_cast<char*>(&team_total_assets_)) + sizeof(depth3_total_register_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* myteam_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float team_total_assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          team_total_assets_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 team_total_activated_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          team_total_activated_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 team_total_register_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          team_total_register_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth1_total_activated_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          depth1_total_activated_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth1_total_register_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          depth1_total_register_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth2_total_activated_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          depth2_total_activated_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth2_total_register_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          depth2_total_register_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth3_total_activated_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          depth3_total_activated_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth3_total_register_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          depth3_total_register_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* myteam_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.myteam_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float team_total_assets = 1;
  if (!(this->team_total_assets() <= 0 && this->team_total_assets() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_team_total_assets(), target);
  }

  // int32 team_total_activated_num = 2;
  if (this->team_total_activated_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_total_activated_num(), target);
  }

  // int32 team_total_register_num = 3;
  if (this->team_total_register_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_total_register_num(), target);
  }

  // int32 depth1_total_activated_num = 4;
  if (this->depth1_total_activated_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_depth1_total_activated_num(), target);
  }

  // int32 depth1_total_register_num = 5;
  if (this->depth1_total_register_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_depth1_total_register_num(), target);
  }

  // int32 depth2_total_activated_num = 6;
  if (this->depth2_total_activated_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_depth2_total_activated_num(), target);
  }

  // int32 depth2_total_register_num = 7;
  if (this->depth2_total_register_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_depth2_total_register_num(), target);
  }

  // int32 depth3_total_activated_num = 8;
  if (this->depth3_total_activated_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_depth3_total_activated_num(), target);
  }

  // int32 depth3_total_register_num = 9;
  if (this->depth3_total_register_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_depth3_total_register_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.myteam_ca_s)
  return target;
}

size_t myteam_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.myteam_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float team_total_assets = 1;
  if (!(this->team_total_assets() <= 0 && this->team_total_assets() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 team_total_activated_num = 2;
  if (this->team_total_activated_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team_total_activated_num());
  }

  // int32 team_total_register_num = 3;
  if (this->team_total_register_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team_total_register_num());
  }

  // int32 depth1_total_activated_num = 4;
  if (this->depth1_total_activated_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth1_total_activated_num());
  }

  // int32 depth1_total_register_num = 5;
  if (this->depth1_total_register_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth1_total_register_num());
  }

  // int32 depth2_total_activated_num = 6;
  if (this->depth2_total_activated_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth2_total_activated_num());
  }

  // int32 depth2_total_register_num = 7;
  if (this->depth2_total_register_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth2_total_register_num());
  }

  // int32 depth3_total_activated_num = 8;
  if (this->depth3_total_activated_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth3_total_activated_num());
  }

  // int32 depth3_total_register_num = 9;
  if (this->depth3_total_register_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth3_total_register_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void myteam_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.myteam_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const myteam_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<myteam_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.myteam_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.myteam_ca_s)
    MergeFrom(*source);
  }
}

void myteam_ca_s::MergeFrom(const myteam_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.myteam_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.team_total_assets() <= 0 && from.team_total_assets() >= 0)) {
    _internal_set_team_total_assets(from._internal_team_total_assets());
  }
  if (from.team_total_activated_num() != 0) {
    _internal_set_team_total_activated_num(from._internal_team_total_activated_num());
  }
  if (from.team_total_register_num() != 0) {
    _internal_set_team_total_register_num(from._internal_team_total_register_num());
  }
  if (from.depth1_total_activated_num() != 0) {
    _internal_set_depth1_total_activated_num(from._internal_depth1_total_activated_num());
  }
  if (from.depth1_total_register_num() != 0) {
    _internal_set_depth1_total_register_num(from._internal_depth1_total_register_num());
  }
  if (from.depth2_total_activated_num() != 0) {
    _internal_set_depth2_total_activated_num(from._internal_depth2_total_activated_num());
  }
  if (from.depth2_total_register_num() != 0) {
    _internal_set_depth2_total_register_num(from._internal_depth2_total_register_num());
  }
  if (from.depth3_total_activated_num() != 0) {
    _internal_set_depth3_total_activated_num(from._internal_depth3_total_activated_num());
  }
  if (from.depth3_total_register_num() != 0) {
    _internal_set_depth3_total_register_num(from._internal_depth3_total_register_num());
  }
}

void myteam_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.myteam_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void myteam_ca_s::CopyFrom(const myteam_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.myteam_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool myteam_ca_s::IsInitialized() const {
  return true;
}

void myteam_ca_s::InternalSwap(myteam_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(myteam_ca_s, depth3_total_register_num_)
      + sizeof(myteam_ca_s::depth3_total_register_num_)
      - PROTOBUF_FIELD_OFFSET(myteam_ca_s, team_total_assets_)>(
          reinterpret_cast<char*>(&team_total_assets_),
          reinterpret_cast<char*>(&other->team_total_assets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata myteam_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class depth_list_ca_s_item::_Internal {
 public:
};

depth_list_ca_s_item::depth_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.depth_list_ca_s.item)
}
depth_list_ca_s_item::depth_list_ca_s_item(const depth_list_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nc().empty()) {
    nc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nc(), 
      GetArena());
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&assets_) -
    reinterpret_cast<char*>(&num_)) + sizeof(assets_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.depth_list_ca_s.item)
}

void depth_list_ca_s_item::SharedCtor() {
nc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assets_) -
    reinterpret_cast<char*>(&num_)) + sizeof(assets_));
}

depth_list_ca_s_item::~depth_list_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.depth_list_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void depth_list_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void depth_list_ca_s_item::ArenaDtor(void* object) {
  depth_list_ca_s_item* _this = reinterpret_cast< depth_list_ca_s_item* >(object);
  (void)_this;
}
void depth_list_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void depth_list_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void depth_list_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.depth_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nc_.ClearToEmpty();
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assets_) -
      reinterpret_cast<char*>(&num_)) + sizeof(assets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* depth_list_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.depth_list_ca_s.item.nc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float assets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          assets_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depth_list_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.depth_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nc = 1;
  if (this->nc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nc().data(), static_cast<int>(this->_internal_nc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.depth_list_ca_s.item.nc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nc(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // float assets = 3;
  if (!(this->assets() <= 0 && this->assets() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_assets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.depth_list_ca_s.item)
  return target;
}

size_t depth_list_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.depth_list_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nc = 1;
  if (this->nc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nc());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // float assets = 3;
  if (!(this->assets() <= 0 && this->assets() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depth_list_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.depth_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const depth_list_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depth_list_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.depth_list_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.depth_list_ca_s.item)
    MergeFrom(*source);
  }
}

void depth_list_ca_s_item::MergeFrom(const depth_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.depth_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nc().size() > 0) {
    _internal_set_nc(from._internal_nc());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (!(from.assets() <= 0 && from.assets() >= 0)) {
    _internal_set_assets(from._internal_assets());
  }
}

void depth_list_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.depth_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_list_ca_s_item::CopyFrom(const depth_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.depth_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_list_ca_s_item::IsInitialized() const {
  return true;
}

void depth_list_ca_s_item::InternalSwap(depth_list_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nc_.Swap(&other->nc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(depth_list_ca_s_item, assets_)
      + sizeof(depth_list_ca_s_item::assets_)
      - PROTOBUF_FIELD_OFFSET(depth_list_ca_s_item, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata depth_list_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class depth_list_ca_s::_Internal {
 public:
};

depth_list_ca_s::depth_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sifs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.depth_list_ca_s)
}
depth_list_ca_s::depth_list_ca_s(const depth_list_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sifs_(from.sifs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.depth_list_ca_s)
}

void depth_list_ca_s::SharedCtor() {
}

depth_list_ca_s::~depth_list_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.depth_list_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void depth_list_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void depth_list_ca_s::ArenaDtor(void* object) {
  depth_list_ca_s* _this = reinterpret_cast< depth_list_ca_s* >(object);
  (void)_this;
}
void depth_list_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void depth_list_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void depth_list_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.depth_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sifs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* depth_list_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.depth_list_ca_s.item sifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depth_list_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.depth_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.depth_list_ca_s.item sifs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sifs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sifs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.depth_list_ca_s)
  return target;
}

size_t depth_list_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.depth_list_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.depth_list_ca_s.item sifs = 1;
  total_size += 1UL * this->_internal_sifs_size();
  for (const auto& msg : this->sifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depth_list_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.depth_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const depth_list_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depth_list_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.depth_list_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.depth_list_ca_s)
    MergeFrom(*source);
  }
}

void depth_list_ca_s::MergeFrom(const depth_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.depth_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sifs_.MergeFrom(from.sifs_);
}

void depth_list_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.depth_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_list_ca_s::CopyFrom(const depth_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.depth_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_list_ca_s::IsInitialized() const {
  return true;
}

void depth_list_ca_s::InternalSwap(depth_list_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sifs_.InternalSwap(&other->sifs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata depth_list_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class idcard_ca_c::_Internal {
 public:
};

idcard_ca_c::idcard_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.idcard_ca_c)
}
idcard_ca_c::idcard_ca_c(const idcard_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idcard().empty()) {
    idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idcard(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.idcard_ca_c)
}

void idcard_ca_c::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

idcard_ca_c::~idcard_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.idcard_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void idcard_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void idcard_ca_c::ArenaDtor(void* object) {
  idcard_ca_c* _this = reinterpret_cast< idcard_ca_c* >(object);
  (void)_this;
}
void idcard_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void idcard_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void idcard_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.idcard_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  idcard_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* idcard_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.idcard_ca_c.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idcard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_idcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.idcard_ca_c.idcard"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* idcard_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.idcard_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.idcard_ca_c.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string idcard = 2;
  if (this->idcard().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idcard().data(), static_cast<int>(this->_internal_idcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.idcard_ca_c.idcard");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_idcard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.idcard_ca_c)
  return target;
}

size_t idcard_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.idcard_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string idcard = 2;
  if (this->idcard().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idcard());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void idcard_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.idcard_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const idcard_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<idcard_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.idcard_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.idcard_ca_c)
    MergeFrom(*source);
  }
}

void idcard_ca_c::MergeFrom(const idcard_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.idcard_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.idcard().size() > 0) {
    _internal_set_idcard(from._internal_idcard());
  }
}

void idcard_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.idcard_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void idcard_ca_c::CopyFrom(const idcard_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.idcard_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool idcard_ca_c::IsInitialized() const {
  return true;
}

void idcard_ca_c::InternalSwap(idcard_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idcard_.Swap(&other->idcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata idcard_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class idcard_ca_s::_Internal {
 public:
};

idcard_ca_s::idcard_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.idcard_ca_s)
}
idcard_ca_s::idcard_ca_s(const idcard_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_verifie_) -
    reinterpret_cast<char*>(&result_)) + sizeof(name_verifie_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.idcard_ca_s)
}

void idcard_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&name_verifie_) -
    reinterpret_cast<char*>(&result_)) + sizeof(name_verifie_));
}

idcard_ca_s::~idcard_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.idcard_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void idcard_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void idcard_ca_s::ArenaDtor(void* object) {
  idcard_ca_s* _this = reinterpret_cast< idcard_ca_s* >(object);
  (void)_this;
}
void idcard_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void idcard_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void idcard_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.idcard_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_verifie_) -
      reinterpret_cast<char*>(&result_)) + sizeof(name_verifie_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* idcard_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name_verifie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          name_verifie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* idcard_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.idcard_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 name_verifie = 2;
  if (this->name_verifie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_name_verifie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.idcard_ca_s)
  return target;
}

size_t idcard_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.idcard_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 name_verifie = 2;
  if (this->name_verifie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name_verifie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void idcard_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.idcard_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const idcard_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<idcard_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.idcard_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.idcard_ca_s)
    MergeFrom(*source);
  }
}

void idcard_ca_s::MergeFrom(const idcard_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.idcard_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.name_verifie() != 0) {
    _internal_set_name_verifie(from._internal_name_verifie());
  }
}

void idcard_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.idcard_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void idcard_ca_s::CopyFrom(const idcard_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.idcard_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool idcard_ca_s::IsInitialized() const {
  return true;
}

void idcard_ca_s::InternalSwap(idcard_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(idcard_ca_s, name_verifie_)
      + sizeof(idcard_ca_s::name_verifie_)
      - PROTOBUF_FIELD_OFFSET(idcard_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata idcard_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sign_ca_s::_Internal {
 public:
};

sign_ca_s::sign_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.sign_ca_s)
}
sign_ca_s::sign_ca_s(const sign_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&dispatch_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(dispatch_coin_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.sign_ca_s)
}

void sign_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dispatch_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(dispatch_coin_));
}

sign_ca_s::~sign_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.sign_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sign_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sign_ca_s::ArenaDtor(void* object) {
  sign_ca_s* _this = reinterpret_cast< sign_ca_s* >(object);
  (void)_this;
}
void sign_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sign_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sign_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.sign_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dispatch_coin_) -
      reinterpret_cast<char*>(&result_)) + sizeof(dispatch_coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sign_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dispatch_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sign_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.sign_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 dispatch_coin = 2;
  if (this->dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dispatch_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.sign_ca_s)
  return target;
}

size_t sign_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.sign_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 dispatch_coin = 2;
  if (this->dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dispatch_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sign_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.sign_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const sign_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sign_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.sign_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.sign_ca_s)
    MergeFrom(*source);
  }
}

void sign_ca_s::MergeFrom(const sign_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.sign_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.dispatch_coin() != 0) {
    _internal_set_dispatch_coin(from._internal_dispatch_coin());
  }
}

void sign_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.sign_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_ca_s::CopyFrom(const sign_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.sign_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_ca_s::IsInitialized() const {
  return true;
}

void sign_ca_s::InternalSwap(sign_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sign_ca_s, dispatch_coin_)
      + sizeof(sign_ca_s::dispatch_coin_)
      - PROTOBUF_FIELD_OFFSET(sign_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sign_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class login_pwd_ca_c::_Internal {
 public:
};

login_pwd_ca_c::login_pwd_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.login_pwd_ca_c)
}
login_pwd_ca_c::login_pwd_ca_c(const login_pwd_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_pwd().empty()) {
    source_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_pwd(), 
      GetArena());
  }
  target_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_pwd().empty()) {
    target_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_pwd(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.login_pwd_ca_c)
}

void login_pwd_ca_c::SharedCtor() {
source_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

login_pwd_ca_c::~login_pwd_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.login_pwd_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_pwd_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_pwd_ca_c::ArenaDtor(void* object) {
  login_pwd_ca_c* _this = reinterpret_cast< login_pwd_ca_c* >(object);
  (void)_this;
}
void login_pwd_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_pwd_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_pwd_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.login_pwd_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_pwd_.ClearToEmpty();
  target_pwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_pwd_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_pwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_pwd_ca_c.source_pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_pwd_ca_c.target_pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_pwd_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.login_pwd_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_pwd = 1;
  if (this->source_pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_pwd().data(), static_cast<int>(this->_internal_source_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_pwd_ca_c.source_pwd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_pwd(), target);
  }

  // string target_pwd = 2;
  if (this->target_pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_pwd().data(), static_cast<int>(this->_internal_target_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_pwd_ca_c.target_pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.login_pwd_ca_c)
  return target;
}

size_t login_pwd_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.login_pwd_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_pwd = 1;
  if (this->source_pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_pwd());
  }

  // string target_pwd = 2;
  if (this->target_pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_pwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_pwd_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.login_pwd_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const login_pwd_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_pwd_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.login_pwd_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.login_pwd_ca_c)
    MergeFrom(*source);
  }
}

void login_pwd_ca_c::MergeFrom(const login_pwd_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.login_pwd_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_pwd().size() > 0) {
    _internal_set_source_pwd(from._internal_source_pwd());
  }
  if (from.target_pwd().size() > 0) {
    _internal_set_target_pwd(from._internal_target_pwd());
  }
}

void login_pwd_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.login_pwd_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_pwd_ca_c::CopyFrom(const login_pwd_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.login_pwd_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_pwd_ca_c::IsInitialized() const {
  return true;
}

void login_pwd_ca_c::InternalSwap(login_pwd_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_pwd_.Swap(&other->source_pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_pwd_.Swap(&other->target_pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata login_pwd_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class login_pwd_ca_s::_Internal {
 public:
};

login_pwd_ca_s::login_pwd_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.login_pwd_ca_s)
}
login_pwd_ca_s::login_pwd_ca_s(const login_pwd_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.login_pwd_ca_s)
}

void login_pwd_ca_s::SharedCtor() {
result_ = 0;
}

login_pwd_ca_s::~login_pwd_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.login_pwd_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_pwd_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void login_pwd_ca_s::ArenaDtor(void* object) {
  login_pwd_ca_s* _this = reinterpret_cast< login_pwd_ca_s* >(object);
  (void)_this;
}
void login_pwd_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_pwd_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_pwd_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.login_pwd_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_pwd_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_pwd_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.login_pwd_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.login_pwd_ca_s)
  return target;
}

size_t login_pwd_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.login_pwd_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_pwd_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.login_pwd_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const login_pwd_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_pwd_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.login_pwd_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.login_pwd_ca_s)
    MergeFrom(*source);
  }
}

void login_pwd_ca_s::MergeFrom(const login_pwd_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.login_pwd_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void login_pwd_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.login_pwd_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_pwd_ca_s::CopyFrom(const login_pwd_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.login_pwd_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_pwd_ca_s::IsInitialized() const {
  return true;
}

void login_pwd_ca_s::InternalSwap(login_pwd_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_pwd_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class dispatch_coin_log_ca_s_item::_Internal {
 public:
};

dispatch_coin_log_ca_s_item::dispatch_coin_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.dispatch_coin_log_ca_s.item)
}
dispatch_coin_log_ca_s_item::dispatch_coin_log_ca_s_item(const dispatch_coin_log_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(contract_type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.dispatch_coin_log_ca_s.item)
}

void dispatch_coin_log_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contract_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(contract_type_));
}

dispatch_coin_log_ca_s_item::~dispatch_coin_log_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.dispatch_coin_log_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dispatch_coin_log_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dispatch_coin_log_ca_s_item::ArenaDtor(void* object) {
  dispatch_coin_log_ca_s_item* _this = reinterpret_cast< dispatch_coin_log_ca_s_item* >(object);
  (void)_this;
}
void dispatch_coin_log_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dispatch_coin_log_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void dispatch_coin_log_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contract_type_) -
      reinterpret_cast<char*>(&time_)) + sizeof(contract_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dispatch_coin_log_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dispatch_coin_log_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 target_phone = 4;
  if (this->target_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_target_phone(), target);
  }

  // int32 num = 5;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num(), target);
  }

  // int32 contract_type = 6;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_contract_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.dispatch_coin_log_ca_s.item)
  return target;
}

size_t dispatch_coin_log_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int64 target_phone = 4;
  if (this->target_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_phone());
  }

  // int32 num = 5;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 contract_type = 6;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dispatch_coin_log_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const dispatch_coin_log_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dispatch_coin_log_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.dispatch_coin_log_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.dispatch_coin_log_ca_s.item)
    MergeFrom(*source);
  }
}

void dispatch_coin_log_ca_s_item::MergeFrom(const dispatch_coin_log_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.target_phone() != 0) {
    _internal_set_target_phone(from._internal_target_phone());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
}

void dispatch_coin_log_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dispatch_coin_log_ca_s_item::CopyFrom(const dispatch_coin_log_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.dispatch_coin_log_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dispatch_coin_log_ca_s_item::IsInitialized() const {
  return true;
}

void dispatch_coin_log_ca_s_item::InternalSwap(dispatch_coin_log_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dispatch_coin_log_ca_s_item, contract_type_)
      + sizeof(dispatch_coin_log_ca_s_item::contract_type_)
      - PROTOBUF_FIELD_OFFSET(dispatch_coin_log_ca_s_item, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dispatch_coin_log_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class dispatch_coin_log_ca_s::_Internal {
 public:
};

dispatch_coin_log_ca_s::dispatch_coin_log_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.dispatch_coin_log_ca_s)
}
dispatch_coin_log_ca_s::dispatch_coin_log_ca_s(const dispatch_coin_log_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.dispatch_coin_log_ca_s)
}

void dispatch_coin_log_ca_s::SharedCtor() {
}

dispatch_coin_log_ca_s::~dispatch_coin_log_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.dispatch_coin_log_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dispatch_coin_log_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dispatch_coin_log_ca_s::ArenaDtor(void* object) {
  dispatch_coin_log_ca_s* _this = reinterpret_cast< dispatch_coin_log_ca_s* >(object);
  (void)_this;
}
void dispatch_coin_log_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dispatch_coin_log_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void dispatch_coin_log_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.dispatch_coin_log_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dispatch_coin_log_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.dispatch_coin_log_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dispatch_coin_log_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.dispatch_coin_log_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.dispatch_coin_log_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.dispatch_coin_log_ca_s)
  return target;
}

size_t dispatch_coin_log_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.dispatch_coin_log_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.dispatch_coin_log_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dispatch_coin_log_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.dispatch_coin_log_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const dispatch_coin_log_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dispatch_coin_log_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.dispatch_coin_log_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.dispatch_coin_log_ca_s)
    MergeFrom(*source);
  }
}

void dispatch_coin_log_ca_s::MergeFrom(const dispatch_coin_log_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.dispatch_coin_log_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void dispatch_coin_log_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.dispatch_coin_log_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dispatch_coin_log_ca_s::CopyFrom(const dispatch_coin_log_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.dispatch_coin_log_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dispatch_coin_log_ca_s::IsInitialized() const {
  return true;
}

void dispatch_coin_log_ca_s::InternalSwap(dispatch_coin_log_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dispatch_coin_log_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_ca_c::_Internal {
 public:
};

recharge_ca_c::recharge_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_ca_c)
}
recharge_ca_c::recharge_ca_c(const recharge_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paycert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paycert().empty()) {
    paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paycert(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rmb_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rmb_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_ca_c)
}

void recharge_ca_c::SharedCtor() {
paycert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rmb_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rmb_));
}

recharge_ca_c::~recharge_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paycert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recharge_ca_c::ArenaDtor(void* object) {
  recharge_ca_c* _this = reinterpret_cast< recharge_ca_c* >(object);
  (void)_this;
}
void recharge_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paycert_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rmb_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rmb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rmb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rmb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string paycert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_paycert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.recharge_ca_c.paycert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // float rmb = 3;
  if (!(this->rmb() <= 0 && this->rmb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rmb(), target);
  }

  // string paycert = 4;
  if (this->paycert().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paycert().data(), static_cast<int>(this->_internal_paycert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.recharge_ca_c.paycert");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_paycert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_ca_c)
  return target;
}

size_t recharge_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paycert = 4;
  if (this->paycert().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paycert());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // float rmb = 3;
  if (!(this->rmb() <= 0 && this->rmb() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_ca_c)
    MergeFrom(*source);
  }
}

void recharge_ca_c::MergeFrom(const recharge_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paycert().size() > 0) {
    _internal_set_paycert(from._internal_paycert());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (!(from.rmb() <= 0 && from.rmb() >= 0)) {
    _internal_set_rmb(from._internal_rmb());
  }
}

void recharge_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_ca_c::CopyFrom(const recharge_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_ca_c::IsInitialized() const {
  return true;
}

void recharge_ca_c::InternalSwap(recharge_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paycert_.Swap(&other->paycert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_ca_c, rmb_)
      + sizeof(recharge_ca_c::rmb_)
      - PROTOBUF_FIELD_OFFSET(recharge_ca_c, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_ca_s::_Internal {
 public:
};

recharge_ca_s::recharge_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_ca_s)
}
recharge_ca_s::recharge_ca_s(const recharge_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_ca_s)
}

void recharge_ca_s::SharedCtor() {
result_ = 0;
}

recharge_ca_s::~recharge_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void recharge_ca_s::ArenaDtor(void* object) {
  recharge_ca_s* _this = reinterpret_cast< recharge_ca_s* >(object);
  (void)_this;
}
void recharge_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_ca_s)
  return target;
}

size_t recharge_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_ca_s)
    MergeFrom(*source);
  }
}

void recharge_ca_s::MergeFrom(const recharge_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void recharge_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_ca_s::CopyFrom(const recharge_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_ca_s::IsInitialized() const {
  return true;
}

void recharge_ca_s::InternalSwap(recharge_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class transfer_ca_c::_Internal {
 public:
};

transfer_ca_c::transfer_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.transfer_ca_c)
}
transfer_ca_c::transfer_ca_c(const transfer_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(trade_code_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.transfer_ca_c)
}

void transfer_ca_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(trade_code_));
}

transfer_ca_c::~transfer_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.transfer_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transfer_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void transfer_ca_c::ArenaDtor(void* object) {
  transfer_ca_c* _this = reinterpret_cast< transfer_ca_c* >(object);
  (void)_this;
}
void transfer_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.transfer_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_code_) -
      reinterpret_cast<char*>(&type_)) + sizeof(trade_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trade_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.transfer_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int64 target_phone = 3;
  if (this->target_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_target_phone(), target);
  }

  // int32 trade_code = 4;
  if (this->trade_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trade_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.transfer_ca_c)
  return target;
}

size_t transfer_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.transfer_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int64 target_phone = 3;
  if (this->target_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_phone());
  }

  // int32 trade_code = 4;
  if (this->trade_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transfer_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.transfer_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transfer_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.transfer_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.transfer_ca_c)
    MergeFrom(*source);
  }
}

void transfer_ca_c::MergeFrom(const transfer_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.transfer_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.target_phone() != 0) {
    _internal_set_target_phone(from._internal_target_phone());
  }
  if (from.trade_code() != 0) {
    _internal_set_trade_code(from._internal_trade_code());
  }
}

void transfer_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.transfer_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_ca_c::CopyFrom(const transfer_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.transfer_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_ca_c::IsInitialized() const {
  return true;
}

void transfer_ca_c::InternalSwap(transfer_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transfer_ca_c, trade_code_)
      + sizeof(transfer_ca_c::trade_code_)
      - PROTOBUF_FIELD_OFFSET(transfer_ca_c, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class transfer_ca_s::_Internal {
 public:
};

transfer_ca_s::transfer_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.transfer_ca_s)
}
transfer_ca_s::transfer_ca_s(const transfer_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_num_) -
    reinterpret_cast<char*>(&result_)) + sizeof(curr_num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.transfer_ca_s)
}

void transfer_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_num_) -
    reinterpret_cast<char*>(&result_)) + sizeof(curr_num_));
}

transfer_ca_s::~transfer_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.transfer_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transfer_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void transfer_ca_s::ArenaDtor(void* object) {
  transfer_ca_s* _this = reinterpret_cast< transfer_ca_s* >(object);
  (void)_this;
}
void transfer_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.transfer_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_num_) -
      reinterpret_cast<char*>(&result_)) + sizeof(curr_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curr_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.transfer_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 curr_num = 3;
  if (this->curr_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curr_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.transfer_ca_s)
  return target;
}

size_t transfer_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.transfer_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 curr_num = 3;
  if (this->curr_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transfer_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.transfer_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transfer_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.transfer_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.transfer_ca_s)
    MergeFrom(*source);
  }
}

void transfer_ca_s::MergeFrom(const transfer_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.transfer_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.curr_num() != 0) {
    _internal_set_curr_num(from._internal_curr_num());
  }
}

void transfer_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.transfer_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_ca_s::CopyFrom(const transfer_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.transfer_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_ca_s::IsInitialized() const {
  return true;
}

void transfer_ca_s::InternalSwap(transfer_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transfer_ca_s, curr_num_)
      + sizeof(transfer_ca_s::curr_num_)
      - PROTOBUF_FIELD_OFFSET(transfer_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class transfer_ca_cs::_Internal {
 public:
};

transfer_ca_cs::transfer_ca_cs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.transfer_ca_cs)
}
transfer_ca_cs::transfer_ca_cs(const transfer_ca_cs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_num_) -
    reinterpret_cast<char*>(&type_)) + sizeof(curr_num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.transfer_ca_cs)
}

void transfer_ca_cs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_num_) -
    reinterpret_cast<char*>(&type_)) + sizeof(curr_num_));
}

transfer_ca_cs::~transfer_ca_cs() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.transfer_ca_cs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transfer_ca_cs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void transfer_ca_cs::ArenaDtor(void* object) {
  transfer_ca_cs* _this = reinterpret_cast< transfer_ca_cs* >(object);
  (void)_this;
}
void transfer_ca_cs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_ca_cs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_ca_cs::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.transfer_ca_cs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(curr_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_ca_cs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curr_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_ca_cs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.transfer_ca_cs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 curr_num = 2;
  if (this->curr_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curr_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.transfer_ca_cs)
  return target;
}

size_t transfer_ca_cs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.transfer_ca_cs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 curr_num = 2;
  if (this->curr_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transfer_ca_cs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.transfer_ca_cs)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_ca_cs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transfer_ca_cs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.transfer_ca_cs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.transfer_ca_cs)
    MergeFrom(*source);
  }
}

void transfer_ca_cs::MergeFrom(const transfer_ca_cs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.transfer_ca_cs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.curr_num() != 0) {
    _internal_set_curr_num(from._internal_curr_num());
  }
}

void transfer_ca_cs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.transfer_ca_cs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_ca_cs::CopyFrom(const transfer_ca_cs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.transfer_ca_cs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_ca_cs::IsInitialized() const {
  return true;
}

void transfer_ca_cs::InternalSwap(transfer_ca_cs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transfer_ca_cs, curr_num_)
      + sizeof(transfer_ca_cs::curr_num_)
      - PROTOBUF_FIELD_OFFSET(transfer_ca_cs, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_ca_cs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class activated_coin_log_ca_s_item::_Internal {
 public:
};

activated_coin_log_ca_s_item::activated_coin_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.activated_coin_log_ca_s.item)
}
activated_coin_log_ca_s_item::activated_coin_log_ca_s_item(const activated_coin_log_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.activated_coin_log_ca_s.item)
}

void activated_coin_log_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_));
}

activated_coin_log_ca_s_item::~activated_coin_log_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.activated_coin_log_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void activated_coin_log_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void activated_coin_log_ca_s_item::ArenaDtor(void* object) {
  activated_coin_log_ca_s_item* _this = reinterpret_cast< activated_coin_log_ca_s_item* >(object);
  (void)_this;
}
void activated_coin_log_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void activated_coin_log_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void activated_coin_log_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.activated_coin_log_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&time_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activated_coin_log_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* activated_coin_log_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.activated_coin_log_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 target_phone = 4;
  if (this->target_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_target_phone(), target);
  }

  // int32 num = 5;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.activated_coin_log_ca_s.item)
  return target;
}

size_t activated_coin_log_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.activated_coin_log_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int64 target_phone = 4;
  if (this->target_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_phone());
  }

  // int32 num = 5;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void activated_coin_log_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.activated_coin_log_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const activated_coin_log_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<activated_coin_log_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.activated_coin_log_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.activated_coin_log_ca_s.item)
    MergeFrom(*source);
  }
}

void activated_coin_log_ca_s_item::MergeFrom(const activated_coin_log_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.activated_coin_log_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.target_phone() != 0) {
    _internal_set_target_phone(from._internal_target_phone());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void activated_coin_log_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.activated_coin_log_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activated_coin_log_ca_s_item::CopyFrom(const activated_coin_log_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.activated_coin_log_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activated_coin_log_ca_s_item::IsInitialized() const {
  return true;
}

void activated_coin_log_ca_s_item::InternalSwap(activated_coin_log_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(activated_coin_log_ca_s_item, num_)
      + sizeof(activated_coin_log_ca_s_item::num_)
      - PROTOBUF_FIELD_OFFSET(activated_coin_log_ca_s_item, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata activated_coin_log_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class activated_coin_log_ca_s::_Internal {
 public:
};

activated_coin_log_ca_s::activated_coin_log_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.activated_coin_log_ca_s)
}
activated_coin_log_ca_s::activated_coin_log_ca_s(const activated_coin_log_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.activated_coin_log_ca_s)
}

void activated_coin_log_ca_s::SharedCtor() {
}

activated_coin_log_ca_s::~activated_coin_log_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.activated_coin_log_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void activated_coin_log_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void activated_coin_log_ca_s::ArenaDtor(void* object) {
  activated_coin_log_ca_s* _this = reinterpret_cast< activated_coin_log_ca_s* >(object);
  (void)_this;
}
void activated_coin_log_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void activated_coin_log_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void activated_coin_log_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.activated_coin_log_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activated_coin_log_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.activated_coin_log_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* activated_coin_log_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.activated_coin_log_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.activated_coin_log_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.activated_coin_log_ca_s)
  return target;
}

size_t activated_coin_log_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.activated_coin_log_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.activated_coin_log_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void activated_coin_log_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.activated_coin_log_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const activated_coin_log_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<activated_coin_log_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.activated_coin_log_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.activated_coin_log_ca_s)
    MergeFrom(*source);
  }
}

void activated_coin_log_ca_s::MergeFrom(const activated_coin_log_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.activated_coin_log_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void activated_coin_log_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.activated_coin_log_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activated_coin_log_ca_s::CopyFrom(const activated_coin_log_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.activated_coin_log_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activated_coin_log_ca_s::IsInitialized() const {
  return true;
}

void activated_coin_log_ca_s::InternalSwap(activated_coin_log_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata activated_coin_log_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class self_assets_ca_s_item::_Internal {
 public:
};

self_assets_ca_s_item::self_assets_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.self_assets_ca_s.item)
}
self_assets_ca_s_item::self_assets_ca_s_item(const self_assets_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&getway_) -
    reinterpret_cast<char*>(&type_)) + sizeof(getway_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.self_assets_ca_s.item)
}

void self_assets_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&getway_) -
    reinterpret_cast<char*>(&type_)) + sizeof(getway_));
}

self_assets_ca_s_item::~self_assets_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.self_assets_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void self_assets_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void self_assets_ca_s_item::ArenaDtor(void* object) {
  self_assets_ca_s_item* _this = reinterpret_cast< self_assets_ca_s_item* >(object);
  (void)_this;
}
void self_assets_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void self_assets_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void self_assets_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.self_assets_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getway_) -
      reinterpret_cast<char*>(&type_)) + sizeof(getway_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* self_assets_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 getway = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          getway_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* self_assets_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.self_assets_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_price(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // int32 getway = 4;
  if (this->getway() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_getway(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.self_assets_ca_s.item)
  return target;
}

size_t self_assets_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.self_assets_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 getway = 4;
  if (this->getway() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_getway());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void self_assets_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.self_assets_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const self_assets_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<self_assets_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.self_assets_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.self_assets_ca_s.item)
    MergeFrom(*source);
  }
}

void self_assets_ca_s_item::MergeFrom(const self_assets_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.self_assets_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.getway() != 0) {
    _internal_set_getway(from._internal_getway());
  }
}

void self_assets_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.self_assets_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void self_assets_ca_s_item::CopyFrom(const self_assets_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.self_assets_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool self_assets_ca_s_item::IsInitialized() const {
  return true;
}

void self_assets_ca_s_item::InternalSwap(self_assets_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(self_assets_ca_s_item, getway_)
      + sizeof(self_assets_ca_s_item::getway_)
      - PROTOBUF_FIELD_OFFSET(self_assets_ca_s_item, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata self_assets_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class self_assets_ca_s::_Internal {
 public:
};

self_assets_ca_s::self_assets_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.self_assets_ca_s)
}
self_assets_ca_s::self_assets_ca_s(const self_assets_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.self_assets_ca_s)
}

void self_assets_ca_s::SharedCtor() {
}

self_assets_ca_s::~self_assets_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.self_assets_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void self_assets_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void self_assets_ca_s::ArenaDtor(void* object) {
  self_assets_ca_s* _this = reinterpret_cast< self_assets_ca_s* >(object);
  (void)_this;
}
void self_assets_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void self_assets_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void self_assets_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.self_assets_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* self_assets_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.self_assets_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* self_assets_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.self_assets_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.self_assets_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.self_assets_ca_s)
  return target;
}

size_t self_assets_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.self_assets_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.self_assets_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void self_assets_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.self_assets_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const self_assets_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<self_assets_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.self_assets_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.self_assets_ca_s)
    MergeFrom(*source);
  }
}

void self_assets_ca_s::MergeFrom(const self_assets_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.self_assets_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void self_assets_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.self_assets_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void self_assets_ca_s::CopyFrom(const self_assets_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.self_assets_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool self_assets_ca_s::IsInitialized() const {
  return true;
}

void self_assets_ca_s::InternalSwap(self_assets_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata self_assets_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class income_log_ca_c::_Internal {
 public:
};

income_log_ca_c::income_log_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.income_log_ca_c)
}
income_log_ca_c::income_log_ca_c(const income_log_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.income_log_ca_c)
}

void income_log_ca_c::SharedCtor() {
type_ = 0;
}

income_log_ca_c::~income_log_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.income_log_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void income_log_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void income_log_ca_c::ArenaDtor(void* object) {
  income_log_ca_c* _this = reinterpret_cast< income_log_ca_c* >(object);
  (void)_this;
}
void income_log_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void income_log_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void income_log_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.income_log_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* income_log_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* income_log_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.income_log_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.income_log_ca_c)
  return target;
}

size_t income_log_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.income_log_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void income_log_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.income_log_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const income_log_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<income_log_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.income_log_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.income_log_ca_c)
    MergeFrom(*source);
  }
}

void income_log_ca_c::MergeFrom(const income_log_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.income_log_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void income_log_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.income_log_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void income_log_ca_c::CopyFrom(const income_log_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.income_log_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool income_log_ca_c::IsInitialized() const {
  return true;
}

void income_log_ca_c::InternalSwap(income_log_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata income_log_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class income_log_ca_s_item::_Internal {
 public:
};

income_log_ca_s_item::income_log_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.income_log_ca_s.item)
}
income_log_ca_s_item::income_log_ca_s_item(const income_log_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_phone_) -
    reinterpret_cast<char*>(&type_)) + sizeof(target_phone_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.income_log_ca_s.item)
}

void income_log_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_phone_) -
    reinterpret_cast<char*>(&type_)) + sizeof(target_phone_));
}

income_log_ca_s_item::~income_log_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.income_log_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void income_log_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void income_log_ca_s_item::ArenaDtor(void* object) {
  income_log_ca_s_item* _this = reinterpret_cast< income_log_ca_s_item* >(object);
  (void)_this;
}
void income_log_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void income_log_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void income_log_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.income_log_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_phone_) -
      reinterpret_cast<char*>(&type_)) + sizeof(target_phone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* income_log_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_phone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          target_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* income_log_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.income_log_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_price(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // int32 depth = 4;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_depth(), target);
  }

  // int64 target_phone = 5;
  if (this->target_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_target_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.income_log_ca_s.item)
  return target;
}

size_t income_log_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.income_log_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 depth = 4;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  // int64 target_phone = 5;
  if (this->target_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void income_log_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.income_log_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const income_log_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<income_log_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.income_log_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.income_log_ca_s.item)
    MergeFrom(*source);
  }
}

void income_log_ca_s_item::MergeFrom(const income_log_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.income_log_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.target_phone() != 0) {
    _internal_set_target_phone(from._internal_target_phone());
  }
}

void income_log_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.income_log_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void income_log_ca_s_item::CopyFrom(const income_log_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.income_log_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool income_log_ca_s_item::IsInitialized() const {
  return true;
}

void income_log_ca_s_item::InternalSwap(income_log_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(income_log_ca_s_item, target_phone_)
      + sizeof(income_log_ca_s_item::target_phone_)
      - PROTOBUF_FIELD_OFFSET(income_log_ca_s_item, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata income_log_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class income_log_ca_s::_Internal {
 public:
};

income_log_ca_s::income_log_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.income_log_ca_s)
}
income_log_ca_s::income_log_ca_s(const income_log_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.income_log_ca_s)
}

void income_log_ca_s::SharedCtor() {
}

income_log_ca_s::~income_log_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.income_log_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void income_log_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void income_log_ca_s::ArenaDtor(void* object) {
  income_log_ca_s* _this = reinterpret_cast< income_log_ca_s* >(object);
  (void)_this;
}
void income_log_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void income_log_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void income_log_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.income_log_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* income_log_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.income_log_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* income_log_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.income_log_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.income_log_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.income_log_ca_s)
  return target;
}

size_t income_log_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.income_log_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.income_log_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void income_log_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.income_log_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const income_log_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<income_log_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.income_log_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.income_log_ca_s)
    MergeFrom(*source);
  }
}

void income_log_ca_s::MergeFrom(const income_log_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.income_log_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void income_log_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.income_log_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void income_log_ca_s::CopyFrom(const income_log_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.income_log_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool income_log_ca_s::IsInitialized() const {
  return true;
}

void income_log_ca_s::InternalSwap(income_log_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata income_log_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getcontract_ca_c::_Internal {
 public:
};

getcontract_ca_c::getcontract_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.getcontract_ca_c)
}
getcontract_ca_c::getcontract_ca_c(const getcontract_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&price_)) + sizeof(trade_code_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.getcontract_ca_c)
}

void getcontract_ca_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&price_)) + sizeof(trade_code_));
}

getcontract_ca_c::~getcontract_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.getcontract_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getcontract_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void getcontract_ca_c::ArenaDtor(void* object) {
  getcontract_ca_c* _this = reinterpret_cast< getcontract_ca_c* >(object);
  (void)_this;
}
void getcontract_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getcontract_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getcontract_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.getcontract_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_code_) -
      reinterpret_cast<char*>(&price_)) + sizeof(trade_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getcontract_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trade_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getcontract_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.getcontract_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_price(), target);
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_contract_type(), target);
  }

  // int32 change_type = 3;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_change_type(), target);
  }

  // int32 trade_code = 4;
  if (this->trade_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trade_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.getcontract_ca_c)
  return target;
}

size_t getcontract_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.getcontract_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 change_type = 3;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_type());
  }

  // int32 trade_code = 4;
  if (this->trade_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getcontract_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.getcontract_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const getcontract_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getcontract_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.getcontract_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.getcontract_ca_c)
    MergeFrom(*source);
  }
}

void getcontract_ca_c::MergeFrom(const getcontract_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.getcontract_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.trade_code() != 0) {
    _internal_set_trade_code(from._internal_trade_code());
  }
}

void getcontract_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.getcontract_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getcontract_ca_c::CopyFrom(const getcontract_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.getcontract_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getcontract_ca_c::IsInitialized() const {
  return true;
}

void getcontract_ca_c::InternalSwap(getcontract_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getcontract_ca_c, trade_code_)
      + sizeof(getcontract_ca_c::trade_code_)
      - PROTOBUF_FIELD_OFFSET(getcontract_ca_c, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getcontract_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getcontract_ca_s::_Internal {
 public:
};

getcontract_ca_s::getcontract_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.getcontract_ca_s)
}
getcontract_ca_s::getcontract_ca_s(const getcontract_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(change_type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.getcontract_ca_s)
}

void getcontract_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(change_type_));
}

getcontract_ca_s::~getcontract_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.getcontract_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getcontract_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void getcontract_ca_s::ArenaDtor(void* object) {
  getcontract_ca_s* _this = reinterpret_cast< getcontract_ca_s* >(object);
  (void)_this;
}
void getcontract_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getcontract_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getcontract_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.getcontract_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(change_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getcontract_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float income = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 change_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getcontract_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.getcontract_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // float income = 2;
  if (!(this->income() <= 0 && this->income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_income(), target);
  }

  // int32 change_type = 3;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_change_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.getcontract_ca_s)
  return target;
}

size_t getcontract_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.getcontract_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // float income = 2;
  if (!(this->income() <= 0 && this->income() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 change_type = 3;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getcontract_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.getcontract_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const getcontract_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getcontract_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.getcontract_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.getcontract_ca_s)
    MergeFrom(*source);
  }
}

void getcontract_ca_s::MergeFrom(const getcontract_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.getcontract_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (!(from.income() <= 0 && from.income() >= 0)) {
    _internal_set_income(from._internal_income());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
}

void getcontract_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.getcontract_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getcontract_ca_s::CopyFrom(const getcontract_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.getcontract_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getcontract_ca_s::IsInitialized() const {
  return true;
}

void getcontract_ca_s::InternalSwap(getcontract_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getcontract_ca_s, change_type_)
      + sizeof(getcontract_ca_s::change_type_)
      - PROTOBUF_FIELD_OFFSET(getcontract_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getcontract_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_coin_ca_c::_Internal {
 public:
};

get_coin_ca_c::get_coin_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.get_coin_ca_c)
}
get_coin_ca_c::get_coin_ca_c(const get_coin_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&num_)) + sizeof(trade_code_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.get_coin_ca_c)
}

void get_coin_ca_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&num_)) + sizeof(trade_code_));
}

get_coin_ca_c::~get_coin_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.get_coin_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_coin_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_coin_ca_c::ArenaDtor(void* object) {
  get_coin_ca_c* _this = reinterpret_cast< get_coin_ca_c* >(object);
  (void)_this;
}
void get_coin_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_coin_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_coin_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.get_coin_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_code_) -
      reinterpret_cast<char*>(&num_)) + sizeof(trade_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_coin_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trade_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_coin_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.get_coin_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 change_type = 2;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_change_type(), target);
  }

  // int32 coin_type = 3;
  if (this->coin_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_coin_type(), target);
  }

  // int32 trade_code = 4;
  if (this->trade_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trade_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.get_coin_ca_c)
  return target;
}

size_t get_coin_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.get_coin_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 change_type = 2;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_type());
  }

  // int32 coin_type = 3;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin_type());
  }

  // int32 trade_code = 4;
  if (this->trade_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_coin_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.get_coin_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const get_coin_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_coin_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.get_coin_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.get_coin_ca_c)
    MergeFrom(*source);
  }
}

void get_coin_ca_c::MergeFrom(const get_coin_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.get_coin_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.coin_type() != 0) {
    _internal_set_coin_type(from._internal_coin_type());
  }
  if (from.trade_code() != 0) {
    _internal_set_trade_code(from._internal_trade_code());
  }
}

void get_coin_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.get_coin_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_coin_ca_c::CopyFrom(const get_coin_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.get_coin_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_coin_ca_c::IsInitialized() const {
  return true;
}

void get_coin_ca_c::InternalSwap(get_coin_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_coin_ca_c, trade_code_)
      + sizeof(get_coin_ca_c::trade_code_)
      - PROTOBUF_FIELD_OFFSET(get_coin_ca_c, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_coin_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_coin_ca_s::_Internal {
 public:
};

get_coin_ca_s::get_coin_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.get_coin_ca_s)
}
get_coin_ca_s::get_coin_ca_s(const get_coin_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_value_) -
    reinterpret_cast<char*>(&result_)) + sizeof(coin_value_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.get_coin_ca_s)
}

void get_coin_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_value_) -
    reinterpret_cast<char*>(&result_)) + sizeof(coin_value_));
}

get_coin_ca_s::~get_coin_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.get_coin_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_coin_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_coin_ca_s::ArenaDtor(void* object) {
  get_coin_ca_s* _this = reinterpret_cast< get_coin_ca_s* >(object);
  (void)_this;
}
void get_coin_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_coin_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_coin_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.get_coin_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_value_) -
      reinterpret_cast<char*>(&result_)) + sizeof(coin_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_coin_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float income = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 change_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          coin_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_coin_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.get_coin_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // float income = 2;
  if (!(this->income() <= 0 && this->income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_income(), target);
  }

  // int32 change_type = 3;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_change_type(), target);
  }

  // int32 coin_type = 4;
  if (this->coin_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_coin_type(), target);
  }

  // int32 coin_value = 5;
  if (this->coin_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_coin_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.get_coin_ca_s)
  return target;
}

size_t get_coin_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.get_coin_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // float income = 2;
  if (!(this->income() <= 0 && this->income() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 change_type = 3;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_type());
  }

  // int32 coin_type = 4;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin_type());
  }

  // int32 coin_value = 5;
  if (this->coin_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_coin_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.get_coin_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const get_coin_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_coin_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.get_coin_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.get_coin_ca_s)
    MergeFrom(*source);
  }
}

void get_coin_ca_s::MergeFrom(const get_coin_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.get_coin_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (!(from.income() <= 0 && from.income() >= 0)) {
    _internal_set_income(from._internal_income());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.coin_type() != 0) {
    _internal_set_coin_type(from._internal_coin_type());
  }
  if (from.coin_value() != 0) {
    _internal_set_coin_value(from._internal_coin_value());
  }
}

void get_coin_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.get_coin_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_coin_ca_s::CopyFrom(const get_coin_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.get_coin_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_coin_ca_s::IsInitialized() const {
  return true;
}

void get_coin_ca_s::InternalSwap(get_coin_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_coin_ca_s, coin_value_)
      + sizeof(get_coin_ca_s::coin_value_)
      - PROTOBUF_FIELD_OFFSET(get_coin_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_coin_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class mail_list_ca_s_item::_Internal {
 public:
};

mail_list_ca_s_item::mail_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.mail_list_ca_s.item)
}
mail_list_ca_s_item::mail_list_ca_s_item(const mail_list_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic(), 
      GetArena());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.mail_list_ca_s.item)
}

void mail_list_ca_s_item::SharedCtor() {
topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

mail_list_ca_s_item::~mail_list_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.mail_list_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mail_list_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mail_list_ca_s_item::ArenaDtor(void* object) {
  mail_list_ca_s_item* _this = reinterpret_cast< mail_list_ca_s_item* >(object);
  (void)_this;
}
void mail_list_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mail_list_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mail_list_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.mail_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty();
  info_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail_list_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.mail_list_ca_s.item.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.mail_list_ca_s.item.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mail_list_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.mail_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.mail_list_ca_s.item.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // string info = 3;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.mail_list_ca_s.item.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  // int32 state = 5;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.mail_list_ca_s.item)
  return target;
}

size_t mail_list_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.mail_list_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string info = 3;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mail_list_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.mail_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const mail_list_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mail_list_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.mail_list_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.mail_list_ca_s.item)
    MergeFrom(*source);
  }
}

void mail_list_ca_s_item::MergeFrom(const mail_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.mail_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void mail_list_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.mail_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_list_ca_s_item::CopyFrom(const mail_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.mail_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_list_ca_s_item::IsInitialized() const {
  return true;
}

void mail_list_ca_s_item::InternalSwap(mail_list_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mail_list_ca_s_item, state_)
      + sizeof(mail_list_ca_s_item::state_)
      - PROTOBUF_FIELD_OFFSET(mail_list_ca_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mail_list_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class mail_list_ca_s::_Internal {
 public:
};

mail_list_ca_s::mail_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.mail_list_ca_s)
}
mail_list_ca_s::mail_list_ca_s(const mail_list_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.mail_list_ca_s)
}

void mail_list_ca_s::SharedCtor() {
}

mail_list_ca_s::~mail_list_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.mail_list_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mail_list_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mail_list_ca_s::ArenaDtor(void* object) {
  mail_list_ca_s* _this = reinterpret_cast< mail_list_ca_s* >(object);
  (void)_this;
}
void mail_list_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mail_list_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mail_list_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.mail_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail_list_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.mail_list_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mail_list_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.mail_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.mail_list_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.mail_list_ca_s)
  return target;
}

size_t mail_list_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.mail_list_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.mail_list_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mail_list_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.mail_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const mail_list_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mail_list_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.mail_list_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.mail_list_ca_s)
    MergeFrom(*source);
  }
}

void mail_list_ca_s::MergeFrom(const mail_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.mail_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void mail_list_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.mail_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_list_ca_s::CopyFrom(const mail_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.mail_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_list_ca_s::IsInitialized() const {
  return true;
}

void mail_list_ca_s::InternalSwap(mail_list_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mail_list_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class mail_look_ca_c::_Internal {
 public:
};

mail_look_ca_c::mail_look_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.mail_look_ca_c)
}
mail_look_ca_c::mail_look_ca_c(const mail_look_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.mail_look_ca_c)
}

void mail_look_ca_c::SharedCtor() {
id_ = 0;
}

mail_look_ca_c::~mail_look_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.mail_look_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mail_look_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mail_look_ca_c::ArenaDtor(void* object) {
  mail_look_ca_c* _this = reinterpret_cast< mail_look_ca_c* >(object);
  (void)_this;
}
void mail_look_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mail_look_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mail_look_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.mail_look_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail_look_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mail_look_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.mail_look_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.mail_look_ca_c)
  return target;
}

size_t mail_look_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.mail_look_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mail_look_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.mail_look_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const mail_look_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mail_look_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.mail_look_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.mail_look_ca_c)
    MergeFrom(*source);
  }
}

void mail_look_ca_c::MergeFrom(const mail_look_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.mail_look_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void mail_look_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.mail_look_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_look_ca_c::CopyFrom(const mail_look_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.mail_look_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_look_ca_c::IsInitialized() const {
  return true;
}

void mail_look_ca_c::InternalSwap(mail_look_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mail_look_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class mail_look_ca_s::_Internal {
 public:
};

mail_look_ca_s::mail_look_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.mail_look_ca_s)
}
mail_look_ca_s::mail_look_ca_s(const mail_look_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&result_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.mail_look_ca_s)
}

void mail_look_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&result_)) + sizeof(state_));
}

mail_look_ca_s::~mail_look_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.mail_look_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mail_look_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mail_look_ca_s::ArenaDtor(void* object) {
  mail_look_ca_s* _this = reinterpret_cast< mail_look_ca_s* >(object);
  (void)_this;
}
void mail_look_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mail_look_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mail_look_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.mail_look_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&result_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail_look_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mail_look_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.mail_look_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.mail_look_ca_s)
  return target;
}

size_t mail_look_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.mail_look_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mail_look_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.mail_look_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const mail_look_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mail_look_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.mail_look_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.mail_look_ca_s)
    MergeFrom(*source);
  }
}

void mail_look_ca_s::MergeFrom(const mail_look_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.mail_look_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void mail_look_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.mail_look_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_look_ca_s::CopyFrom(const mail_look_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.mail_look_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_look_ca_s::IsInitialized() const {
  return true;
}

void mail_look_ca_s::InternalSwap(mail_look_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mail_look_ca_s, state_)
      + sizeof(mail_look_ca_s::state_)
      - PROTOBUF_FIELD_OFFSET(mail_look_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mail_look_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sms_ca_c::_Internal {
 public:
};

sms_ca_c::sms_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.sms_ca_c)
}
sms_ca_c::sms_ca_c(const sms_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.sms_ca_c)
}

void sms_ca_c::SharedCtor() {
phone_ = PROTOBUF_LONGLONG(0);
}

sms_ca_c::~sms_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.sms_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sms_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sms_ca_c::ArenaDtor(void* object) {
  sms_ca_c* _this = reinterpret_cast< sms_ca_c* >(object);
  (void)_this;
}
void sms_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sms_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sms_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.sms_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sms_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sms_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.sms_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.sms_ca_c)
  return target;
}

size_t sms_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.sms_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sms_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.sms_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const sms_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sms_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.sms_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.sms_ca_c)
    MergeFrom(*source);
  }
}

void sms_ca_c::MergeFrom(const sms_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.sms_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void sms_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.sms_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sms_ca_c::CopyFrom(const sms_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.sms_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sms_ca_c::IsInitialized() const {
  return true;
}

void sms_ca_c::InternalSwap(sms_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sms_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sms_ca_s::_Internal {
 public:
};

sms_ca_s::sms_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.sms_ca_s)
}
sms_ca_s::sms_ca_s(const sms_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&result_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.sms_ca_s)
}

void sms_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&result_)) + sizeof(code_));
}

sms_ca_s::~sms_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.sms_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sms_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sms_ca_s::ArenaDtor(void* object) {
  sms_ca_s* _this = reinterpret_cast< sms_ca_s* >(object);
  (void)_this;
}
void sms_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sms_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sms_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.sms_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&result_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sms_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sms_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.sms_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.sms_ca_s)
  return target;
}

size_t sms_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.sms_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sms_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.sms_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const sms_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sms_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.sms_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.sms_ca_s)
    MergeFrom(*source);
  }
}

void sms_ca_s::MergeFrom(const sms_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.sms_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void sms_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.sms_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sms_ca_s::CopyFrom(const sms_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.sms_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sms_ca_s::IsInitialized() const {
  return true;
}

void sms_ca_s::InternalSwap(sms_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sms_ca_s, code_)
      + sizeof(sms_ca_s::code_)
      - PROTOBUF_FIELD_OFFSET(sms_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sms_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class updata_pwd_ca_c::_Internal {
 public:
};

updata_pwd_ca_c::updata_pwd_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.updata_pwd_ca_c)
}
updata_pwd_ca_c::updata_pwd_ca_c(const updata_pwd_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newpwd().empty()) {
    newpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newpwd(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&phone_) -
    reinterpret_cast<char*>(&code_)) + sizeof(phone_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.updata_pwd_ca_c)
}

void updata_pwd_ca_c::SharedCtor() {
newpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phone_) -
    reinterpret_cast<char*>(&code_)) + sizeof(phone_));
}

updata_pwd_ca_c::~updata_pwd_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.updata_pwd_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void updata_pwd_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newpwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void updata_pwd_ca_c::ArenaDtor(void* object) {
  updata_pwd_ca_c* _this = reinterpret_cast< updata_pwd_ca_c* >(object);
  (void)_this;
}
void updata_pwd_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void updata_pwd_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void updata_pwd_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.updata_pwd_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newpwd_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phone_) -
      reinterpret_cast<char*>(&code_)) + sizeof(phone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* updata_pwd_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newpwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newpwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.updata_pwd_ca_c.newpwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* updata_pwd_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.updata_pwd_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string newpwd = 2;
  if (this->newpwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpwd().data(), static_cast<int>(this->_internal_newpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.updata_pwd_ca_c.newpwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newpwd(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 phone = 4;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.updata_pwd_ca_c)
  return target;
}

size_t updata_pwd_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.updata_pwd_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newpwd = 2;
  if (this->newpwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpwd());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int64 phone = 4;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void updata_pwd_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.updata_pwd_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const updata_pwd_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<updata_pwd_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.updata_pwd_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.updata_pwd_ca_c)
    MergeFrom(*source);
  }
}

void updata_pwd_ca_c::MergeFrom(const updata_pwd_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.updata_pwd_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newpwd().size() > 0) {
    _internal_set_newpwd(from._internal_newpwd());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void updata_pwd_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.updata_pwd_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updata_pwd_ca_c::CopyFrom(const updata_pwd_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.updata_pwd_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updata_pwd_ca_c::IsInitialized() const {
  return true;
}

void updata_pwd_ca_c::InternalSwap(updata_pwd_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  newpwd_.Swap(&other->newpwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(updata_pwd_ca_c, phone_)
      + sizeof(updata_pwd_ca_c::phone_)
      - PROTOBUF_FIELD_OFFSET(updata_pwd_ca_c, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata updata_pwd_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class updata_pwd_ca_s::_Internal {
 public:
};

updata_pwd_ca_s::updata_pwd_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.updata_pwd_ca_s)
}
updata_pwd_ca_s::updata_pwd_ca_s(const updata_pwd_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.updata_pwd_ca_s)
}

void updata_pwd_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(type_));
}

updata_pwd_ca_s::~updata_pwd_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.updata_pwd_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void updata_pwd_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void updata_pwd_ca_s::ArenaDtor(void* object) {
  updata_pwd_ca_s* _this = reinterpret_cast< updata_pwd_ca_s* >(object);
  (void)_this;
}
void updata_pwd_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void updata_pwd_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void updata_pwd_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.updata_pwd_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* updata_pwd_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* updata_pwd_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.updata_pwd_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.updata_pwd_ca_s)
  return target;
}

size_t updata_pwd_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.updata_pwd_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void updata_pwd_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.updata_pwd_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const updata_pwd_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<updata_pwd_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.updata_pwd_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.updata_pwd_ca_s)
    MergeFrom(*source);
  }
}

void updata_pwd_ca_s::MergeFrom(const updata_pwd_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.updata_pwd_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void updata_pwd_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.updata_pwd_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updata_pwd_ca_s::CopyFrom(const updata_pwd_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.updata_pwd_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updata_pwd_ca_s::IsInitialized() const {
  return true;
}

void updata_pwd_ca_s::InternalSwap(updata_pwd_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(updata_pwd_ca_s, type_)
      + sizeof(updata_pwd_ca_s::type_)
      - PROTOBUF_FIELD_OFFSET(updata_pwd_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata updata_pwd_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class official_info_ca_s::_Internal {
 public:
};

official_info_ca_s::official_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.official_info_ca_s)
}
official_info_ca_s::official_info_ca_s(const official_info_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ailpay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ailpay_name().empty()) {
    ailpay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ailpay_name(), 
      GetArena());
  }
  ailpay_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ailpay_account().empty()) {
    ailpay_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ailpay_account(), 
      GetArena());
  }
  ail_qr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ail_qr().empty()) {
    ail_qr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ail_qr(), 
      GetArena());
  }
  bank_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_card().empty()) {
    bank_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_card(), 
      GetArena());
  }
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_name().empty()) {
    bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_name(), 
      GetArena());
  }
  bank_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_account().empty()) {
    bank_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_account(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.official_info_ca_s)
}

void official_info_ca_s::SharedCtor() {
ailpay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ailpay_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ail_qr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

official_info_ca_s::~official_info_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.official_info_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void official_info_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ailpay_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ailpay_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ail_qr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void official_info_ca_s::ArenaDtor(void* object) {
  official_info_ca_s* _this = reinterpret_cast< official_info_ca_s* >(object);
  (void)_this;
}
void official_info_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void official_info_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void official_info_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.official_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ailpay_name_.ClearToEmpty();
  ailpay_account_.ClearToEmpty();
  ail_qr_.ClearToEmpty();
  bank_card_.ClearToEmpty();
  bank_name_.ClearToEmpty();
  bank_account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* official_info_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ailpay_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ailpay_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.official_info_ca_s.ailpay_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ailpay_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ailpay_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.official_info_ca_s.ailpay_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ail_qr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ail_qr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.official_info_ca_s.ail_qr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_card = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bank_card();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.official_info_ca_s.bank_card"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bank_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.official_info_ca_s.bank_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_account = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bank_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.official_info_ca_s.bank_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* official_info_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.official_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ailpay_name = 1;
  if (this->ailpay_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ailpay_name().data(), static_cast<int>(this->_internal_ailpay_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.official_info_ca_s.ailpay_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ailpay_name(), target);
  }

  // string ailpay_account = 2;
  if (this->ailpay_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ailpay_account().data(), static_cast<int>(this->_internal_ailpay_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.official_info_ca_s.ailpay_account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ailpay_account(), target);
  }

  // string ail_qr = 3;
  if (this->ail_qr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ail_qr().data(), static_cast<int>(this->_internal_ail_qr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.official_info_ca_s.ail_qr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ail_qr(), target);
  }

  // string bank_card = 4;
  if (this->bank_card().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_card().data(), static_cast<int>(this->_internal_bank_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.official_info_ca_s.bank_card");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bank_card(), target);
  }

  // string bank_name = 5;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_name().data(), static_cast<int>(this->_internal_bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.official_info_ca_s.bank_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bank_name(), target);
  }

  // string bank_account = 6;
  if (this->bank_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_account().data(), static_cast<int>(this->_internal_bank_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.official_info_ca_s.bank_account");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bank_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.official_info_ca_s)
  return target;
}

size_t official_info_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.official_info_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ailpay_name = 1;
  if (this->ailpay_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ailpay_name());
  }

  // string ailpay_account = 2;
  if (this->ailpay_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ailpay_account());
  }

  // string ail_qr = 3;
  if (this->ail_qr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ail_qr());
  }

  // string bank_card = 4;
  if (this->bank_card().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_card());
  }

  // string bank_name = 5;
  if (this->bank_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_name());
  }

  // string bank_account = 6;
  if (this->bank_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void official_info_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.official_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const official_info_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<official_info_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.official_info_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.official_info_ca_s)
    MergeFrom(*source);
  }
}

void official_info_ca_s::MergeFrom(const official_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.official_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ailpay_name().size() > 0) {
    _internal_set_ailpay_name(from._internal_ailpay_name());
  }
  if (from.ailpay_account().size() > 0) {
    _internal_set_ailpay_account(from._internal_ailpay_account());
  }
  if (from.ail_qr().size() > 0) {
    _internal_set_ail_qr(from._internal_ail_qr());
  }
  if (from.bank_card().size() > 0) {
    _internal_set_bank_card(from._internal_bank_card());
  }
  if (from.bank_name().size() > 0) {
    _internal_set_bank_name(from._internal_bank_name());
  }
  if (from.bank_account().size() > 0) {
    _internal_set_bank_account(from._internal_bank_account());
  }
}

void official_info_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.official_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void official_info_ca_s::CopyFrom(const official_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.official_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool official_info_ca_s::IsInitialized() const {
  return true;
}

void official_info_ca_s::InternalSwap(official_info_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ailpay_name_.Swap(&other->ailpay_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ailpay_account_.Swap(&other->ailpay_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ail_qr_.Swap(&other->ail_qr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_card_.Swap(&other->bank_card_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_account_.Swap(&other->bank_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata official_info_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class register_ca_c::_Internal {
 public:
};

register_ca_c::register_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.register_ca_c)
}
register_ca_c::register_ca_c(const register_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArena());
  }
  invite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite().empty()) {
    invite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.register_ca_c)
}

void register_ca_c::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
}

register_ca_c::~register_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.register_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void register_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void register_ca_c::ArenaDtor(void* object) {
  register_ca_c* _this = reinterpret_cast< register_ca_c* >(object);
  (void)_this;
}
void register_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.register_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  pwd_.ClearToEmpty();
  invite_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.register_ca_c.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.register_ca_c.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_invite();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.register_ca_c.invite"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.register_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string nichen = 3;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.register_ca_c.nichen");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nichen(), target);
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.register_ca_c.pwd");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pwd(), target);
  }

  // int32 trade = 5;
  if (this->trade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_trade(), target);
  }

  // string invite = 6;
  if (this->invite().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite().data(), static_cast<int>(this->_internal_invite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.register_ca_c.invite");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_invite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.register_ca_c)
  return target;
}

size_t register_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.register_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 3;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string pwd = 4;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string invite = 6;
  if (this->invite().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 trade = 5;
  if (this->trade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void register_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.register_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const register_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.register_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.register_ca_c)
    MergeFrom(*source);
  }
}

void register_ca_c::MergeFrom(const register_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.register_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.invite().size() > 0) {
    _internal_set_invite(from._internal_invite());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.trade() != 0) {
    _internal_set_trade(from._internal_trade());
  }
}

void register_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.register_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_ca_c::CopyFrom(const register_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.register_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_ca_c::IsInitialized() const {
  return true;
}

void register_ca_c::InternalSwap(register_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invite_.Swap(&other->invite_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(register_ca_c, trade_)
      + sizeof(register_ca_c::trade_)
      - PROTOBUF_FIELD_OFFSET(register_ca_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata register_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class register_ca_s::_Internal {
 public:
};

register_ca_s::register_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.register_ca_s)
}
register_ca_s::register_ca_s(const register_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.register_ca_s)
}

void register_ca_s::SharedCtor() {
result_ = 0;
}

register_ca_s::~register_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.register_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void register_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void register_ca_s::ArenaDtor(void* object) {
  register_ca_s* _this = reinterpret_cast< register_ca_s* >(object);
  (void)_this;
}
void register_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.register_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.register_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.register_ca_s)
  return target;
}

size_t register_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.register_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void register_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.register_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const register_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.register_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.register_ca_s)
    MergeFrom(*source);
  }
}

void register_ca_s::MergeFrom(const register_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.register_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void register_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.register_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_ca_s::CopyFrom(const register_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.register_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_ca_s::IsInitialized() const {
  return true;
}

void register_ca_s::InternalSwap(register_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_list_ca_s_item::_Internal {
 public:
};

booking_list_ca_s_item::booking_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_list_ca_s.item)
}
booking_list_ca_s_item::booking_list_ca_s_item(const booking_list_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_list_ca_s.item)
}

void booking_list_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
}

booking_list_ca_s_item::~booking_list_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_list_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_list_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_list_ca_s_item::ArenaDtor(void* object) {
  booking_list_ca_s_item* _this = reinterpret_cast< booking_list_ca_s_item* >(object);
  (void)_this;
}
void booking_list_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_list_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_list_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_list_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_list_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_contract_type(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_list_ca_s.item)
  return target;
}

size_t booking_list_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_list_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_list_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_list_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_list_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_list_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_list_ca_s.item)
    MergeFrom(*source);
  }
}

void booking_list_ca_s_item::MergeFrom(const booking_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void booking_list_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_list_ca_s_item::CopyFrom(const booking_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_list_ca_s_item::IsInitialized() const {
  return true;
}

void booking_list_ca_s_item::InternalSwap(booking_list_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(booking_list_ca_s_item, time_)
      + sizeof(booking_list_ca_s_item::time_)
      - PROTOBUF_FIELD_OFFSET(booking_list_ca_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_list_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_list_ca_s::_Internal {
 public:
};

booking_list_ca_s::booking_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_list_ca_s)
}
booking_list_ca_s::booking_list_ca_s(const booking_list_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_list_ca_s)
}

void booking_list_ca_s::SharedCtor() {
}

booking_list_ca_s::~booking_list_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_list_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_list_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_list_ca_s::ArenaDtor(void* object) {
  booking_list_ca_s* _this = reinterpret_cast< booking_list_ca_s* >(object);
  (void)_this;
}
void booking_list_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_list_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_list_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_list_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.booking_list_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_list_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.booking_list_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_list_ca_s)
  return target;
}

size_t booking_list_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_list_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.booking_list_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_list_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_list_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_list_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_list_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_list_ca_s)
    MergeFrom(*source);
  }
}

void booking_list_ca_s::MergeFrom(const booking_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void booking_list_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_list_ca_s::CopyFrom(const booking_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_list_ca_s::IsInitialized() const {
  return true;
}

void booking_list_ca_s::InternalSwap(booking_list_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_list_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_rob_ca_s_item::_Internal {
 public:
};

contract_rob_ca_s_item::contract_rob_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_rob_ca_s.item)
}
contract_rob_ca_s_item::contract_rob_ca_s_item(const contract_rob_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&contract_type_, &from.contract_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rob_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(rob_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_rob_ca_s.item)
}

void contract_rob_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contract_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rob_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(rob_));
}

contract_rob_ca_s_item::~contract_rob_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_rob_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_rob_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_rob_ca_s_item::ArenaDtor(void* object) {
  contract_rob_ca_s_item* _this = reinterpret_cast< contract_rob_ca_s_item* >(object);
  (void)_this;
}
void contract_rob_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_rob_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_rob_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_rob_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&contract_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rob_) -
      reinterpret_cast<char*>(&contract_type_)) + sizeof(rob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_rob_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contract_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_rob_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_rob_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contract_type(), target);
  }

  // int32 rob = 2;
  if (this->rob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_rob_ca_s.item)
  return target;
}

size_t contract_rob_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_rob_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 rob = 2;
  if (this->rob() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_rob_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_rob_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_rob_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_rob_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_rob_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_rob_ca_s.item)
    MergeFrom(*source);
  }
}

void contract_rob_ca_s_item::MergeFrom(const contract_rob_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_rob_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.rob() != 0) {
    _internal_set_rob(from._internal_rob());
  }
}

void contract_rob_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_rob_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_rob_ca_s_item::CopyFrom(const contract_rob_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_rob_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_rob_ca_s_item::IsInitialized() const {
  return true;
}

void contract_rob_ca_s_item::InternalSwap(contract_rob_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(contract_rob_ca_s_item, rob_)
      + sizeof(contract_rob_ca_s_item::rob_)
      - PROTOBUF_FIELD_OFFSET(contract_rob_ca_s_item, contract_type_)>(
          reinterpret_cast<char*>(&contract_type_),
          reinterpret_cast<char*>(&other->contract_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_rob_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_rob_ca_s::_Internal {
 public:
};

contract_rob_ca_s::contract_rob_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_rob_ca_s)
}
contract_rob_ca_s::contract_rob_ca_s(const contract_rob_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_rob_ca_s)
}

void contract_rob_ca_s::SharedCtor() {
}

contract_rob_ca_s::~contract_rob_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_rob_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_rob_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_rob_ca_s::ArenaDtor(void* object) {
  contract_rob_ca_s* _this = reinterpret_cast< contract_rob_ca_s* >(object);
  (void)_this;
}
void contract_rob_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_rob_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_rob_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_rob_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_rob_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.contract_rob_ca_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_rob_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_rob_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.contract_rob_ca_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_rob_ca_s)
  return target;
}

size_t contract_rob_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_rob_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.contract_rob_ca_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_rob_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_rob_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_rob_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_rob_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_rob_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_rob_ca_s)
    MergeFrom(*source);
  }
}

void contract_rob_ca_s::MergeFrom(const contract_rob_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_rob_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void contract_rob_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_rob_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_rob_ca_s::CopyFrom(const contract_rob_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_rob_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_rob_ca_s::IsInitialized() const {
  return true;
}

void contract_rob_ca_s::InternalSwap(contract_rob_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_rob_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_ca_c::_Internal {
 public:
};

booking_ca_c::booking_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_ca_c)
}
booking_ca_c::booking_ca_c(const booking_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_type_ = from.contract_type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_ca_c)
}

void booking_ca_c::SharedCtor() {
contract_type_ = 0;
}

booking_ca_c::~booking_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_ca_c::ArenaDtor(void* object) {
  booking_ca_c* _this = reinterpret_cast< booking_ca_c* >(object);
  (void)_this;
}
void booking_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contract_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contract_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_ca_c)
  return target;
}

size_t booking_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_ca_c)
    MergeFrom(*source);
  }
}

void booking_ca_c::MergeFrom(const booking_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
}

void booking_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_ca_c::CopyFrom(const booking_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_ca_c::IsInitialized() const {
  return true;
}

void booking_ca_c::InternalSwap(booking_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(contract_type_, other->contract_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_ca_s::_Internal {
 public:
};

booking_ca_s::booking_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_ca_s)
}
booking_ca_s::booking_ca_s(const booking_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_dispatch_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(curr_dispatch_coin_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_ca_s)
}

void booking_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_dispatch_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(curr_dispatch_coin_));
}

booking_ca_s::~booking_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_ca_s::ArenaDtor(void* object) {
  booking_ca_s* _this = reinterpret_cast< booking_ca_s* >(object);
  (void)_this;
}
void booking_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_dispatch_coin_) -
      reinterpret_cast<char*>(&result_)) + sizeof(curr_dispatch_coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_dispatch_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curr_dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 curr_dispatch_coin = 2;
  if (this->curr_dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curr_dispatch_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_ca_s)
  return target;
}

size_t booking_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 curr_dispatch_coin = 2;
  if (this->curr_dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_dispatch_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_ca_s)
    MergeFrom(*source);
  }
}

void booking_ca_s::MergeFrom(const booking_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.curr_dispatch_coin() != 0) {
    _internal_set_curr_dispatch_coin(from._internal_curr_dispatch_coin());
  }
}

void booking_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_ca_s::CopyFrom(const booking_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_ca_s::IsInitialized() const {
  return true;
}

void booking_ca_s::InternalSwap(booking_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(booking_ca_s, curr_dispatch_coin_)
      + sizeof(booking_ca_s::curr_dispatch_coin_)
      - PROTOBUF_FIELD_OFFSET(booking_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class rob_ca_c::_Internal {
 public:
};

rob_ca_c::rob_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.rob_ca_c)
}
rob_ca_c::rob_ca_c(const rob_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_type_ = from.contract_type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.rob_ca_c)
}

void rob_ca_c::SharedCtor() {
contract_type_ = 0;
}

rob_ca_c::~rob_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.rob_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rob_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rob_ca_c::ArenaDtor(void* object) {
  rob_ca_c* _this = reinterpret_cast< rob_ca_c* >(object);
  (void)_this;
}
void rob_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rob_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void rob_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.rob_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rob_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contract_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rob_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.rob_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contract_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.rob_ca_c)
  return target;
}

size_t rob_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.rob_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rob_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.rob_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const rob_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rob_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.rob_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.rob_ca_c)
    MergeFrom(*source);
  }
}

void rob_ca_c::MergeFrom(const rob_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.rob_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
}

void rob_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.rob_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rob_ca_c::CopyFrom(const rob_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.rob_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rob_ca_c::IsInitialized() const {
  return true;
}

void rob_ca_c::InternalSwap(rob_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(contract_type_, other->contract_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rob_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class rob_ca_s::_Internal {
 public:
};

rob_ca_s::rob_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.rob_ca_s)
}
rob_ca_s::rob_ca_s(const rob_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_dispatch_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(curr_dispatch_coin_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.rob_ca_s)
}

void rob_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_dispatch_coin_) -
    reinterpret_cast<char*>(&result_)) + sizeof(curr_dispatch_coin_));
}

rob_ca_s::~rob_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.rob_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rob_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rob_ca_s::ArenaDtor(void* object) {
  rob_ca_s* _this = reinterpret_cast< rob_ca_s* >(object);
  (void)_this;
}
void rob_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rob_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void rob_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.rob_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_dispatch_coin_) -
      reinterpret_cast<char*>(&result_)) + sizeof(curr_dispatch_coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rob_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_dispatch_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curr_dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rob_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.rob_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 curr_dispatch_coin = 2;
  if (this->curr_dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curr_dispatch_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.rob_ca_s)
  return target;
}

size_t rob_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.rob_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 curr_dispatch_coin = 2;
  if (this->curr_dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_dispatch_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rob_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.rob_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const rob_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rob_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.rob_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.rob_ca_s)
    MergeFrom(*source);
  }
}

void rob_ca_s::MergeFrom(const rob_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.rob_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.curr_dispatch_coin() != 0) {
    _internal_set_curr_dispatch_coin(from._internal_curr_dispatch_coin());
  }
}

void rob_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.rob_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rob_ca_s::CopyFrom(const rob_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.rob_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rob_ca_s::IsInitialized() const {
  return true;
}

void rob_ca_s::InternalSwap(rob_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rob_ca_s, curr_dispatch_coin_)
      + sizeof(rob_ca_s::curr_dispatch_coin_)
      - PROTOBUF_FIELD_OFFSET(rob_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rob_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_list_ca_c::_Internal {
 public:
};

order_list_ca_c::order_list_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_list_ca_c)
}
order_list_ca_c::order_list_ca_c(const order_list_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_list_ca_c)
}

void order_list_ca_c::SharedCtor() {
type_ = 0;
}

order_list_ca_c::~order_list_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_list_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_list_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_list_ca_c::ArenaDtor(void* object) {
  order_list_ca_c* _this = reinterpret_cast< order_list_ca_c* >(object);
  (void)_this;
}
void order_list_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_list_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_list_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_list_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_list_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_list_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_list_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_list_ca_c)
  return target;
}

size_t order_list_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_list_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_list_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_list_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const order_list_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_list_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_list_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_list_ca_c)
    MergeFrom(*source);
  }
}

void order_list_ca_c::MergeFrom(const order_list_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_list_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void order_list_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_list_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_list_ca_c::CopyFrom(const order_list_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_list_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_list_ca_c::IsInitialized() const {
  return true;
}

void order_list_ca_c::InternalSwap(order_list_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata order_list_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_list_ca_s_item::_Internal {
 public:
};

order_list_ca_s_item::order_list_ca_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_list_ca_s.item)
}
order_list_ca_s_item::order_list_ca_s_item(const order_list_ca_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_phone_) -
    reinterpret_cast<char*>(&id_)) + sizeof(buy_phone_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_list_ca_s.item)
}

void order_list_ca_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buy_phone_) -
    reinterpret_cast<char*>(&id_)) + sizeof(buy_phone_));
}

order_list_ca_s_item::~order_list_ca_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_list_ca_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_list_ca_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_list_ca_s_item::ArenaDtor(void* object) {
  order_list_ca_s_item* _this = reinterpret_cast< order_list_ca_s_item* >(object);
  (void)_this;
}
void order_list_ca_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_list_ca_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_list_ca_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_phone_) -
      reinterpret_cast<char*>(&id_)) + sizeof(buy_phone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_list_ca_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 robtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          robtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 paytime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          paytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oktime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          oktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_phone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sell_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buy_phone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          buy_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_list_ca_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_list_ca_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_contract_type(), target);
  }

  // int32 robtime = 3;
  if (this->robtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_robtime(), target);
  }

  // int32 paytime = 4;
  if (this->paytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_paytime(), target);
  }

  // int32 oktime = 5;
  if (this->oktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_oktime(), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_state(), target);
  }

  // int64 sell_phone = 7;
  if (this->sell_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_sell_phone(), target);
  }

  // int64 buy_phone = 8;
  if (this->buy_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_buy_phone(), target);
  }

  // float price = 9;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_list_ca_s.item)
  return target;
}

size_t order_list_ca_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_list_ca_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 robtime = 3;
  if (this->robtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robtime());
  }

  // int32 paytime = 4;
  if (this->paytime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_paytime());
  }

  // int32 oktime = 5;
  if (this->oktime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oktime());
  }

  // int64 sell_phone = 7;
  if (this->sell_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_phone());
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // float price = 9;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 buy_phone = 8;
  if (this->buy_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buy_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_list_ca_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const order_list_ca_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_list_ca_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_list_ca_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_list_ca_s.item)
    MergeFrom(*source);
  }
}

void order_list_ca_s_item::MergeFrom(const order_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_list_ca_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.robtime() != 0) {
    _internal_set_robtime(from._internal_robtime());
  }
  if (from.paytime() != 0) {
    _internal_set_paytime(from._internal_paytime());
  }
  if (from.oktime() != 0) {
    _internal_set_oktime(from._internal_oktime());
  }
  if (from.sell_phone() != 0) {
    _internal_set_sell_phone(from._internal_sell_phone());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.buy_phone() != 0) {
    _internal_set_buy_phone(from._internal_buy_phone());
  }
}

void order_list_ca_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_list_ca_s_item::CopyFrom(const order_list_ca_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_list_ca_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_list_ca_s_item::IsInitialized() const {
  return true;
}

void order_list_ca_s_item::InternalSwap(order_list_ca_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(order_list_ca_s_item, buy_phone_)
      + sizeof(order_list_ca_s_item::buy_phone_)
      - PROTOBUF_FIELD_OFFSET(order_list_ca_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata order_list_ca_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_list_ca_s::_Internal {
 public:
};

order_list_ca_s::order_list_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_list_ca_s)
}
order_list_ca_s::order_list_ca_s(const order_list_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_list_ca_s)
}

void order_list_ca_s::SharedCtor() {
type_ = 0;
}

order_list_ca_s::~order_list_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_list_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_list_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_list_ca_s::ArenaDtor(void* object) {
  order_list_ca_s* _this = reinterpret_cast< order_list_ca_s* >(object);
  (void)_this;
}
void order_list_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_list_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_list_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_list_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.order_list_ca_s.item its = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_list_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_list_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .frmpub.protocc.order_list_ca_s.item its = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_list_ca_s)
  return target;
}

size_t order_list_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_list_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.order_list_ca_s.item its = 2;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_list_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const order_list_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_list_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_list_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_list_ca_s)
    MergeFrom(*source);
  }
}

void order_list_ca_s::MergeFrom(const order_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_list_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void order_list_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_list_ca_s::CopyFrom(const order_list_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_list_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_list_ca_s::IsInitialized() const {
  return true;
}

void order_list_ca_s::InternalSwap(order_list_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata order_list_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sell_info_ca_c::_Internal {
 public:
};

sell_info_ca_c::sell_info_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.sell_info_ca_c)
}
sell_info_ca_c::sell_info_ca_c(const sell_info_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sell_phone_ = from.sell_phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.sell_info_ca_c)
}

void sell_info_ca_c::SharedCtor() {
sell_phone_ = PROTOBUF_LONGLONG(0);
}

sell_info_ca_c::~sell_info_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.sell_info_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sell_info_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sell_info_ca_c::ArenaDtor(void* object) {
  sell_info_ca_c* _this = reinterpret_cast< sell_info_ca_c* >(object);
  (void)_this;
}
void sell_info_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sell_info_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sell_info_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.sell_info_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sell_phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sell_info_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sell_phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sell_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sell_info_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.sell_info_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sell_phone = 1;
  if (this->sell_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sell_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.sell_info_ca_c)
  return target;
}

size_t sell_info_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.sell_info_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sell_phone = 1;
  if (this->sell_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sell_info_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.sell_info_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const sell_info_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sell_info_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.sell_info_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.sell_info_ca_c)
    MergeFrom(*source);
  }
}

void sell_info_ca_c::MergeFrom(const sell_info_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.sell_info_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sell_phone() != 0) {
    _internal_set_sell_phone(from._internal_sell_phone());
  }
}

void sell_info_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.sell_info_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_info_ca_c::CopyFrom(const sell_info_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.sell_info_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_info_ca_c::IsInitialized() const {
  return true;
}

void sell_info_ca_c::InternalSwap(sell_info_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sell_phone_, other->sell_phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sell_info_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sell_info_ca_s::_Internal {
 public:
};

sell_info_ca_s::sell_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.sell_info_ca_s)
}
sell_info_ca_s::sell_info_ca_s(const sell_info_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_name().empty()) {
    bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_name(), 
      GetArena());
  }
  bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_cardid().empty()) {
    bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_cardid(), 
      GetArena());
  }
  bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_user_name().empty()) {
    bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_user_name(), 
      GetArena());
  }
  ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ailpay_id().empty()) {
    ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ailpay_id(), 
      GetArena());
  }
  alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alipay_name().empty()) {
    alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alipay_name(), 
      GetArena());
  }
  webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_webchat_name().empty()) {
    webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webchat_name(), 
      GetArena());
  }
  sell_phone_ = from.sell_phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.sell_info_ca_s)
}

void sell_info_ca_s::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_phone_ = PROTOBUF_LONGLONG(0);
}

sell_info_ca_s::~sell_info_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.sell_info_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sell_info_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_cardid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ailpay_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alipay_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webchat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sell_info_ca_s::ArenaDtor(void* object) {
  sell_info_ca_s* _this = reinterpret_cast< sell_info_ca_s* >(object);
  (void)_this;
}
void sell_info_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sell_info_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sell_info_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.sell_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  bank_name_.ClearToEmpty();
  bank_cardid_.ClearToEmpty();
  bank_user_name_.ClearToEmpty();
  ailpay_id_.ClearToEmpty();
  alipay_name_.ClearToEmpty();
  webchat_name_.ClearToEmpty();
  sell_phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sell_info_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nichen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sell_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bank_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.bank_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_cardid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bank_cardid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.bank_cardid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_user_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bank_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.bank_user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ailpay_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ailpay_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.ailpay_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alipay_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_alipay_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.alipay_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string webchat_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_webchat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.sell_info_ca_s.webchat_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sell_info_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.sell_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nichen = 1;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.nichen");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nichen(), target);
  }

  // int64 sell_phone = 2;
  if (this->sell_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sell_phone(), target);
  }

  // string bank_name = 3;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_name().data(), static_cast<int>(this->_internal_bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.bank_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bank_name(), target);
  }

  // string bank_cardid = 4;
  if (this->bank_cardid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_cardid().data(), static_cast<int>(this->_internal_bank_cardid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.bank_cardid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bank_cardid(), target);
  }

  // string bank_user_name = 5;
  if (this->bank_user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_user_name().data(), static_cast<int>(this->_internal_bank_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.bank_user_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bank_user_name(), target);
  }

  // string ailpay_id = 6;
  if (this->ailpay_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ailpay_id().data(), static_cast<int>(this->_internal_ailpay_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.ailpay_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ailpay_id(), target);
  }

  // string alipay_name = 7;
  if (this->alipay_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alipay_name().data(), static_cast<int>(this->_internal_alipay_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.alipay_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_alipay_name(), target);
  }

  // string webchat_name = 8;
  if (this->webchat_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webchat_name().data(), static_cast<int>(this->_internal_webchat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.sell_info_ca_s.webchat_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_webchat_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.sell_info_ca_s)
  return target;
}

size_t sell_info_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.sell_info_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 1;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string bank_name = 3;
  if (this->bank_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_name());
  }

  // string bank_cardid = 4;
  if (this->bank_cardid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_cardid());
  }

  // string bank_user_name = 5;
  if (this->bank_user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_user_name());
  }

  // string ailpay_id = 6;
  if (this->ailpay_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ailpay_id());
  }

  // string alipay_name = 7;
  if (this->alipay_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alipay_name());
  }

  // string webchat_name = 8;
  if (this->webchat_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webchat_name());
  }

  // int64 sell_phone = 2;
  if (this->sell_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sell_info_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.sell_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const sell_info_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sell_info_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.sell_info_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.sell_info_ca_s)
    MergeFrom(*source);
  }
}

void sell_info_ca_s::MergeFrom(const sell_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.sell_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.bank_name().size() > 0) {
    _internal_set_bank_name(from._internal_bank_name());
  }
  if (from.bank_cardid().size() > 0) {
    _internal_set_bank_cardid(from._internal_bank_cardid());
  }
  if (from.bank_user_name().size() > 0) {
    _internal_set_bank_user_name(from._internal_bank_user_name());
  }
  if (from.ailpay_id().size() > 0) {
    _internal_set_ailpay_id(from._internal_ailpay_id());
  }
  if (from.alipay_name().size() > 0) {
    _internal_set_alipay_name(from._internal_alipay_name());
  }
  if (from.webchat_name().size() > 0) {
    _internal_set_webchat_name(from._internal_webchat_name());
  }
  if (from.sell_phone() != 0) {
    _internal_set_sell_phone(from._internal_sell_phone());
  }
}

void sell_info_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.sell_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_info_ca_s::CopyFrom(const sell_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.sell_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_info_ca_s::IsInitialized() const {
  return true;
}

void sell_info_ca_s::InternalSwap(sell_info_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_cardid_.Swap(&other->bank_cardid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_user_name_.Swap(&other->bank_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ailpay_id_.Swap(&other->ailpay_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alipay_name_.Swap(&other->alipay_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webchat_name_.Swap(&other->webchat_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sell_phone_, other->sell_phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sell_info_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_order_ca_c::_Internal {
 public:
};

pay_order_ca_c::pay_order_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_order_ca_c)
}
pay_order_ca_c::pay_order_ca_c(const pay_order_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pay_voucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pay_voucher().empty()) {
    pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pay_voucher(), 
      GetArena());
  }
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_order_ca_c)
}

void pay_order_ca_c::SharedCtor() {
pay_voucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
order_id_ = PROTOBUF_LONGLONG(0);
}

pay_order_ca_c::~pay_order_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_order_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_order_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pay_voucher_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pay_order_ca_c::ArenaDtor(void* object) {
  pay_order_ca_c* _this = reinterpret_cast< pay_order_ca_c* >(object);
  (void)_this;
}
void pay_order_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_order_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_order_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_order_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pay_voucher_.ClearToEmpty();
  order_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_order_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pay_voucher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pay_voucher();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_order_ca_c.pay_voucher"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_order_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_order_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 order_id = 1;
  if (this->order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_order_id(), target);
  }

  // string pay_voucher = 2;
  if (this->pay_voucher().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pay_voucher().data(), static_cast<int>(this->_internal_pay_voucher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_order_ca_c.pay_voucher");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pay_voucher(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_order_ca_c)
  return target;
}

size_t pay_order_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_order_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pay_voucher = 2;
  if (this->pay_voucher().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pay_voucher());
  }

  // int64 order_id = 1;
  if (this->order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_order_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_order_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_order_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_order_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_order_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_order_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_order_ca_c)
    MergeFrom(*source);
  }
}

void pay_order_ca_c::MergeFrom(const pay_order_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_order_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pay_voucher().size() > 0) {
    _internal_set_pay_voucher(from._internal_pay_voucher());
  }
  if (from.order_id() != 0) {
    _internal_set_order_id(from._internal_order_id());
  }
}

void pay_order_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_order_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_order_ca_c::CopyFrom(const pay_order_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_order_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_order_ca_c::IsInitialized() const {
  return true;
}

void pay_order_ca_c::InternalSwap(pay_order_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pay_voucher_.Swap(&other->pay_voucher_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(order_id_, other->order_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_order_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_order_ca_s::_Internal {
 public:
};

pay_order_ca_s::pay_order_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_order_ca_s)
}
pay_order_ca_s::pay_order_ca_s(const pay_order_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_order_ca_s)
}

void pay_order_ca_s::SharedCtor() {
result_ = 0;
}

pay_order_ca_s::~pay_order_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_order_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_order_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pay_order_ca_s::ArenaDtor(void* object) {
  pay_order_ca_s* _this = reinterpret_cast< pay_order_ca_s* >(object);
  (void)_this;
}
void pay_order_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_order_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_order_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_order_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_order_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_order_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_order_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_order_ca_s)
  return target;
}

size_t pay_order_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_order_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_order_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_order_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_order_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_order_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_order_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_order_ca_s)
    MergeFrom(*source);
  }
}

void pay_order_ca_s::MergeFrom(const pay_order_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_order_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void pay_order_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_order_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_order_ca_s::CopyFrom(const pay_order_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_order_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_order_ca_s::IsInitialized() const {
  return true;
}

void pay_order_ca_s::InternalSwap(pay_order_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_order_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class buy_info_ca_c::_Internal {
 public:
};

buy_info_ca_c::buy_info_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.buy_info_ca_c)
}
buy_info_ca_c::buy_info_ca_c(const buy_info_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.buy_info_ca_c)
}

void buy_info_ca_c::SharedCtor() {
order_id_ = PROTOBUF_LONGLONG(0);
}

buy_info_ca_c::~buy_info_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.buy_info_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void buy_info_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void buy_info_ca_c::ArenaDtor(void* object) {
  buy_info_ca_c* _this = reinterpret_cast< buy_info_ca_c* >(object);
  (void)_this;
}
void buy_info_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void buy_info_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void buy_info_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.buy_info_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* buy_info_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* buy_info_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.buy_info_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 order_id = 1;
  if (this->order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.buy_info_ca_c)
  return target;
}

size_t buy_info_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.buy_info_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 order_id = 1;
  if (this->order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_order_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void buy_info_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.buy_info_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const buy_info_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<buy_info_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.buy_info_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.buy_info_ca_c)
    MergeFrom(*source);
  }
}

void buy_info_ca_c::MergeFrom(const buy_info_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.buy_info_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id() != 0) {
    _internal_set_order_id(from._internal_order_id());
  }
}

void buy_info_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.buy_info_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_info_ca_c::CopyFrom(const buy_info_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.buy_info_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_info_ca_c::IsInitialized() const {
  return true;
}

void buy_info_ca_c::InternalSwap(buy_info_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_id_, other->order_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata buy_info_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class buy_info_ca_s::_Internal {
 public:
};

buy_info_ca_s::buy_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.buy_info_ca_s)
}
buy_info_ca_s::buy_info_ca_s(const buy_info_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  pay_voucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pay_voucher().empty()) {
    pay_voucher_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pay_voucher(), 
      GetArena());
  }
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.buy_info_ca_s)
}

void buy_info_ca_s::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pay_voucher_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_ = PROTOBUF_LONGLONG(0);
}

buy_info_ca_s::~buy_info_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.buy_info_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void buy_info_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pay_voucher_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void buy_info_ca_s::ArenaDtor(void* object) {
  buy_info_ca_s* _this = reinterpret_cast< buy_info_ca_s* >(object);
  (void)_this;
}
void buy_info_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void buy_info_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void buy_info_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.buy_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  pay_voucher_.ClearToEmpty();
  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* buy_info_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nichen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.buy_info_ca_s.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pay_voucher = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pay_voucher();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.buy_info_ca_s.pay_voucher"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* buy_info_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.buy_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nichen = 1;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.buy_info_ca_s.nichen");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nichen(), target);
  }

  // int64 phone = 2;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_phone(), target);
  }

  // string pay_voucher = 3;
  if (this->pay_voucher().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pay_voucher().data(), static_cast<int>(this->_internal_pay_voucher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.buy_info_ca_s.pay_voucher");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pay_voucher(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.buy_info_ca_s)
  return target;
}

size_t buy_info_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.buy_info_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 1;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string pay_voucher = 3;
  if (this->pay_voucher().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pay_voucher());
  }

  // int64 phone = 2;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void buy_info_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.buy_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const buy_info_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<buy_info_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.buy_info_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.buy_info_ca_s)
    MergeFrom(*source);
  }
}

void buy_info_ca_s::MergeFrom(const buy_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.buy_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.pay_voucher().size() > 0) {
    _internal_set_pay_voucher(from._internal_pay_voucher());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void buy_info_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.buy_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_info_ca_s::CopyFrom(const buy_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.buy_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_info_ca_s::IsInitialized() const {
  return true;
}

void buy_info_ca_s::InternalSwap(buy_info_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pay_voucher_.Swap(&other->pay_voucher_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata buy_info_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_oper_ca_c::_Internal {
 public:
};

order_oper_ca_c::order_oper_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_oper_ca_c)
}
order_oper_ca_c::order_oper_ca_c(const order_oper_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(trade_code_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_oper_ca_c)
}

void order_oper_ca_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_code_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(trade_code_));
}

order_oper_ca_c::~order_oper_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_oper_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_oper_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_oper_ca_c::ArenaDtor(void* object) {
  order_oper_ca_c* _this = reinterpret_cast< order_oper_ca_c* >(object);
  (void)_this;
}
void order_oper_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_oper_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_oper_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_oper_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_code_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(trade_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_oper_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oper_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oper_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trade_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_oper_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_oper_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 order_id = 1;
  if (this->order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_order_id(), target);
  }

  // int32 oper_type = 2;
  if (this->oper_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oper_type(), target);
  }

  // int32 trade_code = 3;
  if (this->trade_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_trade_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_oper_ca_c)
  return target;
}

size_t order_oper_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_oper_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 order_id = 1;
  if (this->order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_order_id());
  }

  // int32 oper_type = 2;
  if (this->oper_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oper_type());
  }

  // int32 trade_code = 3;
  if (this->trade_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_oper_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_oper_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const order_oper_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_oper_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_oper_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_oper_ca_c)
    MergeFrom(*source);
  }
}

void order_oper_ca_c::MergeFrom(const order_oper_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_oper_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order_id() != 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.oper_type() != 0) {
    _internal_set_oper_type(from._internal_oper_type());
  }
  if (from.trade_code() != 0) {
    _internal_set_trade_code(from._internal_trade_code());
  }
}

void order_oper_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_oper_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_oper_ca_c::CopyFrom(const order_oper_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_oper_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_oper_ca_c::IsInitialized() const {
  return true;
}

void order_oper_ca_c::InternalSwap(order_oper_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(order_oper_ca_c, trade_code_)
      + sizeof(order_oper_ca_c::trade_code_)
      - PROTOBUF_FIELD_OFFSET(order_oper_ca_c, order_id_)>(
          reinterpret_cast<char*>(&order_id_),
          reinterpret_cast<char*>(&other->order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata order_oper_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_oper_ca_s::_Internal {
 public:
};

order_oper_ca_s::order_oper_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_oper_ca_s)
}
order_oper_ca_s::order_oper_ca_s(const order_oper_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(oper_type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_oper_ca_s)
}

void order_oper_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(oper_type_));
}

order_oper_ca_s::~order_oper_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_oper_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_oper_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_oper_ca_s::ArenaDtor(void* object) {
  order_oper_ca_s* _this = reinterpret_cast< order_oper_ca_s* >(object);
  (void)_this;
}
void order_oper_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_oper_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_oper_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_oper_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(oper_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_oper_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oper_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oper_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_oper_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_oper_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 oper_type = 2;
  if (this->oper_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oper_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_oper_ca_s)
  return target;
}

size_t order_oper_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_oper_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 oper_type = 2;
  if (this->oper_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oper_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_oper_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_oper_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const order_oper_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_oper_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_oper_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_oper_ca_s)
    MergeFrom(*source);
  }
}

void order_oper_ca_s::MergeFrom(const order_oper_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_oper_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.oper_type() != 0) {
    _internal_set_oper_type(from._internal_oper_type());
  }
}

void order_oper_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_oper_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_oper_ca_s::CopyFrom(const order_oper_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_oper_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_oper_ca_s::IsInitialized() const {
  return true;
}

void order_oper_ca_s::InternalSwap(order_oper_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(order_oper_ca_s, oper_type_)
      + sizeof(order_oper_ca_s::oper_type_)
      - PROTOBUF_FIELD_OFFSET(order_oper_ca_s, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata order_oper_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class upload_ca_c::_Internal {
 public:
};

upload_ca_c::upload_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.upload_ca_c)
}
upload_ca_c::upload_ca_c(const upload_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.upload_ca_c)
}

void upload_ca_c::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

upload_ca_c::~upload_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.upload_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void upload_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void upload_ca_c::ArenaDtor(void* object) {
  upload_ca_c* _this = reinterpret_cast< upload_ca_c* >(object);
  (void)_this;
}
void upload_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void upload_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void upload_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.upload_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* upload_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.upload_ca_c.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* upload_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.upload_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.upload_ca_c.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.upload_ca_c)
  return target;
}

size_t upload_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.upload_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void upload_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.upload_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const upload_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<upload_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.upload_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.upload_ca_c)
    MergeFrom(*source);
  }
}

void upload_ca_c::MergeFrom(const upload_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.upload_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void upload_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.upload_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upload_ca_c::CopyFrom(const upload_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.upload_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upload_ca_c::IsInitialized() const {
  return true;
}

void upload_ca_c::InternalSwap(upload_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata upload_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class upload_ca_s::_Internal {
 public:
};

upload_ca_s::upload_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.upload_ca_s)
}
upload_ca_s::upload_ca_s(const upload_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.upload_ca_s)
}

void upload_ca_s::SharedCtor() {
result_ = 0;
}

upload_ca_s::~upload_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.upload_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void upload_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void upload_ca_s::ArenaDtor(void* object) {
  upload_ca_s* _this = reinterpret_cast< upload_ca_s* >(object);
  (void)_this;
}
void upload_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void upload_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void upload_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.upload_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* upload_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* upload_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.upload_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.upload_ca_s)
  return target;
}

size_t upload_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.upload_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void upload_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.upload_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const upload_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<upload_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.upload_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.upload_ca_s)
    MergeFrom(*source);
  }
}

void upload_ca_s::MergeFrom(const upload_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.upload_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void upload_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.upload_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upload_ca_s::CopyFrom(const upload_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.upload_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upload_ca_s::IsInitialized() const {
  return true;
}

void upload_ca_s::InternalSwap(upload_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata upload_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_info_ca_c::_Internal {
 public:
};

user_info_ca_c::user_info_ca_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_info_ca_c)
}
user_info_ca_c::user_info_ca_c(const user_info_ca_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_info_ca_c)
}

void user_info_ca_c::SharedCtor() {
phone_ = PROTOBUF_LONGLONG(0);
}

user_info_ca_c::~user_info_ca_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_info_ca_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_info_ca_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_info_ca_c::ArenaDtor(void* object) {
  user_info_ca_c* _this = reinterpret_cast< user_info_ca_c* >(object);
  (void)_this;
}
void user_info_ca_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_info_ca_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_info_ca_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_info_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_info_ca_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_info_ca_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_info_ca_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_info_ca_c)
  return target;
}

size_t user_info_ca_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_info_ca_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_info_ca_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_info_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  const user_info_ca_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_info_ca_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_info_ca_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_info_ca_c)
    MergeFrom(*source);
  }
}

void user_info_ca_c::MergeFrom(const user_info_ca_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_info_ca_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void user_info_ca_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_info_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ca_c::CopyFrom(const user_info_ca_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_info_ca_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ca_c::IsInitialized() const {
  return true;
}

void user_info_ca_c::InternalSwap(user_info_ca_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_info_ca_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_info_ca_s::_Internal {
 public:
};

user_info_ca_s::user_info_ca_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_info_ca_s)
}
user_info_ca_s::user_info_ca_s(const user_info_ca_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&assets_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(assets_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_info_ca_s)
}

void user_info_ca_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assets_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(assets_));
}

user_info_ca_s::~user_info_ca_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_info_ca_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_info_ca_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_info_ca_s::ArenaDtor(void* object) {
  user_info_ca_s* _this = reinterpret_cast< user_info_ca_s* >(object);
  (void)_this;
}
void user_info_ca_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_info_ca_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_info_ca_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assets_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(assets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_info_ca_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activated_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dispatch_coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float static_income = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          static_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float promote_income = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          promote_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float team_income = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          team_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float promote_current_income = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          promote_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float team_current_income = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          team_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float assets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          assets_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_info_ca_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_info_ca_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_activated_coin(), target);
  }

  // int32 dispatch_coin = 3;
  if (this->dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dispatch_coin(), target);
  }

  // float static_income = 4;
  if (!(this->static_income() <= 0 && this->static_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_static_income(), target);
  }

  // float promote_income = 5;
  if (!(this->promote_income() <= 0 && this->promote_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_promote_income(), target);
  }

  // float team_income = 6;
  if (!(this->team_income() <= 0 && this->team_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_team_income(), target);
  }

  // float promote_current_income = 7;
  if (!(this->promote_current_income() <= 0 && this->promote_current_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_promote_current_income(), target);
  }

  // float team_current_income = 8;
  if (!(this->team_current_income() <= 0 && this->team_current_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_team_current_income(), target);
  }

  // float assets = 9;
  if (!(this->assets() <= 0 && this->assets() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_assets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_info_ca_s)
  return target;
}

size_t user_info_ca_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_info_ca_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_coin());
  }

  // int32 dispatch_coin = 3;
  if (this->dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dispatch_coin());
  }

  // float static_income = 4;
  if (!(this->static_income() <= 0 && this->static_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float promote_income = 5;
  if (!(this->promote_income() <= 0 && this->promote_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float team_income = 6;
  if (!(this->team_income() <= 0 && this->team_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float promote_current_income = 7;
  if (!(this->promote_current_income() <= 0 && this->promote_current_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float team_current_income = 8;
  if (!(this->team_current_income() <= 0 && this->team_current_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float assets = 9;
  if (!(this->assets() <= 0 && this->assets() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_info_ca_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  const user_info_ca_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_info_ca_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_info_ca_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_info_ca_s)
    MergeFrom(*source);
  }
}

void user_info_ca_s::MergeFrom(const user_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_info_ca_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.activated_coin() != 0) {
    _internal_set_activated_coin(from._internal_activated_coin());
  }
  if (from.dispatch_coin() != 0) {
    _internal_set_dispatch_coin(from._internal_dispatch_coin());
  }
  if (!(from.static_income() <= 0 && from.static_income() >= 0)) {
    _internal_set_static_income(from._internal_static_income());
  }
  if (!(from.promote_income() <= 0 && from.promote_income() >= 0)) {
    _internal_set_promote_income(from._internal_promote_income());
  }
  if (!(from.team_income() <= 0 && from.team_income() >= 0)) {
    _internal_set_team_income(from._internal_team_income());
  }
  if (!(from.promote_current_income() <= 0 && from.promote_current_income() >= 0)) {
    _internal_set_promote_current_income(from._internal_promote_current_income());
  }
  if (!(from.team_current_income() <= 0 && from.team_current_income() >= 0)) {
    _internal_set_team_current_income(from._internal_team_current_income());
  }
  if (!(from.assets() <= 0 && from.assets() >= 0)) {
    _internal_set_assets(from._internal_assets());
  }
}

void user_info_ca_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ca_s::CopyFrom(const user_info_ca_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_info_ca_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ca_s::IsInitialized() const {
  return true;
}

void user_info_ca_s::InternalSwap(user_info_ca_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_info_ca_s, assets_)
      + sizeof(user_info_ca_s::assets_)
      - PROTOBUF_FIELD_OFFSET(user_info_ca_s, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_info_ca_s::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frmpub::protocc::login_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::login_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::login_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::login_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::login_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::login_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::enabled_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::enabled_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::enabled_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::setwallet_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::setwallet_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::setwallet_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::setwallet_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::setwallet_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::setwallet_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::myteam_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::myteam_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::myteam_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::depth_list_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::depth_list_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::depth_list_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::depth_list_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::depth_list_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::depth_list_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::idcard_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::idcard_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::idcard_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::idcard_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::idcard_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::idcard_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::sign_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::sign_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::sign_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::login_pwd_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::login_pwd_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::login_pwd_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::login_pwd_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::login_pwd_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::login_pwd_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::dispatch_coin_log_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::dispatch_coin_log_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::dispatch_coin_log_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::dispatch_coin_log_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::dispatch_coin_log_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::dispatch_coin_log_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::transfer_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::transfer_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::transfer_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::transfer_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::transfer_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::transfer_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::transfer_ca_cs* Arena::CreateMaybeMessage< ::frmpub::protocc::transfer_ca_cs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::transfer_ca_cs >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::activated_coin_log_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::activated_coin_log_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::activated_coin_log_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::activated_coin_log_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::activated_coin_log_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::activated_coin_log_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::self_assets_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::self_assets_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::self_assets_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::self_assets_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::self_assets_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::self_assets_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::income_log_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::income_log_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::income_log_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::income_log_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::income_log_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::income_log_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::income_log_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::income_log_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::income_log_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::getcontract_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::getcontract_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::getcontract_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::getcontract_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::getcontract_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::getcontract_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::get_coin_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::get_coin_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::get_coin_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::get_coin_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::get_coin_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::get_coin_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::mail_list_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::mail_list_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::mail_list_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::mail_list_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::mail_list_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::mail_list_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::mail_look_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::mail_look_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::mail_look_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::mail_look_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::mail_look_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::mail_look_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::sms_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::sms_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::sms_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::sms_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::sms_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::sms_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::updata_pwd_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::updata_pwd_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::updata_pwd_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::updata_pwd_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::updata_pwd_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::updata_pwd_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::official_info_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::official_info_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::official_info_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::register_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::register_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::register_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::register_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::register_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::register_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_list_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_list_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_list_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_list_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_list_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_list_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_rob_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_rob_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_rob_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_rob_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_rob_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_rob_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::rob_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::rob_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::rob_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::rob_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::rob_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::rob_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_list_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::order_list_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_list_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_list_ca_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::order_list_ca_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_list_ca_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_list_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::order_list_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_list_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::sell_info_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::sell_info_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::sell_info_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::sell_info_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::sell_info_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::sell_info_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_order_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_order_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_order_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_order_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_order_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_order_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::buy_info_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::buy_info_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::buy_info_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::buy_info_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::buy_info_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::buy_info_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_oper_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::order_oper_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_oper_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_oper_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::order_oper_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_oper_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::upload_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::upload_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::upload_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::upload_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::upload_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::upload_ca_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_info_ca_c* Arena::CreateMaybeMessage< ::frmpub::protocc::user_info_ca_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_info_ca_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_info_ca_s* Arena::CreateMaybeMessage< ::frmpub::protocc::user_info_ca_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_info_ca_s >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
