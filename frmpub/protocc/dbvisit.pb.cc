// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbvisit.proto

#include "dbvisit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace frmpub {
namespace protocc {
constexpr loaddata_from_dbvisit_c::loaddata_from_dbvisit_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cache_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct loaddata_from_dbvisit_cDefaultTypeInternal {
  constexpr loaddata_from_dbvisit_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loaddata_from_dbvisit_cDefaultTypeInternal() {}
  union {
    loaddata_from_dbvisit_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loaddata_from_dbvisit_cDefaultTypeInternal _loaddata_from_dbvisit_c_default_instance_;
constexpr loaddata_from_dbvisit_s::loaddata_from_dbvisit_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0){}
struct loaddata_from_dbvisit_sDefaultTypeInternal {
  constexpr loaddata_from_dbvisit_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loaddata_from_dbvisit_sDefaultTypeInternal() {}
  union {
    loaddata_from_dbvisit_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loaddata_from_dbvisit_sDefaultTypeInternal _loaddata_from_dbvisit_s_default_instance_;
constexpr loaddata_more_from_dbvisit_c::loaddata_more_from_dbvisit_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , condition_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct loaddata_more_from_dbvisit_cDefaultTypeInternal {
  constexpr loaddata_more_from_dbvisit_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loaddata_more_from_dbvisit_cDefaultTypeInternal() {}
  union {
    loaddata_more_from_dbvisit_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loaddata_more_from_dbvisit_cDefaultTypeInternal _loaddata_more_from_dbvisit_c_default_instance_;
constexpr loaddata_more_from_dbvisit_s_item::loaddata_more_from_dbvisit_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_(){}
struct loaddata_more_from_dbvisit_s_itemDefaultTypeInternal {
  constexpr loaddata_more_from_dbvisit_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loaddata_more_from_dbvisit_s_itemDefaultTypeInternal() {}
  union {
    loaddata_more_from_dbvisit_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loaddata_more_from_dbvisit_s_itemDefaultTypeInternal _loaddata_more_from_dbvisit_s_item_default_instance_;
constexpr loaddata_more_from_dbvisit_s::loaddata_more_from_dbvisit_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objs_()
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0){}
struct loaddata_more_from_dbvisit_sDefaultTypeInternal {
  constexpr loaddata_more_from_dbvisit_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loaddata_more_from_dbvisit_sDefaultTypeInternal() {}
  union {
    loaddata_more_from_dbvisit_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loaddata_more_from_dbvisit_sDefaultTypeInternal _loaddata_more_from_dbvisit_s_default_instance_;
constexpr insertdata_to_dbvisit_c::insertdata_to_dbvisit_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cache_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct insertdata_to_dbvisit_cDefaultTypeInternal {
  constexpr insertdata_to_dbvisit_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~insertdata_to_dbvisit_cDefaultTypeInternal() {}
  union {
    insertdata_to_dbvisit_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT insertdata_to_dbvisit_cDefaultTypeInternal _insertdata_to_dbvisit_c_default_instance_;
constexpr insertdata_to_dbvisit_s::insertdata_to_dbvisit_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0){}
struct insertdata_to_dbvisit_sDefaultTypeInternal {
  constexpr insertdata_to_dbvisit_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~insertdata_to_dbvisit_sDefaultTypeInternal() {}
  union {
    insertdata_to_dbvisit_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT insertdata_to_dbvisit_sDefaultTypeInternal _insertdata_to_dbvisit_s_default_instance_;
constexpr updata_to_dbvisit_c::updata_to_dbvisit_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cache_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct updata_to_dbvisit_cDefaultTypeInternal {
  constexpr updata_to_dbvisit_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~updata_to_dbvisit_cDefaultTypeInternal() {}
  union {
    updata_to_dbvisit_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT updata_to_dbvisit_cDefaultTypeInternal _updata_to_dbvisit_c_default_instance_;
constexpr updata_to_dbvisit_s::updata_to_dbvisit_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0){}
struct updata_to_dbvisit_sDefaultTypeInternal {
  constexpr updata_to_dbvisit_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~updata_to_dbvisit_sDefaultTypeInternal() {}
  union {
    updata_to_dbvisit_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT updata_to_dbvisit_sDefaultTypeInternal _updata_to_dbvisit_s_default_instance_;
constexpr deletedata_to_dbvisit_c::deletedata_to_dbvisit_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cache_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct deletedata_to_dbvisit_cDefaultTypeInternal {
  constexpr deletedata_to_dbvisit_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~deletedata_to_dbvisit_cDefaultTypeInternal() {}
  union {
    deletedata_to_dbvisit_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT deletedata_to_dbvisit_cDefaultTypeInternal _deletedata_to_dbvisit_c_default_instance_;
constexpr deletedata_to_dbvisit_s::deletedata_to_dbvisit_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0){}
struct deletedata_to_dbvisit_sDefaultTypeInternal {
  constexpr deletedata_to_dbvisit_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~deletedata_to_dbvisit_sDefaultTypeInternal() {}
  union {
    deletedata_to_dbvisit_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT deletedata_to_dbvisit_sDefaultTypeInternal _deletedata_to_dbvisit_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dbvisit_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dbvisit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dbvisit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dbvisit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_c, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_c, cache_key_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_c, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_s, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_from_dbvisit_s, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_c, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_c, condition_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_c, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_s_item, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_s, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::loaddata_more_from_dbvisit_s, objs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_c, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_c, cache_key_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_c, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::insertdata_to_dbvisit_s, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_c, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_c, cache_key_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_c, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::updata_to_dbvisit_s, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::deletedata_to_dbvisit_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::deletedata_to_dbvisit_c, tag_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::deletedata_to_dbvisit_c, cache_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::deletedata_to_dbvisit_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::deletedata_to_dbvisit_s, result_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::deletedata_to_dbvisit_s, tag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frmpub::protocc::loaddata_from_dbvisit_c)},
  { 8, -1, sizeof(::frmpub::protocc::loaddata_from_dbvisit_s)},
  { 16, -1, sizeof(::frmpub::protocc::loaddata_more_from_dbvisit_c)},
  { 24, -1, sizeof(::frmpub::protocc::loaddata_more_from_dbvisit_s_item)},
  { 30, -1, sizeof(::frmpub::protocc::loaddata_more_from_dbvisit_s)},
  { 38, -1, sizeof(::frmpub::protocc::insertdata_to_dbvisit_c)},
  { 46, -1, sizeof(::frmpub::protocc::insertdata_to_dbvisit_s)},
  { 53, -1, sizeof(::frmpub::protocc::updata_to_dbvisit_c)},
  { 61, -1, sizeof(::frmpub::protocc::updata_to_dbvisit_s)},
  { 68, -1, sizeof(::frmpub::protocc::deletedata_to_dbvisit_c)},
  { 75, -1, sizeof(::frmpub::protocc::deletedata_to_dbvisit_s)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_loaddata_from_dbvisit_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_loaddata_from_dbvisit_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_loaddata_more_from_dbvisit_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_loaddata_more_from_dbvisit_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_loaddata_more_from_dbvisit_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_insertdata_to_dbvisit_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_insertdata_to_dbvisit_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_updata_to_dbvisit_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_updata_to_dbvisit_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_deletedata_to_dbvisit_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_deletedata_to_dbvisit_s_default_instance_),
};

const char descriptor_table_protodef_dbvisit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdbvisit.proto\022\016frmpub.protocc\032\014common."
  "proto\"f\n\027loaddata_from_dbvisit_c\022\013\n\003tag\030"
  "\001 \001(\t\022\021\n\tcache_key\030\002 \001(\t\022+\n\006fields\030\004 \003(\013"
  "2\033.frmpub.protocc.FieldsEntry\"c\n\027loaddat"
  "a_from_dbvisit_s\022\016\n\006result\030\001 \001(\005\022\013\n\003tag\030"
  "\002 \001(\t\022+\n\006fields\030\003 \003(\0132\033.frmpub.protocc.F"
  "ieldsEntry\"k\n\034loaddata_more_from_dbvisit"
  "_c\022\013\n\003tag\030\001 \001(\t\022\021\n\tcondition\030\002 \001(\t\022+\n\006fi"
  "elds\030\003 \003(\0132\033.frmpub.protocc.FieldsEntry\""
  "\261\001\n\034loaddata_more_from_dbvisit_s\022\016\n\006resu"
  "lt\030\001 \001(\005\022\013\n\003tag\030\002 \001(\t\022\?\n\004objs\030\003 \003(\01321.fr"
  "mpub.protocc.loaddata_more_from_dbvisit_"
  "s.item\0323\n\004item\022+\n\006fields\030\001 \003(\0132\033.frmpub."
  "protocc.FieldsEntry\"f\n\027insertdata_to_dbv"
  "isit_c\022\013\n\003tag\030\001 \001(\t\022\021\n\tcache_key\030\002 \001(\t\022+"
  "\n\006fields\030\003 \003(\0132\033.frmpub.protocc.FieldsEn"
  "try\"6\n\027insertdata_to_dbvisit_s\022\016\n\006result"
  "\030\001 \001(\005\022\013\n\003tag\030\002 \001(\t\"b\n\023updata_to_dbvisit"
  "_c\022\013\n\003tag\030\001 \001(\t\022\021\n\tcache_key\030\002 \001(\t\022+\n\006fi"
  "elds\030\003 \003(\0132\033.frmpub.protocc.FieldsEntry\""
  "2\n\023updata_to_dbvisit_s\022\016\n\006result\030\001 \001(\005\022\013"
  "\n\003tag\030\002 \001(\t\"9\n\027deletedata_to_dbvisit_c\022\013"
  "\n\003tag\030\001 \001(\t\022\021\n\tcache_key\030\002 \001(\t\"6\n\027delete"
  "data_to_dbvisit_s\022\016\n\006result\030\001 \001(\005\022\013\n\003tag"
  "\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dbvisit_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dbvisit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbvisit_2eproto = {
  false, false, 974, descriptor_table_protodef_dbvisit_2eproto, "dbvisit.proto", 
  &descriptor_table_dbvisit_2eproto_once, descriptor_table_dbvisit_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_dbvisit_2eproto::offsets,
  file_level_metadata_dbvisit_2eproto, file_level_enum_descriptors_dbvisit_2eproto, file_level_service_descriptors_dbvisit_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dbvisit_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbvisit_2eproto);
  return descriptor_table_dbvisit_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dbvisit_2eproto(&descriptor_table_dbvisit_2eproto);
namespace frmpub {
namespace protocc {

// ===================================================================

class loaddata_from_dbvisit_c::_Internal {
 public:
};

void loaddata_from_dbvisit_c::clear_fields() {
  fields_.Clear();
}
loaddata_from_dbvisit_c::loaddata_from_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.loaddata_from_dbvisit_c)
}
loaddata_from_dbvisit_c::loaddata_from_dbvisit_c(const loaddata_from_dbvisit_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cache_key().empty()) {
    cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.loaddata_from_dbvisit_c)
}

void loaddata_from_dbvisit_c::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

loaddata_from_dbvisit_c::~loaddata_from_dbvisit_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.loaddata_from_dbvisit_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void loaddata_from_dbvisit_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loaddata_from_dbvisit_c::ArenaDtor(void* object) {
  loaddata_from_dbvisit_c* _this = reinterpret_cast< loaddata_from_dbvisit_c* >(object);
  (void)_this;
}
void loaddata_from_dbvisit_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loaddata_from_dbvisit_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loaddata_from_dbvisit_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.loaddata_from_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tag_.ClearToEmpty();
  cache_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loaddata_from_dbvisit_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.loaddata_from_dbvisit_c.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cache_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cache_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.loaddata_from_dbvisit_c.cache_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.FieldsEntry fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loaddata_from_dbvisit_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.loaddata_from_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.loaddata_from_dbvisit_c.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cache_key().data(), static_cast<int>(this->_internal_cache_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.loaddata_from_dbvisit_c.cache_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_key(), target);
  }

  // repeated .frmpub.protocc.FieldsEntry fields = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.loaddata_from_dbvisit_c)
  return target;
}

size_t loaddata_from_dbvisit_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.loaddata_from_dbvisit_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 4;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cache_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loaddata_from_dbvisit_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.loaddata_from_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  const loaddata_from_dbvisit_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<loaddata_from_dbvisit_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.loaddata_from_dbvisit_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.loaddata_from_dbvisit_c)
    MergeFrom(*source);
  }
}

void loaddata_from_dbvisit_c::MergeFrom(const loaddata_from_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.loaddata_from_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.cache_key().size() > 0) {
    _internal_set_cache_key(from._internal_cache_key());
  }
}

void loaddata_from_dbvisit_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.loaddata_from_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loaddata_from_dbvisit_c::CopyFrom(const loaddata_from_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.loaddata_from_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loaddata_from_dbvisit_c::IsInitialized() const {
  return true;
}

void loaddata_from_dbvisit_c::InternalSwap(loaddata_from_dbvisit_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cache_key_.Swap(&other->cache_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata loaddata_from_dbvisit_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class loaddata_from_dbvisit_s::_Internal {
 public:
};

void loaddata_from_dbvisit_s::clear_fields() {
  fields_.Clear();
}
loaddata_from_dbvisit_s::loaddata_from_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.loaddata_from_dbvisit_s)
}
loaddata_from_dbvisit_s::loaddata_from_dbvisit_s(const loaddata_from_dbvisit_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.loaddata_from_dbvisit_s)
}

void loaddata_from_dbvisit_s::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

loaddata_from_dbvisit_s::~loaddata_from_dbvisit_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.loaddata_from_dbvisit_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void loaddata_from_dbvisit_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loaddata_from_dbvisit_s::ArenaDtor(void* object) {
  loaddata_from_dbvisit_s* _this = reinterpret_cast< loaddata_from_dbvisit_s* >(object);
  (void)_this;
}
void loaddata_from_dbvisit_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loaddata_from_dbvisit_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loaddata_from_dbvisit_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.loaddata_from_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tag_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loaddata_from_dbvisit_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.loaddata_from_dbvisit_s.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.FieldsEntry fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loaddata_from_dbvisit_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.loaddata_from_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.loaddata_from_dbvisit_s.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.loaddata_from_dbvisit_s)
  return target;
}

size_t loaddata_from_dbvisit_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.loaddata_from_dbvisit_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loaddata_from_dbvisit_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.loaddata_from_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  const loaddata_from_dbvisit_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<loaddata_from_dbvisit_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.loaddata_from_dbvisit_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.loaddata_from_dbvisit_s)
    MergeFrom(*source);
  }
}

void loaddata_from_dbvisit_s::MergeFrom(const loaddata_from_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.loaddata_from_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void loaddata_from_dbvisit_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.loaddata_from_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loaddata_from_dbvisit_s::CopyFrom(const loaddata_from_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.loaddata_from_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loaddata_from_dbvisit_s::IsInitialized() const {
  return true;
}

void loaddata_from_dbvisit_s::InternalSwap(loaddata_from_dbvisit_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loaddata_from_dbvisit_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class loaddata_more_from_dbvisit_c::_Internal {
 public:
};

void loaddata_more_from_dbvisit_c::clear_fields() {
  fields_.Clear();
}
loaddata_more_from_dbvisit_c::loaddata_more_from_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.loaddata_more_from_dbvisit_c)
}
loaddata_more_from_dbvisit_c::loaddata_more_from_dbvisit_c(const loaddata_more_from_dbvisit_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_condition().empty()) {
    condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_condition(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.loaddata_more_from_dbvisit_c)
}

void loaddata_more_from_dbvisit_c::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

loaddata_more_from_dbvisit_c::~loaddata_more_from_dbvisit_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.loaddata_more_from_dbvisit_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void loaddata_more_from_dbvisit_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  condition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loaddata_more_from_dbvisit_c::ArenaDtor(void* object) {
  loaddata_more_from_dbvisit_c* _this = reinterpret_cast< loaddata_more_from_dbvisit_c* >(object);
  (void)_this;
}
void loaddata_more_from_dbvisit_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loaddata_more_from_dbvisit_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loaddata_more_from_dbvisit_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tag_.ClearToEmpty();
  condition_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loaddata_more_from_dbvisit_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.loaddata_more_from_dbvisit_c.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_condition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.loaddata_more_from_dbvisit_c.condition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.FieldsEntry fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loaddata_more_from_dbvisit_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.loaddata_more_from_dbvisit_c.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // string condition = 2;
  if (this->condition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_condition().data(), static_cast<int>(this->_internal_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.loaddata_more_from_dbvisit_c.condition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_condition(), target);
  }

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.loaddata_more_from_dbvisit_c)
  return target;
}

size_t loaddata_more_from_dbvisit_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string condition = 2;
  if (this->condition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_condition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loaddata_more_from_dbvisit_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  const loaddata_more_from_dbvisit_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<loaddata_more_from_dbvisit_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.loaddata_more_from_dbvisit_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.loaddata_more_from_dbvisit_c)
    MergeFrom(*source);
  }
}

void loaddata_more_from_dbvisit_c::MergeFrom(const loaddata_more_from_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.condition().size() > 0) {
    _internal_set_condition(from._internal_condition());
  }
}

void loaddata_more_from_dbvisit_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loaddata_more_from_dbvisit_c::CopyFrom(const loaddata_more_from_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.loaddata_more_from_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loaddata_more_from_dbvisit_c::IsInitialized() const {
  return true;
}

void loaddata_more_from_dbvisit_c::InternalSwap(loaddata_more_from_dbvisit_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  condition_.Swap(&other->condition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata loaddata_more_from_dbvisit_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class loaddata_more_from_dbvisit_s_item::_Internal {
 public:
};

void loaddata_more_from_dbvisit_s_item::clear_fields() {
  fields_.Clear();
}
loaddata_more_from_dbvisit_s_item::loaddata_more_from_dbvisit_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
}
loaddata_more_from_dbvisit_s_item::loaddata_more_from_dbvisit_s_item(const loaddata_more_from_dbvisit_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
}

void loaddata_more_from_dbvisit_s_item::SharedCtor() {
}

loaddata_more_from_dbvisit_s_item::~loaddata_more_from_dbvisit_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void loaddata_more_from_dbvisit_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void loaddata_more_from_dbvisit_s_item::ArenaDtor(void* object) {
  loaddata_more_from_dbvisit_s_item* _this = reinterpret_cast< loaddata_more_from_dbvisit_s_item* >(object);
  (void)_this;
}
void loaddata_more_from_dbvisit_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loaddata_more_from_dbvisit_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loaddata_more_from_dbvisit_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loaddata_more_from_dbvisit_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.FieldsEntry fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loaddata_more_from_dbvisit_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  return target;
}

size_t loaddata_more_from_dbvisit_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loaddata_more_from_dbvisit_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const loaddata_more_from_dbvisit_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<loaddata_more_from_dbvisit_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
    MergeFrom(*source);
  }
}

void loaddata_more_from_dbvisit_s_item::MergeFrom(const loaddata_more_from_dbvisit_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void loaddata_more_from_dbvisit_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loaddata_more_from_dbvisit_s_item::CopyFrom(const loaddata_more_from_dbvisit_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loaddata_more_from_dbvisit_s_item::IsInitialized() const {
  return true;
}

void loaddata_more_from_dbvisit_s_item::InternalSwap(loaddata_more_from_dbvisit_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loaddata_more_from_dbvisit_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class loaddata_more_from_dbvisit_s::_Internal {
 public:
};

loaddata_more_from_dbvisit_s::loaddata_more_from_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.loaddata_more_from_dbvisit_s)
}
loaddata_more_from_dbvisit_s::loaddata_more_from_dbvisit_s(const loaddata_more_from_dbvisit_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.loaddata_more_from_dbvisit_s)
}

void loaddata_more_from_dbvisit_s::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

loaddata_more_from_dbvisit_s::~loaddata_more_from_dbvisit_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.loaddata_more_from_dbvisit_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void loaddata_more_from_dbvisit_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loaddata_more_from_dbvisit_s::ArenaDtor(void* object) {
  loaddata_more_from_dbvisit_s* _this = reinterpret_cast< loaddata_more_from_dbvisit_s* >(object);
  (void)_this;
}
void loaddata_more_from_dbvisit_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loaddata_more_from_dbvisit_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loaddata_more_from_dbvisit_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  tag_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loaddata_more_from_dbvisit_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.loaddata_more_from_dbvisit_s.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.loaddata_more_from_dbvisit_s.item objs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loaddata_more_from_dbvisit_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.loaddata_more_from_dbvisit_s.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // repeated .frmpub.protocc.loaddata_more_from_dbvisit_s.item objs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_objs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.loaddata_more_from_dbvisit_s)
  return target;
}

size_t loaddata_more_from_dbvisit_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.loaddata_more_from_dbvisit_s.item objs = 3;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loaddata_more_from_dbvisit_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  const loaddata_more_from_dbvisit_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<loaddata_more_from_dbvisit_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.loaddata_more_from_dbvisit_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.loaddata_more_from_dbvisit_s)
    MergeFrom(*source);
  }
}

void loaddata_more_from_dbvisit_s::MergeFrom(const loaddata_more_from_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void loaddata_more_from_dbvisit_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loaddata_more_from_dbvisit_s::CopyFrom(const loaddata_more_from_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.loaddata_more_from_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loaddata_more_from_dbvisit_s::IsInitialized() const {
  return true;
}

void loaddata_more_from_dbvisit_s::InternalSwap(loaddata_more_from_dbvisit_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objs_.InternalSwap(&other->objs_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loaddata_more_from_dbvisit_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class insertdata_to_dbvisit_c::_Internal {
 public:
};

void insertdata_to_dbvisit_c::clear_fields() {
  fields_.Clear();
}
insertdata_to_dbvisit_c::insertdata_to_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.insertdata_to_dbvisit_c)
}
insertdata_to_dbvisit_c::insertdata_to_dbvisit_c(const insertdata_to_dbvisit_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cache_key().empty()) {
    cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.insertdata_to_dbvisit_c)
}

void insertdata_to_dbvisit_c::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

insertdata_to_dbvisit_c::~insertdata_to_dbvisit_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.insertdata_to_dbvisit_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void insertdata_to_dbvisit_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void insertdata_to_dbvisit_c::ArenaDtor(void* object) {
  insertdata_to_dbvisit_c* _this = reinterpret_cast< insertdata_to_dbvisit_c* >(object);
  (void)_this;
}
void insertdata_to_dbvisit_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void insertdata_to_dbvisit_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void insertdata_to_dbvisit_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.insertdata_to_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tag_.ClearToEmpty();
  cache_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* insertdata_to_dbvisit_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.insertdata_to_dbvisit_c.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cache_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cache_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.insertdata_to_dbvisit_c.cache_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.FieldsEntry fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* insertdata_to_dbvisit_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.insertdata_to_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.insertdata_to_dbvisit_c.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cache_key().data(), static_cast<int>(this->_internal_cache_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.insertdata_to_dbvisit_c.cache_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_key(), target);
  }

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.insertdata_to_dbvisit_c)
  return target;
}

size_t insertdata_to_dbvisit_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.insertdata_to_dbvisit_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cache_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void insertdata_to_dbvisit_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.insertdata_to_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  const insertdata_to_dbvisit_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<insertdata_to_dbvisit_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.insertdata_to_dbvisit_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.insertdata_to_dbvisit_c)
    MergeFrom(*source);
  }
}

void insertdata_to_dbvisit_c::MergeFrom(const insertdata_to_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.insertdata_to_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.cache_key().size() > 0) {
    _internal_set_cache_key(from._internal_cache_key());
  }
}

void insertdata_to_dbvisit_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.insertdata_to_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void insertdata_to_dbvisit_c::CopyFrom(const insertdata_to_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.insertdata_to_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool insertdata_to_dbvisit_c::IsInitialized() const {
  return true;
}

void insertdata_to_dbvisit_c::InternalSwap(insertdata_to_dbvisit_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cache_key_.Swap(&other->cache_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata insertdata_to_dbvisit_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class insertdata_to_dbvisit_s::_Internal {
 public:
};

insertdata_to_dbvisit_s::insertdata_to_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.insertdata_to_dbvisit_s)
}
insertdata_to_dbvisit_s::insertdata_to_dbvisit_s(const insertdata_to_dbvisit_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.insertdata_to_dbvisit_s)
}

void insertdata_to_dbvisit_s::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

insertdata_to_dbvisit_s::~insertdata_to_dbvisit_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.insertdata_to_dbvisit_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void insertdata_to_dbvisit_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void insertdata_to_dbvisit_s::ArenaDtor(void* object) {
  insertdata_to_dbvisit_s* _this = reinterpret_cast< insertdata_to_dbvisit_s* >(object);
  (void)_this;
}
void insertdata_to_dbvisit_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void insertdata_to_dbvisit_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void insertdata_to_dbvisit_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.insertdata_to_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* insertdata_to_dbvisit_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.insertdata_to_dbvisit_s.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* insertdata_to_dbvisit_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.insertdata_to_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.insertdata_to_dbvisit_s.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.insertdata_to_dbvisit_s)
  return target;
}

size_t insertdata_to_dbvisit_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.insertdata_to_dbvisit_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 2;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void insertdata_to_dbvisit_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.insertdata_to_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  const insertdata_to_dbvisit_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<insertdata_to_dbvisit_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.insertdata_to_dbvisit_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.insertdata_to_dbvisit_s)
    MergeFrom(*source);
  }
}

void insertdata_to_dbvisit_s::MergeFrom(const insertdata_to_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.insertdata_to_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void insertdata_to_dbvisit_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.insertdata_to_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void insertdata_to_dbvisit_s::CopyFrom(const insertdata_to_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.insertdata_to_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool insertdata_to_dbvisit_s::IsInitialized() const {
  return true;
}

void insertdata_to_dbvisit_s::InternalSwap(insertdata_to_dbvisit_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata insertdata_to_dbvisit_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class updata_to_dbvisit_c::_Internal {
 public:
};

void updata_to_dbvisit_c::clear_fields() {
  fields_.Clear();
}
updata_to_dbvisit_c::updata_to_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.updata_to_dbvisit_c)
}
updata_to_dbvisit_c::updata_to_dbvisit_c(const updata_to_dbvisit_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cache_key().empty()) {
    cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.updata_to_dbvisit_c)
}

void updata_to_dbvisit_c::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

updata_to_dbvisit_c::~updata_to_dbvisit_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.updata_to_dbvisit_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void updata_to_dbvisit_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void updata_to_dbvisit_c::ArenaDtor(void* object) {
  updata_to_dbvisit_c* _this = reinterpret_cast< updata_to_dbvisit_c* >(object);
  (void)_this;
}
void updata_to_dbvisit_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void updata_to_dbvisit_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void updata_to_dbvisit_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.updata_to_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  tag_.ClearToEmpty();
  cache_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* updata_to_dbvisit_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.updata_to_dbvisit_c.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cache_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cache_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.updata_to_dbvisit_c.cache_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .frmpub.protocc.FieldsEntry fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* updata_to_dbvisit_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.updata_to_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.updata_to_dbvisit_c.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cache_key().data(), static_cast<int>(this->_internal_cache_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.updata_to_dbvisit_c.cache_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_key(), target);
  }

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.updata_to_dbvisit_c)
  return target;
}

size_t updata_to_dbvisit_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.updata_to_dbvisit_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.FieldsEntry fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cache_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void updata_to_dbvisit_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.updata_to_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  const updata_to_dbvisit_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<updata_to_dbvisit_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.updata_to_dbvisit_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.updata_to_dbvisit_c)
    MergeFrom(*source);
  }
}

void updata_to_dbvisit_c::MergeFrom(const updata_to_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.updata_to_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.cache_key().size() > 0) {
    _internal_set_cache_key(from._internal_cache_key());
  }
}

void updata_to_dbvisit_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.updata_to_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updata_to_dbvisit_c::CopyFrom(const updata_to_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.updata_to_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updata_to_dbvisit_c::IsInitialized() const {
  return true;
}

void updata_to_dbvisit_c::InternalSwap(updata_to_dbvisit_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cache_key_.Swap(&other->cache_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata updata_to_dbvisit_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class updata_to_dbvisit_s::_Internal {
 public:
};

updata_to_dbvisit_s::updata_to_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.updata_to_dbvisit_s)
}
updata_to_dbvisit_s::updata_to_dbvisit_s(const updata_to_dbvisit_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.updata_to_dbvisit_s)
}

void updata_to_dbvisit_s::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

updata_to_dbvisit_s::~updata_to_dbvisit_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.updata_to_dbvisit_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void updata_to_dbvisit_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void updata_to_dbvisit_s::ArenaDtor(void* object) {
  updata_to_dbvisit_s* _this = reinterpret_cast< updata_to_dbvisit_s* >(object);
  (void)_this;
}
void updata_to_dbvisit_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void updata_to_dbvisit_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void updata_to_dbvisit_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.updata_to_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* updata_to_dbvisit_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.updata_to_dbvisit_s.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* updata_to_dbvisit_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.updata_to_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.updata_to_dbvisit_s.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.updata_to_dbvisit_s)
  return target;
}

size_t updata_to_dbvisit_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.updata_to_dbvisit_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 2;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void updata_to_dbvisit_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.updata_to_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  const updata_to_dbvisit_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<updata_to_dbvisit_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.updata_to_dbvisit_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.updata_to_dbvisit_s)
    MergeFrom(*source);
  }
}

void updata_to_dbvisit_s::MergeFrom(const updata_to_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.updata_to_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void updata_to_dbvisit_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.updata_to_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updata_to_dbvisit_s::CopyFrom(const updata_to_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.updata_to_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updata_to_dbvisit_s::IsInitialized() const {
  return true;
}

void updata_to_dbvisit_s::InternalSwap(updata_to_dbvisit_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata updata_to_dbvisit_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class deletedata_to_dbvisit_c::_Internal {
 public:
};

deletedata_to_dbvisit_c::deletedata_to_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.deletedata_to_dbvisit_c)
}
deletedata_to_dbvisit_c::deletedata_to_dbvisit_c(const deletedata_to_dbvisit_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cache_key().empty()) {
    cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.deletedata_to_dbvisit_c)
}

void deletedata_to_dbvisit_c::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

deletedata_to_dbvisit_c::~deletedata_to_dbvisit_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.deletedata_to_dbvisit_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void deletedata_to_dbvisit_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void deletedata_to_dbvisit_c::ArenaDtor(void* object) {
  deletedata_to_dbvisit_c* _this = reinterpret_cast< deletedata_to_dbvisit_c* >(object);
  (void)_this;
}
void deletedata_to_dbvisit_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void deletedata_to_dbvisit_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void deletedata_to_dbvisit_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.deletedata_to_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  cache_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deletedata_to_dbvisit_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.deletedata_to_dbvisit_c.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cache_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cache_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.deletedata_to_dbvisit_c.cache_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* deletedata_to_dbvisit_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.deletedata_to_dbvisit_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.deletedata_to_dbvisit_c.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cache_key().data(), static_cast<int>(this->_internal_cache_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.deletedata_to_dbvisit_c.cache_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.deletedata_to_dbvisit_c)
  return target;
}

size_t deletedata_to_dbvisit_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.deletedata_to_dbvisit_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string cache_key = 2;
  if (this->cache_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cache_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deletedata_to_dbvisit_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.deletedata_to_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  const deletedata_to_dbvisit_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<deletedata_to_dbvisit_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.deletedata_to_dbvisit_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.deletedata_to_dbvisit_c)
    MergeFrom(*source);
  }
}

void deletedata_to_dbvisit_c::MergeFrom(const deletedata_to_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.deletedata_to_dbvisit_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.cache_key().size() > 0) {
    _internal_set_cache_key(from._internal_cache_key());
  }
}

void deletedata_to_dbvisit_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.deletedata_to_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deletedata_to_dbvisit_c::CopyFrom(const deletedata_to_dbvisit_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.deletedata_to_dbvisit_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deletedata_to_dbvisit_c::IsInitialized() const {
  return true;
}

void deletedata_to_dbvisit_c::InternalSwap(deletedata_to_dbvisit_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cache_key_.Swap(&other->cache_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata deletedata_to_dbvisit_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class deletedata_to_dbvisit_s::_Internal {
 public:
};

deletedata_to_dbvisit_s::deletedata_to_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.deletedata_to_dbvisit_s)
}
deletedata_to_dbvisit_s::deletedata_to_dbvisit_s(const deletedata_to_dbvisit_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.deletedata_to_dbvisit_s)
}

void deletedata_to_dbvisit_s::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

deletedata_to_dbvisit_s::~deletedata_to_dbvisit_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.deletedata_to_dbvisit_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void deletedata_to_dbvisit_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void deletedata_to_dbvisit_s::ArenaDtor(void* object) {
  deletedata_to_dbvisit_s* _this = reinterpret_cast< deletedata_to_dbvisit_s* >(object);
  (void)_this;
}
void deletedata_to_dbvisit_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void deletedata_to_dbvisit_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void deletedata_to_dbvisit_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.deletedata_to_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deletedata_to_dbvisit_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.deletedata_to_dbvisit_s.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* deletedata_to_dbvisit_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.deletedata_to_dbvisit_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string tag = 2;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.deletedata_to_dbvisit_s.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.deletedata_to_dbvisit_s)
  return target;
}

size_t deletedata_to_dbvisit_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.deletedata_to_dbvisit_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 2;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void deletedata_to_dbvisit_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.deletedata_to_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  const deletedata_to_dbvisit_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<deletedata_to_dbvisit_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.deletedata_to_dbvisit_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.deletedata_to_dbvisit_s)
    MergeFrom(*source);
  }
}

void deletedata_to_dbvisit_s::MergeFrom(const deletedata_to_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.deletedata_to_dbvisit_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void deletedata_to_dbvisit_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.deletedata_to_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deletedata_to_dbvisit_s::CopyFrom(const deletedata_to_dbvisit_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.deletedata_to_dbvisit_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deletedata_to_dbvisit_s::IsInitialized() const {
  return true;
}

void deletedata_to_dbvisit_s::InternalSwap(deletedata_to_dbvisit_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deletedata_to_dbvisit_s::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frmpub::protocc::loaddata_from_dbvisit_c* Arena::CreateMaybeMessage< ::frmpub::protocc::loaddata_from_dbvisit_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::loaddata_from_dbvisit_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::loaddata_from_dbvisit_s* Arena::CreateMaybeMessage< ::frmpub::protocc::loaddata_from_dbvisit_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::loaddata_from_dbvisit_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::loaddata_more_from_dbvisit_c* Arena::CreateMaybeMessage< ::frmpub::protocc::loaddata_more_from_dbvisit_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::loaddata_more_from_dbvisit_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::loaddata_more_from_dbvisit_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::loaddata_more_from_dbvisit_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::loaddata_more_from_dbvisit_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::loaddata_more_from_dbvisit_s* Arena::CreateMaybeMessage< ::frmpub::protocc::loaddata_more_from_dbvisit_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::loaddata_more_from_dbvisit_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::insertdata_to_dbvisit_c* Arena::CreateMaybeMessage< ::frmpub::protocc::insertdata_to_dbvisit_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::insertdata_to_dbvisit_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::insertdata_to_dbvisit_s* Arena::CreateMaybeMessage< ::frmpub::protocc::insertdata_to_dbvisit_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::insertdata_to_dbvisit_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::updata_to_dbvisit_c* Arena::CreateMaybeMessage< ::frmpub::protocc::updata_to_dbvisit_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::updata_to_dbvisit_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::updata_to_dbvisit_s* Arena::CreateMaybeMessage< ::frmpub::protocc::updata_to_dbvisit_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::updata_to_dbvisit_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::deletedata_to_dbvisit_c* Arena::CreateMaybeMessage< ::frmpub::protocc::deletedata_to_dbvisit_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::deletedata_to_dbvisit_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::deletedata_to_dbvisit_s* Arena::CreateMaybeMessage< ::frmpub::protocc::deletedata_to_dbvisit_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::deletedata_to_dbvisit_s >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
