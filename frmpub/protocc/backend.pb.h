// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[65]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_backend_2eproto_metadata_getter(int index);
namespace frmpub {
namespace protocc {
class add_contract_bk_c;
struct add_contract_bk_cDefaultTypeInternal;
extern add_contract_bk_cDefaultTypeInternal _add_contract_bk_c_default_instance_;
class add_contract_bk_s;
struct add_contract_bk_sDefaultTypeInternal;
extern add_contract_bk_sDefaultTypeInternal _add_contract_bk_s_default_instance_;
class addmail_bk_c;
struct addmail_bk_cDefaultTypeInternal;
extern addmail_bk_cDefaultTypeInternal _addmail_bk_c_default_instance_;
class addmail_bk_s;
struct addmail_bk_sDefaultTypeInternal;
extern addmail_bk_sDefaultTypeInternal _addmail_bk_s_default_instance_;
class booking_bk_c;
struct booking_bk_cDefaultTypeInternal;
extern booking_bk_cDefaultTypeInternal _booking_bk_c_default_instance_;
class booking_bk_s;
struct booking_bk_sDefaultTypeInternal;
extern booking_bk_sDefaultTypeInternal _booking_bk_s_default_instance_;
class booking_bk_s_item;
struct booking_bk_s_itemDefaultTypeInternal;
extern booking_bk_s_itemDefaultTypeInternal _booking_bk_s_item_default_instance_;
class booking_count_bk_s;
struct booking_count_bk_sDefaultTypeInternal;
extern booking_count_bk_sDefaultTypeInternal _booking_count_bk_s_default_instance_;
class booking_count_bk_s_item;
struct booking_count_bk_s_itemDefaultTypeInternal;
extern booking_count_bk_s_itemDefaultTypeInternal _booking_count_bk_s_item_default_instance_;
class close_user_bk_c;
struct close_user_bk_cDefaultTypeInternal;
extern close_user_bk_cDefaultTypeInternal _close_user_bk_c_default_instance_;
class close_user_bk_s;
struct close_user_bk_sDefaultTypeInternal;
extern close_user_bk_sDefaultTypeInternal _close_user_bk_s_default_instance_;
class contract_oper_c;
struct contract_oper_cDefaultTypeInternal;
extern contract_oper_cDefaultTypeInternal _contract_oper_c_default_instance_;
class contract_oper_list_c;
struct contract_oper_list_cDefaultTypeInternal;
extern contract_oper_list_cDefaultTypeInternal _contract_oper_list_c_default_instance_;
class contract_oper_list_s;
struct contract_oper_list_sDefaultTypeInternal;
extern contract_oper_list_sDefaultTypeInternal _contract_oper_list_s_default_instance_;
class contract_oper_list_s_item;
struct contract_oper_list_s_itemDefaultTypeInternal;
extern contract_oper_list_s_itemDefaultTypeInternal _contract_oper_list_s_item_default_instance_;
class contract_oper_s;
struct contract_oper_sDefaultTypeInternal;
extern contract_oper_sDefaultTypeInternal _contract_oper_s_default_instance_;
class contract_type_list_bk_s;
struct contract_type_list_bk_sDefaultTypeInternal;
extern contract_type_list_bk_sDefaultTypeInternal _contract_type_list_bk_s_default_instance_;
class contract_type_list_bk_s_item;
struct contract_type_list_bk_s_itemDefaultTypeInternal;
extern contract_type_list_bk_s_itemDefaultTypeInternal _contract_type_list_bk_s_item_default_instance_;
class create_user_bk_c;
struct create_user_bk_cDefaultTypeInternal;
extern create_user_bk_cDefaultTypeInternal _create_user_bk_c_default_instance_;
class create_user_bk_s;
struct create_user_bk_sDefaultTypeInternal;
extern create_user_bk_sDefaultTypeInternal _create_user_bk_s_default_instance_;
class crucial_bk_s;
struct crucial_bk_sDefaultTypeInternal;
extern crucial_bk_sDefaultTypeInternal _crucial_bk_s_default_instance_;
class del_user_contract_bk_c;
struct del_user_contract_bk_cDefaultTypeInternal;
extern del_user_contract_bk_cDefaultTypeInternal _del_user_contract_bk_c_default_instance_;
class del_user_contract_bk_s;
struct del_user_contract_bk_sDefaultTypeInternal;
extern del_user_contract_bk_sDefaultTypeInternal _del_user_contract_bk_s_default_instance_;
class login_bk_c;
struct login_bk_cDefaultTypeInternal;
extern login_bk_cDefaultTypeInternal _login_bk_c_default_instance_;
class login_bk_s;
struct login_bk_sDefaultTypeInternal;
extern login_bk_sDefaultTypeInternal _login_bk_s_default_instance_;
class maillist_bk_s;
struct maillist_bk_sDefaultTypeInternal;
extern maillist_bk_sDefaultTypeInternal _maillist_bk_s_default_instance_;
class maillist_bk_s_item;
struct maillist_bk_s_itemDefaultTypeInternal;
extern maillist_bk_s_itemDefaultTypeInternal _maillist_bk_s_item_default_instance_;
class name_verifie_list_bk_c;
struct name_verifie_list_bk_cDefaultTypeInternal;
extern name_verifie_list_bk_cDefaultTypeInternal _name_verifie_list_bk_c_default_instance_;
class name_verifie_list_bk_s;
struct name_verifie_list_bk_sDefaultTypeInternal;
extern name_verifie_list_bk_sDefaultTypeInternal _name_verifie_list_bk_s_default_instance_;
class name_verifie_list_bk_s_item;
struct name_verifie_list_bk_s_itemDefaultTypeInternal;
extern name_verifie_list_bk_s_itemDefaultTypeInternal _name_verifie_list_bk_s_item_default_instance_;
class name_verifie_oper_bk_c;
struct name_verifie_oper_bk_cDefaultTypeInternal;
extern name_verifie_oper_bk_cDefaultTypeInternal _name_verifie_oper_bk_c_default_instance_;
class name_verifie_oper_bk_s;
struct name_verifie_oper_bk_sDefaultTypeInternal;
extern name_verifie_oper_bk_sDefaultTypeInternal _name_verifie_oper_bk_s_default_instance_;
class new_recharge_s;
struct new_recharge_sDefaultTypeInternal;
extern new_recharge_sDefaultTypeInternal _new_recharge_s_default_instance_;
class order_bk_c;
struct order_bk_cDefaultTypeInternal;
extern order_bk_cDefaultTypeInternal _order_bk_c_default_instance_;
class order_bk_s;
struct order_bk_sDefaultTypeInternal;
extern order_bk_sDefaultTypeInternal _order_bk_s_default_instance_;
class order_list_bk_c;
struct order_list_bk_cDefaultTypeInternal;
extern order_list_bk_cDefaultTypeInternal _order_list_bk_c_default_instance_;
class order_list_bk_s;
struct order_list_bk_sDefaultTypeInternal;
extern order_list_bk_sDefaultTypeInternal _order_list_bk_s_default_instance_;
class order_list_bk_s_item;
struct order_list_bk_s_itemDefaultTypeInternal;
extern order_list_bk_s_itemDefaultTypeInternal _order_list_bk_s_item_default_instance_;
class pay_verifie_list_bk_c;
struct pay_verifie_list_bk_cDefaultTypeInternal;
extern pay_verifie_list_bk_cDefaultTypeInternal _pay_verifie_list_bk_c_default_instance_;
class pay_verifie_list_bk_s;
struct pay_verifie_list_bk_sDefaultTypeInternal;
extern pay_verifie_list_bk_sDefaultTypeInternal _pay_verifie_list_bk_s_default_instance_;
class pay_verifie_list_bk_s_item;
struct pay_verifie_list_bk_s_itemDefaultTypeInternal;
extern pay_verifie_list_bk_s_itemDefaultTypeInternal _pay_verifie_list_bk_s_item_default_instance_;
class pay_verifie_oper_bk_c;
struct pay_verifie_oper_bk_cDefaultTypeInternal;
extern pay_verifie_oper_bk_cDefaultTypeInternal _pay_verifie_oper_bk_c_default_instance_;
class pay_verifie_oper_bk_s;
struct pay_verifie_oper_bk_sDefaultTypeInternal;
extern pay_verifie_oper_bk_sDefaultTypeInternal _pay_verifie_oper_bk_s_default_instance_;
class recharge_bk_c;
struct recharge_bk_cDefaultTypeInternal;
extern recharge_bk_cDefaultTypeInternal _recharge_bk_c_default_instance_;
class recharge_bk_s;
struct recharge_bk_sDefaultTypeInternal;
extern recharge_bk_sDefaultTypeInternal _recharge_bk_s_default_instance_;
class recharge_bk_s_item;
struct recharge_bk_s_itemDefaultTypeInternal;
extern recharge_bk_s_itemDefaultTypeInternal _recharge_bk_s_item_default_instance_;
class recharge_oper_bk_c;
struct recharge_oper_bk_cDefaultTypeInternal;
extern recharge_oper_bk_cDefaultTypeInternal _recharge_oper_bk_c_default_instance_;
class recharge_oper_bk_s;
struct recharge_oper_bk_sDefaultTypeInternal;
extern recharge_oper_bk_sDefaultTypeInternal _recharge_oper_bk_s_default_instance_;
class ripe_bk_c;
struct ripe_bk_cDefaultTypeInternal;
extern ripe_bk_cDefaultTypeInternal _ripe_bk_c_default_instance_;
class ripe_bk_s;
struct ripe_bk_sDefaultTypeInternal;
extern ripe_bk_sDefaultTypeInternal _ripe_bk_s_default_instance_;
class ripe_bk_s_item;
struct ripe_bk_s_itemDefaultTypeInternal;
extern ripe_bk_s_itemDefaultTypeInternal _ripe_bk_s_item_default_instance_;
class ripe_count_bk_s;
struct ripe_count_bk_sDefaultTypeInternal;
extern ripe_count_bk_sDefaultTypeInternal _ripe_count_bk_s_default_instance_;
class ripe_count_bk_s_item;
struct ripe_count_bk_s_itemDefaultTypeInternal;
extern ripe_count_bk_s_itemDefaultTypeInternal _ripe_count_bk_s_item_default_instance_;
class update_contract_type_bk_c;
struct update_contract_type_bk_cDefaultTypeInternal;
extern update_contract_type_bk_cDefaultTypeInternal _update_contract_type_bk_c_default_instance_;
class update_contract_type_bk_s;
struct update_contract_type_bk_sDefaultTypeInternal;
extern update_contract_type_bk_sDefaultTypeInternal _update_contract_type_bk_s_default_instance_;
class update_user_bk_c;
struct update_user_bk_cDefaultTypeInternal;
extern update_user_bk_cDefaultTypeInternal _update_user_bk_c_default_instance_;
class update_user_bk_s;
struct update_user_bk_sDefaultTypeInternal;
extern update_user_bk_sDefaultTypeInternal _update_user_bk_s_default_instance_;
class user_contract_list_bk_c;
struct user_contract_list_bk_cDefaultTypeInternal;
extern user_contract_list_bk_cDefaultTypeInternal _user_contract_list_bk_c_default_instance_;
class user_contract_list_bk_s;
struct user_contract_list_bk_sDefaultTypeInternal;
extern user_contract_list_bk_sDefaultTypeInternal _user_contract_list_bk_s_default_instance_;
class user_contract_list_bk_s_item;
struct user_contract_list_bk_s_itemDefaultTypeInternal;
extern user_contract_list_bk_s_itemDefaultTypeInternal _user_contract_list_bk_s_item_default_instance_;
class user_list_bk_c;
struct user_list_bk_cDefaultTypeInternal;
extern user_list_bk_cDefaultTypeInternal _user_list_bk_c_default_instance_;
class user_list_bk_s;
struct user_list_bk_sDefaultTypeInternal;
extern user_list_bk_sDefaultTypeInternal _user_list_bk_s_default_instance_;
class user_list_bk_s_item;
struct user_list_bk_s_itemDefaultTypeInternal;
extern user_list_bk_s_itemDefaultTypeInternal _user_list_bk_s_item_default_instance_;
class user_proxy_bk_c;
struct user_proxy_bk_cDefaultTypeInternal;
extern user_proxy_bk_cDefaultTypeInternal _user_proxy_bk_c_default_instance_;
class user_proxy_bk_s;
struct user_proxy_bk_sDefaultTypeInternal;
extern user_proxy_bk_sDefaultTypeInternal _user_proxy_bk_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> ::frmpub::protocc::add_contract_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::add_contract_bk_c>(Arena*);
template<> ::frmpub::protocc::add_contract_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::add_contract_bk_s>(Arena*);
template<> ::frmpub::protocc::addmail_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::addmail_bk_c>(Arena*);
template<> ::frmpub::protocc::addmail_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::addmail_bk_s>(Arena*);
template<> ::frmpub::protocc::booking_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::booking_bk_c>(Arena*);
template<> ::frmpub::protocc::booking_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::booking_bk_s>(Arena*);
template<> ::frmpub::protocc::booking_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::booking_bk_s_item>(Arena*);
template<> ::frmpub::protocc::booking_count_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::booking_count_bk_s>(Arena*);
template<> ::frmpub::protocc::booking_count_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::booking_count_bk_s_item>(Arena*);
template<> ::frmpub::protocc::close_user_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::close_user_bk_c>(Arena*);
template<> ::frmpub::protocc::close_user_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::close_user_bk_s>(Arena*);
template<> ::frmpub::protocc::contract_oper_c* Arena::CreateMaybeMessage<::frmpub::protocc::contract_oper_c>(Arena*);
template<> ::frmpub::protocc::contract_oper_list_c* Arena::CreateMaybeMessage<::frmpub::protocc::contract_oper_list_c>(Arena*);
template<> ::frmpub::protocc::contract_oper_list_s* Arena::CreateMaybeMessage<::frmpub::protocc::contract_oper_list_s>(Arena*);
template<> ::frmpub::protocc::contract_oper_list_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::contract_oper_list_s_item>(Arena*);
template<> ::frmpub::protocc::contract_oper_s* Arena::CreateMaybeMessage<::frmpub::protocc::contract_oper_s>(Arena*);
template<> ::frmpub::protocc::contract_type_list_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::contract_type_list_bk_s>(Arena*);
template<> ::frmpub::protocc::contract_type_list_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::contract_type_list_bk_s_item>(Arena*);
template<> ::frmpub::protocc::create_user_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::create_user_bk_c>(Arena*);
template<> ::frmpub::protocc::create_user_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::create_user_bk_s>(Arena*);
template<> ::frmpub::protocc::crucial_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::crucial_bk_s>(Arena*);
template<> ::frmpub::protocc::del_user_contract_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::del_user_contract_bk_c>(Arena*);
template<> ::frmpub::protocc::del_user_contract_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::del_user_contract_bk_s>(Arena*);
template<> ::frmpub::protocc::login_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::login_bk_c>(Arena*);
template<> ::frmpub::protocc::login_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::login_bk_s>(Arena*);
template<> ::frmpub::protocc::maillist_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::maillist_bk_s>(Arena*);
template<> ::frmpub::protocc::maillist_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::maillist_bk_s_item>(Arena*);
template<> ::frmpub::protocc::name_verifie_list_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::name_verifie_list_bk_c>(Arena*);
template<> ::frmpub::protocc::name_verifie_list_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::name_verifie_list_bk_s>(Arena*);
template<> ::frmpub::protocc::name_verifie_list_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::name_verifie_list_bk_s_item>(Arena*);
template<> ::frmpub::protocc::name_verifie_oper_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::name_verifie_oper_bk_c>(Arena*);
template<> ::frmpub::protocc::name_verifie_oper_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::name_verifie_oper_bk_s>(Arena*);
template<> ::frmpub::protocc::new_recharge_s* Arena::CreateMaybeMessage<::frmpub::protocc::new_recharge_s>(Arena*);
template<> ::frmpub::protocc::order_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::order_bk_c>(Arena*);
template<> ::frmpub::protocc::order_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::order_bk_s>(Arena*);
template<> ::frmpub::protocc::order_list_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::order_list_bk_c>(Arena*);
template<> ::frmpub::protocc::order_list_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::order_list_bk_s>(Arena*);
template<> ::frmpub::protocc::order_list_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::order_list_bk_s_item>(Arena*);
template<> ::frmpub::protocc::pay_verifie_list_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::pay_verifie_list_bk_c>(Arena*);
template<> ::frmpub::protocc::pay_verifie_list_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::pay_verifie_list_bk_s>(Arena*);
template<> ::frmpub::protocc::pay_verifie_list_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::pay_verifie_list_bk_s_item>(Arena*);
template<> ::frmpub::protocc::pay_verifie_oper_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::pay_verifie_oper_bk_c>(Arena*);
template<> ::frmpub::protocc::pay_verifie_oper_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::pay_verifie_oper_bk_s>(Arena*);
template<> ::frmpub::protocc::recharge_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_bk_c>(Arena*);
template<> ::frmpub::protocc::recharge_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_bk_s>(Arena*);
template<> ::frmpub::protocc::recharge_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_bk_s_item>(Arena*);
template<> ::frmpub::protocc::recharge_oper_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_oper_bk_c>(Arena*);
template<> ::frmpub::protocc::recharge_oper_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::recharge_oper_bk_s>(Arena*);
template<> ::frmpub::protocc::ripe_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::ripe_bk_c>(Arena*);
template<> ::frmpub::protocc::ripe_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::ripe_bk_s>(Arena*);
template<> ::frmpub::protocc::ripe_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::ripe_bk_s_item>(Arena*);
template<> ::frmpub::protocc::ripe_count_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::ripe_count_bk_s>(Arena*);
template<> ::frmpub::protocc::ripe_count_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::ripe_count_bk_s_item>(Arena*);
template<> ::frmpub::protocc::update_contract_type_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::update_contract_type_bk_c>(Arena*);
template<> ::frmpub::protocc::update_contract_type_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::update_contract_type_bk_s>(Arena*);
template<> ::frmpub::protocc::update_user_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::update_user_bk_c>(Arena*);
template<> ::frmpub::protocc::update_user_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::update_user_bk_s>(Arena*);
template<> ::frmpub::protocc::user_contract_list_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::user_contract_list_bk_c>(Arena*);
template<> ::frmpub::protocc::user_contract_list_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::user_contract_list_bk_s>(Arena*);
template<> ::frmpub::protocc::user_contract_list_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::user_contract_list_bk_s_item>(Arena*);
template<> ::frmpub::protocc::user_list_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::user_list_bk_c>(Arena*);
template<> ::frmpub::protocc::user_list_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::user_list_bk_s>(Arena*);
template<> ::frmpub::protocc::user_list_bk_s_item* Arena::CreateMaybeMessage<::frmpub::protocc::user_list_bk_s_item>(Arena*);
template<> ::frmpub::protocc::user_proxy_bk_c* Arena::CreateMaybeMessage<::frmpub::protocc::user_proxy_bk_c>(Arena*);
template<> ::frmpub::protocc::user_proxy_bk_s* Arena::CreateMaybeMessage<::frmpub::protocc::user_proxy_bk_s>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frmpub {
namespace protocc {

enum BackendMsgId : int {
  BACKENDMSGID_BEGIN = 0,
  CLIENT_BACKEND_BEGIN = 5100,
  LOGIN_BK_C = 5101,
  LOGIN_BK_S = 5102,
  CRUCIAL_BK_C = 5103,
  CRUCIAL_BK_S = 5104,
  MAILLIST_BK_C = 5105,
  MAILLIST_BK_S = 5106,
  ADDMAIL_BK_C = 5107,
  ADDMAIL_BK_S = 5108,
  CONTRACT_TYPE_LIST_BK_C = 5109,
  CONTRACT_TYPE_LIST_BK_S = 5110,
  UPDATE_CONTRACT_TYPE_BK_C = 5111,
  UPDATE_CONTRACT_TYPE_BK_S = 5112,
  ADD_CONTRACT_BK_C = 5113,
  ADD_CONTRACT_BK_S = 5114,
  BOOKING_COUNT_BK_C = 5115,
  BOOKING_COUNT_BK_S = 5116,
  BOOKING_BK_C = 5117,
  BOOKING_BK_S = 5118,
  RIPE_COUNT_BK_C = 5119,
  RIPE_COUNT_BK_S = 5120,
  RIPE_BK_C = 5121,
  RIPE_BK_S = 5122,
  ORDER_LIST_BK_C = 5123,
  ORDER_LIST_BK_S = 5124,
  ORDER_BK_C = 5125,
  ORDER_BK_S = 5126,
  RECHARGE_BK_C = 5127,
  RECHARGE_BK_S = 5128,
  RECHARGE_OPER_BK_C = 5129,
  RECHARGE_OPER_BK_S = 5130,
  USER_LIST_BK_C = 5131,
  USER_LIST_BK_S = 5132,
  UPDATE_USER_BK_C = 5133,
  UPDATE_USER_BK_S = 5134,
  USER_CONTRACT_LIST_BK_C = 5135,
  USER_CONTRACT_LIST_BK_S = 5136,
  DEL_USER_CONTRACT_BK_C = 5137,
  DEL_USER_CONTRACT_BK_S = 5138,
  NAME_VERIFIE_LIST_BK_C = 5139,
  NAME_VERIFIE_LIST_BK_S = 5140,
  NAME_VERIFIE_OPER_BK_C = 5141,
  NAME_VERIFIE_OPER_BK_S = 5142,
  PAY_VERIFIE_LIST_BK_C = 5143,
  PAY_VERIFIE_LIST_BK_S = 5144,
  PAY_VERIFIE_OPER_BK_C = 5145,
  PAY_VERIFIE_OPER_BK_S = 5146,
  CREATE_USER_BK_C = 5147,
  CREATE_USER_BK_S = 5148,
  USER_PROXY_BK_C = 5149,
  USER_PROXY_BK_S = 5150,
  CLOSE_USER_BK_C = 5151,
  CLOSE_USER_BK_S = 5152,
  NEW_RECHARGE_C = 5153,
  NEW_RECHARGE_S = 5154,
  CONTRACT_OPER_LIST_C = 5155,
  CONTRACT_OPER_LIST_S = 5156,
  CONTRACT_OPER_C = 5157,
  CONTRACT_OPER_S = 5158,
  CLIENT_BACKEND_END = 9999,
  BACKENDMSGID_END = 10000,
  BackendMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BackendMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BackendMsgId_IsValid(int value);
constexpr BackendMsgId BackendMsgId_MIN = BACKENDMSGID_BEGIN;
constexpr BackendMsgId BackendMsgId_MAX = BACKENDMSGID_END;
constexpr int BackendMsgId_ARRAYSIZE = BackendMsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackendMsgId_descriptor();
template<typename T>
inline const std::string& BackendMsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackendMsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackendMsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BackendMsgId_descriptor(), enum_t_value);
}
inline bool BackendMsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackendMsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BackendMsgId>(
    BackendMsgId_descriptor(), name, value);
}
// ===================================================================

class login_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.login_bk_c) */ {
 public:
  inline login_bk_c() : login_bk_c(nullptr) {}
  virtual ~login_bk_c();
  explicit constexpr login_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_bk_c(const login_bk_c& from);
  login_bk_c(login_bk_c&& from) noexcept
    : login_bk_c() {
    *this = ::std::move(from);
  }

  inline login_bk_c& operator=(const login_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_bk_c& operator=(login_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_bk_c* internal_default_instance() {
    return reinterpret_cast<const login_bk_c*>(
               &_login_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(login_bk_c& a, login_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(login_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_bk_c* New() const final {
    return CreateMaybeMessage<login_bk_c>(nullptr);
  }

  login_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_bk_c& from);
  void MergeFrom(const login_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.login_bk_c";
  }
  protected:
  explicit login_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwdFieldNumber = 2,
    kPhoneFieldNumber = 1,
  };
  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.login_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class login_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.login_bk_s) */ {
 public:
  inline login_bk_s() : login_bk_s(nullptr) {}
  virtual ~login_bk_s();
  explicit constexpr login_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_bk_s(const login_bk_s& from);
  login_bk_s(login_bk_s&& from) noexcept
    : login_bk_s() {
    *this = ::std::move(from);
  }

  inline login_bk_s& operator=(const login_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_bk_s& operator=(login_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_bk_s* internal_default_instance() {
    return reinterpret_cast<const login_bk_s*>(
               &_login_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_bk_s& a, login_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(login_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_bk_s* New() const final {
    return CreateMaybeMessage<login_bk_s>(nullptr);
  }

  login_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_bk_s& from);
  void MergeFrom(const login_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.login_bk_s";
  }
  protected:
  explicit login_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.login_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class crucial_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.crucial_bk_s) */ {
 public:
  inline crucial_bk_s() : crucial_bk_s(nullptr) {}
  virtual ~crucial_bk_s();
  explicit constexpr crucial_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  crucial_bk_s(const crucial_bk_s& from);
  crucial_bk_s(crucial_bk_s&& from) noexcept
    : crucial_bk_s() {
    *this = ::std::move(from);
  }

  inline crucial_bk_s& operator=(const crucial_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline crucial_bk_s& operator=(crucial_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const crucial_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const crucial_bk_s* internal_default_instance() {
    return reinterpret_cast<const crucial_bk_s*>(
               &_crucial_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(crucial_bk_s& a, crucial_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(crucial_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(crucial_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline crucial_bk_s* New() const final {
    return CreateMaybeMessage<crucial_bk_s>(nullptr);
  }

  crucial_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<crucial_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const crucial_bk_s& from);
  void MergeFrom(const crucial_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(crucial_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.crucial_bk_s";
  }
  protected:
  explicit crucial_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalRegisterNumFieldNumber = 1,
    kTodayRegisterNumFieldNumber = 2,
    kTotalActiveNumFieldNumber = 3,
    kTodayActiveNumFieldNumber = 4,
    kTotalDisenableNumFieldNumber = 5,
    kTodayDisenableNumFieldNumber = 6,
    kTotalIncomeFieldNumber = 7,
  };
  // int32 total_register_num = 1;
  void clear_total_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_register_num() const;
  void set_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_register_num() const;
  void _internal_set_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 today_register_num = 2;
  void clear_today_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 today_register_num() const;
  void set_today_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_today_register_num() const;
  void _internal_set_today_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_active_num = 3;
  void clear_total_active_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_active_num() const;
  void set_total_active_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_active_num() const;
  void _internal_set_total_active_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 today_active_num = 4;
  void clear_today_active_num();
  ::PROTOBUF_NAMESPACE_ID::int32 today_active_num() const;
  void set_today_active_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_today_active_num() const;
  void _internal_set_today_active_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_disenable_num = 5;
  void clear_total_disenable_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_disenable_num() const;
  void set_total_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_disenable_num() const;
  void _internal_set_total_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 today_disenable_num = 6;
  void clear_today_disenable_num();
  ::PROTOBUF_NAMESPACE_ID::int32 today_disenable_num() const;
  void set_today_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_today_disenable_num() const;
  void _internal_set_today_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float total_income = 7;
  void clear_total_income();
  float total_income() const;
  void set_total_income(float value);
  private:
  float _internal_total_income() const;
  void _internal_set_total_income(float value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.crucial_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 today_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_active_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 today_active_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_disenable_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 today_disenable_num_;
  float total_income_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class maillist_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.maillist_bk_s.item) */ {
 public:
  inline maillist_bk_s_item() : maillist_bk_s_item(nullptr) {}
  virtual ~maillist_bk_s_item();
  explicit constexpr maillist_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  maillist_bk_s_item(const maillist_bk_s_item& from);
  maillist_bk_s_item(maillist_bk_s_item&& from) noexcept
    : maillist_bk_s_item() {
    *this = ::std::move(from);
  }

  inline maillist_bk_s_item& operator=(const maillist_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline maillist_bk_s_item& operator=(maillist_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const maillist_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const maillist_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const maillist_bk_s_item*>(
               &_maillist_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(maillist_bk_s_item& a, maillist_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(maillist_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(maillist_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline maillist_bk_s_item* New() const final {
    return CreateMaybeMessage<maillist_bk_s_item>(nullptr);
  }

  maillist_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<maillist_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const maillist_bk_s_item& from);
  void MergeFrom(const maillist_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(maillist_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.maillist_bk_s.item";
  }
  protected:
  explicit maillist_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 2,
    kInfoFieldNumber = 3,
    kIdFieldNumber = 1,
    kTimeFieldNumber = 4,
  };
  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string info = 3;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.maillist_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class maillist_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.maillist_bk_s) */ {
 public:
  inline maillist_bk_s() : maillist_bk_s(nullptr) {}
  virtual ~maillist_bk_s();
  explicit constexpr maillist_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  maillist_bk_s(const maillist_bk_s& from);
  maillist_bk_s(maillist_bk_s&& from) noexcept
    : maillist_bk_s() {
    *this = ::std::move(from);
  }

  inline maillist_bk_s& operator=(const maillist_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline maillist_bk_s& operator=(maillist_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const maillist_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const maillist_bk_s* internal_default_instance() {
    return reinterpret_cast<const maillist_bk_s*>(
               &_maillist_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(maillist_bk_s& a, maillist_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(maillist_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(maillist_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline maillist_bk_s* New() const final {
    return CreateMaybeMessage<maillist_bk_s>(nullptr);
  }

  maillist_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<maillist_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const maillist_bk_s& from);
  void MergeFrom(const maillist_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(maillist_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.maillist_bk_s";
  }
  protected:
  explicit maillist_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef maillist_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.maillist_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::maillist_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::maillist_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::maillist_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::maillist_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::maillist_bk_s_item& its(int index) const;
  ::frmpub::protocc::maillist_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::maillist_bk_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.maillist_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::maillist_bk_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class addmail_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.addmail_bk_c) */ {
 public:
  inline addmail_bk_c() : addmail_bk_c(nullptr) {}
  virtual ~addmail_bk_c();
  explicit constexpr addmail_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addmail_bk_c(const addmail_bk_c& from);
  addmail_bk_c(addmail_bk_c&& from) noexcept
    : addmail_bk_c() {
    *this = ::std::move(from);
  }

  inline addmail_bk_c& operator=(const addmail_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline addmail_bk_c& operator=(addmail_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addmail_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const addmail_bk_c* internal_default_instance() {
    return reinterpret_cast<const addmail_bk_c*>(
               &_addmail_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(addmail_bk_c& a, addmail_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(addmail_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addmail_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addmail_bk_c* New() const final {
    return CreateMaybeMessage<addmail_bk_c>(nullptr);
  }

  addmail_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addmail_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addmail_bk_c& from);
  void MergeFrom(const addmail_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addmail_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.addmail_bk_c";
  }
  protected:
  explicit addmail_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 2,
    kInfoFieldNumber = 3,
  };
  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string info = 3;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.addmail_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class addmail_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.addmail_bk_s) */ {
 public:
  inline addmail_bk_s() : addmail_bk_s(nullptr) {}
  virtual ~addmail_bk_s();
  explicit constexpr addmail_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addmail_bk_s(const addmail_bk_s& from);
  addmail_bk_s(addmail_bk_s&& from) noexcept
    : addmail_bk_s() {
    *this = ::std::move(from);
  }

  inline addmail_bk_s& operator=(const addmail_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline addmail_bk_s& operator=(addmail_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addmail_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const addmail_bk_s* internal_default_instance() {
    return reinterpret_cast<const addmail_bk_s*>(
               &_addmail_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(addmail_bk_s& a, addmail_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(addmail_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addmail_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addmail_bk_s* New() const final {
    return CreateMaybeMessage<addmail_bk_s>(nullptr);
  }

  addmail_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addmail_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addmail_bk_s& from);
  void MergeFrom(const addmail_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addmail_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.addmail_bk_s";
  }
  protected:
  explicit addmail_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.addmail_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_type_list_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_type_list_bk_s.item) */ {
 public:
  inline contract_type_list_bk_s_item() : contract_type_list_bk_s_item(nullptr) {}
  virtual ~contract_type_list_bk_s_item();
  explicit constexpr contract_type_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_type_list_bk_s_item(const contract_type_list_bk_s_item& from);
  contract_type_list_bk_s_item(contract_type_list_bk_s_item&& from) noexcept
    : contract_type_list_bk_s_item() {
    *this = ::std::move(from);
  }

  inline contract_type_list_bk_s_item& operator=(const contract_type_list_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_type_list_bk_s_item& operator=(contract_type_list_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_type_list_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_type_list_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const contract_type_list_bk_s_item*>(
               &_contract_type_list_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(contract_type_list_bk_s_item& a, contract_type_list_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_type_list_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_type_list_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_type_list_bk_s_item* New() const final {
    return CreateMaybeMessage<contract_type_list_bk_s_item>(nullptr);
  }

  contract_type_list_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_type_list_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_type_list_bk_s_item& from);
  void MergeFrom(const contract_type_list_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_type_list_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_type_list_bk_s.item";
  }
  protected:
  explicit contract_type_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 9,
    kIdFieldNumber = 1,
    kCycleFieldNumber = 2,
    kInterestRateFieldNumber = 3,
    kReserveDispatchCoinFieldNumber = 4,
    kRushDispathchCoinFieldNumber = 5,
    kRushBeginTimeFieldNumber = 6,
    kRushEndTimeFieldNumber = 7,
    kStateFieldNumber = 8,
    kMinPriceFieldNumber = 10,
    kMaxPriceFieldNumber = 11,
  };
  // string name = 9;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cycle = 2;
  void clear_cycle();
  ::PROTOBUF_NAMESPACE_ID::int32 cycle() const;
  void set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cycle() const;
  void _internal_set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float interest_rate = 3;
  void clear_interest_rate();
  float interest_rate() const;
  void set_interest_rate(float value);
  private:
  float _internal_interest_rate() const;
  void _internal_set_interest_rate(float value);
  public:

  // int32 reserve_dispatch_coin = 4;
  void clear_reserve_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 reserve_dispatch_coin() const;
  void set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserve_dispatch_coin() const;
  void _internal_set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rush_dispathch_coin = 5;
  void clear_rush_dispathch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_dispathch_coin() const;
  void set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_dispathch_coin() const;
  void _internal_set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rush_begin_time = 6;
  void clear_rush_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_begin_time() const;
  void set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_begin_time() const;
  void _internal_set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rush_end_time = 7;
  void clear_rush_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_end_time() const;
  void set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_end_time() const;
  void _internal_set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 8;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_price = 10;
  void clear_min_price();
  ::PROTOBUF_NAMESPACE_ID::int32 min_price() const;
  void set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_price() const;
  void _internal_set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_price = 11;
  void clear_max_price();
  ::PROTOBUF_NAMESPACE_ID::int32 max_price() const;
  void set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_price() const;
  void _internal_set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_type_list_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cycle_;
  float interest_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserve_dispatch_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_dispathch_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_begin_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_type_list_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_type_list_bk_s) */ {
 public:
  inline contract_type_list_bk_s() : contract_type_list_bk_s(nullptr) {}
  virtual ~contract_type_list_bk_s();
  explicit constexpr contract_type_list_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_type_list_bk_s(const contract_type_list_bk_s& from);
  contract_type_list_bk_s(contract_type_list_bk_s&& from) noexcept
    : contract_type_list_bk_s() {
    *this = ::std::move(from);
  }

  inline contract_type_list_bk_s& operator=(const contract_type_list_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_type_list_bk_s& operator=(contract_type_list_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_type_list_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_type_list_bk_s* internal_default_instance() {
    return reinterpret_cast<const contract_type_list_bk_s*>(
               &_contract_type_list_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(contract_type_list_bk_s& a, contract_type_list_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_type_list_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_type_list_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_type_list_bk_s* New() const final {
    return CreateMaybeMessage<contract_type_list_bk_s>(nullptr);
  }

  contract_type_list_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_type_list_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_type_list_bk_s& from);
  void MergeFrom(const contract_type_list_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_type_list_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_type_list_bk_s";
  }
  protected:
  explicit contract_type_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef contract_type_list_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.contract_type_list_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::contract_type_list_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_type_list_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::contract_type_list_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::contract_type_list_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::contract_type_list_bk_s_item& its(int index) const;
  ::frmpub::protocc::contract_type_list_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_type_list_bk_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_type_list_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_type_list_bk_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class update_contract_type_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.update_contract_type_bk_c) */ {
 public:
  inline update_contract_type_bk_c() : update_contract_type_bk_c(nullptr) {}
  virtual ~update_contract_type_bk_c();
  explicit constexpr update_contract_type_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  update_contract_type_bk_c(const update_contract_type_bk_c& from);
  update_contract_type_bk_c(update_contract_type_bk_c&& from) noexcept
    : update_contract_type_bk_c() {
    *this = ::std::move(from);
  }

  inline update_contract_type_bk_c& operator=(const update_contract_type_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_contract_type_bk_c& operator=(update_contract_type_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_contract_type_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const update_contract_type_bk_c* internal_default_instance() {
    return reinterpret_cast<const update_contract_type_bk_c*>(
               &_update_contract_type_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(update_contract_type_bk_c& a, update_contract_type_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(update_contract_type_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_contract_type_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_contract_type_bk_c* New() const final {
    return CreateMaybeMessage<update_contract_type_bk_c>(nullptr);
  }

  update_contract_type_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_contract_type_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_contract_type_bk_c& from);
  void MergeFrom(const update_contract_type_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_contract_type_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.update_contract_type_bk_c";
  }
  protected:
  explicit update_contract_type_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 9,
    kIdFieldNumber = 1,
    kCycleFieldNumber = 2,
    kInterestRateFieldNumber = 3,
    kReserveDispatchCoinFieldNumber = 4,
    kRushDispathchCoinFieldNumber = 5,
    kRushBeginTimeFieldNumber = 6,
    kRushEndTimeFieldNumber = 7,
    kStateFieldNumber = 8,
    kMinPriceFieldNumber = 10,
    kMaxPriceFieldNumber = 11,
  };
  // string name = 9;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cycle = 2;
  void clear_cycle();
  ::PROTOBUF_NAMESPACE_ID::int32 cycle() const;
  void set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cycle() const;
  void _internal_set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float interest_rate = 3;
  void clear_interest_rate();
  float interest_rate() const;
  void set_interest_rate(float value);
  private:
  float _internal_interest_rate() const;
  void _internal_set_interest_rate(float value);
  public:

  // int32 reserve_dispatch_coin = 4;
  void clear_reserve_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 reserve_dispatch_coin() const;
  void set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserve_dispatch_coin() const;
  void _internal_set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rush_dispathch_coin = 5;
  void clear_rush_dispathch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_dispathch_coin() const;
  void set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_dispathch_coin() const;
  void _internal_set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rush_begin_time = 6;
  void clear_rush_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_begin_time() const;
  void set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_begin_time() const;
  void _internal_set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rush_end_time = 7;
  void clear_rush_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_end_time() const;
  void set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_end_time() const;
  void _internal_set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 8;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_price = 10;
  void clear_min_price();
  ::PROTOBUF_NAMESPACE_ID::int32 min_price() const;
  void set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_price() const;
  void _internal_set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_price = 11;
  void clear_max_price();
  ::PROTOBUF_NAMESPACE_ID::int32 max_price() const;
  void set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_price() const;
  void _internal_set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.update_contract_type_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cycle_;
  float interest_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserve_dispatch_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_dispathch_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_begin_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class update_contract_type_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.update_contract_type_bk_s) */ {
 public:
  inline update_contract_type_bk_s() : update_contract_type_bk_s(nullptr) {}
  virtual ~update_contract_type_bk_s();
  explicit constexpr update_contract_type_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  update_contract_type_bk_s(const update_contract_type_bk_s& from);
  update_contract_type_bk_s(update_contract_type_bk_s&& from) noexcept
    : update_contract_type_bk_s() {
    *this = ::std::move(from);
  }

  inline update_contract_type_bk_s& operator=(const update_contract_type_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_contract_type_bk_s& operator=(update_contract_type_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_contract_type_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const update_contract_type_bk_s* internal_default_instance() {
    return reinterpret_cast<const update_contract_type_bk_s*>(
               &_update_contract_type_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(update_contract_type_bk_s& a, update_contract_type_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(update_contract_type_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_contract_type_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_contract_type_bk_s* New() const final {
    return CreateMaybeMessage<update_contract_type_bk_s>(nullptr);
  }

  update_contract_type_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_contract_type_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_contract_type_bk_s& from);
  void MergeFrom(const update_contract_type_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_contract_type_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.update_contract_type_bk_s";
  }
  protected:
  explicit update_contract_type_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.update_contract_type_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class add_contract_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.add_contract_bk_c) */ {
 public:
  inline add_contract_bk_c() : add_contract_bk_c(nullptr) {}
  virtual ~add_contract_bk_c();
  explicit constexpr add_contract_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_contract_bk_c(const add_contract_bk_c& from);
  add_contract_bk_c(add_contract_bk_c&& from) noexcept
    : add_contract_bk_c() {
    *this = ::std::move(from);
  }

  inline add_contract_bk_c& operator=(const add_contract_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_contract_bk_c& operator=(add_contract_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_contract_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_contract_bk_c* internal_default_instance() {
    return reinterpret_cast<const add_contract_bk_c*>(
               &_add_contract_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(add_contract_bk_c& a, add_contract_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(add_contract_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_contract_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_contract_bk_c* New() const final {
    return CreateMaybeMessage<add_contract_bk_c>(nullptr);
  }

  add_contract_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_contract_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_contract_bk_c& from);
  void MergeFrom(const add_contract_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_contract_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.add_contract_bk_c";
  }
  protected:
  explicit add_contract_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPriceFieldNumber = 3,
    kNumFieldNumber = 4,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 3;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 num = 4;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.add_contract_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class add_contract_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.add_contract_bk_s) */ {
 public:
  inline add_contract_bk_s() : add_contract_bk_s(nullptr) {}
  virtual ~add_contract_bk_s();
  explicit constexpr add_contract_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_contract_bk_s(const add_contract_bk_s& from);
  add_contract_bk_s(add_contract_bk_s&& from) noexcept
    : add_contract_bk_s() {
    *this = ::std::move(from);
  }

  inline add_contract_bk_s& operator=(const add_contract_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_contract_bk_s& operator=(add_contract_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_contract_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_contract_bk_s* internal_default_instance() {
    return reinterpret_cast<const add_contract_bk_s*>(
               &_add_contract_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(add_contract_bk_s& a, add_contract_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(add_contract_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_contract_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_contract_bk_s* New() const final {
    return CreateMaybeMessage<add_contract_bk_s>(nullptr);
  }

  add_contract_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_contract_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_contract_bk_s& from);
  void MergeFrom(const add_contract_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_contract_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.add_contract_bk_s";
  }
  protected:
  explicit add_contract_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.add_contract_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class booking_count_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_count_bk_s.item) */ {
 public:
  inline booking_count_bk_s_item() : booking_count_bk_s_item(nullptr) {}
  virtual ~booking_count_bk_s_item();
  explicit constexpr booking_count_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_count_bk_s_item(const booking_count_bk_s_item& from);
  booking_count_bk_s_item(booking_count_bk_s_item&& from) noexcept
    : booking_count_bk_s_item() {
    *this = ::std::move(from);
  }

  inline booking_count_bk_s_item& operator=(const booking_count_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_count_bk_s_item& operator=(booking_count_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_count_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_count_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const booking_count_bk_s_item*>(
               &_booking_count_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(booking_count_bk_s_item& a, booking_count_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_count_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_count_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_count_bk_s_item* New() const final {
    return CreateMaybeMessage<booking_count_bk_s_item>(nullptr);
  }

  booking_count_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_count_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_count_bk_s_item& from);
  void MergeFrom(const booking_count_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_count_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_count_bk_s.item";
  }
  protected:
  explicit booking_count_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractTypeFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 contract_type = 1;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_count_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class booking_count_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_count_bk_s) */ {
 public:
  inline booking_count_bk_s() : booking_count_bk_s(nullptr) {}
  virtual ~booking_count_bk_s();
  explicit constexpr booking_count_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_count_bk_s(const booking_count_bk_s& from);
  booking_count_bk_s(booking_count_bk_s&& from) noexcept
    : booking_count_bk_s() {
    *this = ::std::move(from);
  }

  inline booking_count_bk_s& operator=(const booking_count_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_count_bk_s& operator=(booking_count_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_count_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_count_bk_s* internal_default_instance() {
    return reinterpret_cast<const booking_count_bk_s*>(
               &_booking_count_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(booking_count_bk_s& a, booking_count_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_count_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_count_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_count_bk_s* New() const final {
    return CreateMaybeMessage<booking_count_bk_s>(nullptr);
  }

  booking_count_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_count_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_count_bk_s& from);
  void MergeFrom(const booking_count_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_count_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_count_bk_s";
  }
  protected:
  explicit booking_count_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef booking_count_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.booking_count_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::booking_count_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_count_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::booking_count_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::booking_count_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::booking_count_bk_s_item& its(int index) const;
  ::frmpub::protocc::booking_count_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_count_bk_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_count_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_count_bk_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class booking_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_bk_c) */ {
 public:
  inline booking_bk_c() : booking_bk_c(nullptr) {}
  virtual ~booking_bk_c();
  explicit constexpr booking_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_bk_c(const booking_bk_c& from);
  booking_bk_c(booking_bk_c&& from) noexcept
    : booking_bk_c() {
    *this = ::std::move(from);
  }

  inline booking_bk_c& operator=(const booking_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_bk_c& operator=(booking_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_bk_c* internal_default_instance() {
    return reinterpret_cast<const booking_bk_c*>(
               &_booking_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(booking_bk_c& a, booking_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_bk_c* New() const final {
    return CreateMaybeMessage<booking_bk_c>(nullptr);
  }

  booking_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_bk_c& from);
  void MergeFrom(const booking_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_bk_c";
  }
  protected:
  explicit booking_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kPhoneFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCurrPageFieldNumber = 5,
  };
  // string begin_time = 3;
  void clear_begin_time();
  const std::string& begin_time() const;
  void set_begin_time(const std::string& value);
  void set_begin_time(std::string&& value);
  void set_begin_time(const char* value);
  void set_begin_time(const char* value, size_t size);
  std::string* mutable_begin_time();
  std::string* release_begin_time();
  void set_allocated_begin_time(std::string* begin_time);
  private:
  const std::string& _internal_begin_time() const;
  void _internal_set_begin_time(const std::string& value);
  std::string* _internal_mutable_begin_time();
  public:

  // string end_time = 4;
  void clear_end_time();
  const std::string& end_time() const;
  void set_end_time(const std::string& value);
  void set_end_time(std::string&& value);
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  std::string* mutable_end_time();
  std::string* release_end_time();
  void set_allocated_end_time(std::string* end_time);
  private:
  const std::string& _internal_end_time() const;
  void _internal_set_end_time(const std::string& value);
  std::string* _internal_mutable_end_time();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_page = 5;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begin_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class booking_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_bk_s.item) */ {
 public:
  inline booking_bk_s_item() : booking_bk_s_item(nullptr) {}
  virtual ~booking_bk_s_item();
  explicit constexpr booking_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_bk_s_item(const booking_bk_s_item& from);
  booking_bk_s_item(booking_bk_s_item&& from) noexcept
    : booking_bk_s_item() {
    *this = ::std::move(from);
  }

  inline booking_bk_s_item& operator=(const booking_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_bk_s_item& operator=(booking_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const booking_bk_s_item*>(
               &_booking_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(booking_bk_s_item& a, booking_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_bk_s_item* New() const final {
    return CreateMaybeMessage<booking_bk_s_item>(nullptr);
  }

  booking_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_bk_s_item& from);
  void MergeFrom(const booking_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_bk_s.item";
  }
  protected:
  explicit booking_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kPhoneFieldNumber = 1,
    kContractTypeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kRobFieldNumber = 5,
    kRobedFieldNumber = 6,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 contract_type = 3;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rob = 5;
  void clear_rob();
  ::PROTOBUF_NAMESPACE_ID::int32 rob() const;
  void set_rob(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rob() const;
  void _internal_set_rob(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 robed = 6;
  void clear_robed();
  ::PROTOBUF_NAMESPACE_ID::int32 robed() const;
  void set_robed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robed() const;
  void _internal_set_robed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 rob_;
  ::PROTOBUF_NAMESPACE_ID::int32 robed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class booking_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.booking_bk_s) */ {
 public:
  inline booking_bk_s() : booking_bk_s(nullptr) {}
  virtual ~booking_bk_s();
  explicit constexpr booking_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  booking_bk_s(const booking_bk_s& from);
  booking_bk_s(booking_bk_s&& from) noexcept
    : booking_bk_s() {
    *this = ::std::move(from);
  }

  inline booking_bk_s& operator=(const booking_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline booking_bk_s& operator=(booking_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const booking_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const booking_bk_s* internal_default_instance() {
    return reinterpret_cast<const booking_bk_s*>(
               &_booking_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(booking_bk_s& a, booking_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(booking_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(booking_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline booking_bk_s* New() const final {
    return CreateMaybeMessage<booking_bk_s>(nullptr);
  }

  booking_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<booking_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const booking_bk_s& from);
  void MergeFrom(const booking_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(booking_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.booking_bk_s";
  }
  protected:
  explicit booking_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef booking_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
  };
  // repeated .frmpub.protocc.booking_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::booking_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::booking_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::booking_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::booking_bk_s_item& its(int index) const;
  ::frmpub::protocc::booking_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.booking_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class ripe_count_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.ripe_count_bk_s.item) */ {
 public:
  inline ripe_count_bk_s_item() : ripe_count_bk_s_item(nullptr) {}
  virtual ~ripe_count_bk_s_item();
  explicit constexpr ripe_count_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ripe_count_bk_s_item(const ripe_count_bk_s_item& from);
  ripe_count_bk_s_item(ripe_count_bk_s_item&& from) noexcept
    : ripe_count_bk_s_item() {
    *this = ::std::move(from);
  }

  inline ripe_count_bk_s_item& operator=(const ripe_count_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ripe_count_bk_s_item& operator=(ripe_count_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ripe_count_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const ripe_count_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const ripe_count_bk_s_item*>(
               &_ripe_count_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ripe_count_bk_s_item& a, ripe_count_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(ripe_count_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ripe_count_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ripe_count_bk_s_item* New() const final {
    return CreateMaybeMessage<ripe_count_bk_s_item>(nullptr);
  }

  ripe_count_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ripe_count_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ripe_count_bk_s_item& from);
  void MergeFrom(const ripe_count_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ripe_count_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.ripe_count_bk_s.item";
  }
  protected:
  explicit ripe_count_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractTypeFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 contract_type = 1;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.ripe_count_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class ripe_count_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.ripe_count_bk_s) */ {
 public:
  inline ripe_count_bk_s() : ripe_count_bk_s(nullptr) {}
  virtual ~ripe_count_bk_s();
  explicit constexpr ripe_count_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ripe_count_bk_s(const ripe_count_bk_s& from);
  ripe_count_bk_s(ripe_count_bk_s&& from) noexcept
    : ripe_count_bk_s() {
    *this = ::std::move(from);
  }

  inline ripe_count_bk_s& operator=(const ripe_count_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline ripe_count_bk_s& operator=(ripe_count_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ripe_count_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const ripe_count_bk_s* internal_default_instance() {
    return reinterpret_cast<const ripe_count_bk_s*>(
               &_ripe_count_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ripe_count_bk_s& a, ripe_count_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(ripe_count_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ripe_count_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ripe_count_bk_s* New() const final {
    return CreateMaybeMessage<ripe_count_bk_s>(nullptr);
  }

  ripe_count_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ripe_count_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ripe_count_bk_s& from);
  void MergeFrom(const ripe_count_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ripe_count_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.ripe_count_bk_s";
  }
  protected:
  explicit ripe_count_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ripe_count_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.ripe_count_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::ripe_count_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_count_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::ripe_count_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::ripe_count_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::ripe_count_bk_s_item& its(int index) const;
  ::frmpub::protocc::ripe_count_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_count_bk_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.ripe_count_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_count_bk_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class ripe_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.ripe_bk_c) */ {
 public:
  inline ripe_bk_c() : ripe_bk_c(nullptr) {}
  virtual ~ripe_bk_c();
  explicit constexpr ripe_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ripe_bk_c(const ripe_bk_c& from);
  ripe_bk_c(ripe_bk_c&& from) noexcept
    : ripe_bk_c() {
    *this = ::std::move(from);
  }

  inline ripe_bk_c& operator=(const ripe_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline ripe_bk_c& operator=(ripe_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ripe_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const ripe_bk_c* internal_default_instance() {
    return reinterpret_cast<const ripe_bk_c*>(
               &_ripe_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ripe_bk_c& a, ripe_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(ripe_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ripe_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ripe_bk_c* New() const final {
    return CreateMaybeMessage<ripe_bk_c>(nullptr);
  }

  ripe_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ripe_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ripe_bk_c& from);
  void MergeFrom(const ripe_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ripe_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.ripe_bk_c";
  }
  protected:
  explicit ripe_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCurrPageFieldNumber = 3,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_page = 3;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.ripe_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class ripe_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.ripe_bk_s.item) */ {
 public:
  inline ripe_bk_s_item() : ripe_bk_s_item(nullptr) {}
  virtual ~ripe_bk_s_item();
  explicit constexpr ripe_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ripe_bk_s_item(const ripe_bk_s_item& from);
  ripe_bk_s_item(ripe_bk_s_item&& from) noexcept
    : ripe_bk_s_item() {
    *this = ::std::move(from);
  }

  inline ripe_bk_s_item& operator=(const ripe_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ripe_bk_s_item& operator=(ripe_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ripe_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const ripe_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const ripe_bk_s_item*>(
               &_ripe_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ripe_bk_s_item& a, ripe_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(ripe_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ripe_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ripe_bk_s_item* New() const final {
    return CreateMaybeMessage<ripe_bk_s_item>(nullptr);
  }

  ripe_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ripe_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ripe_bk_s_item& from);
  void MergeFrom(const ripe_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ripe_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.ripe_bk_s.item";
  }
  protected:
  explicit ripe_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kPhoneFieldNumber = 1,
    kContractTypeFieldNumber = 3,
    kPriceFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 contract_type = 3;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 4;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.ripe_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class ripe_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.ripe_bk_s) */ {
 public:
  inline ripe_bk_s() : ripe_bk_s(nullptr) {}
  virtual ~ripe_bk_s();
  explicit constexpr ripe_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ripe_bk_s(const ripe_bk_s& from);
  ripe_bk_s(ripe_bk_s&& from) noexcept
    : ripe_bk_s() {
    *this = ::std::move(from);
  }

  inline ripe_bk_s& operator=(const ripe_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline ripe_bk_s& operator=(ripe_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ripe_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const ripe_bk_s* internal_default_instance() {
    return reinterpret_cast<const ripe_bk_s*>(
               &_ripe_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ripe_bk_s& a, ripe_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(ripe_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ripe_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ripe_bk_s* New() const final {
    return CreateMaybeMessage<ripe_bk_s>(nullptr);
  }

  ripe_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ripe_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ripe_bk_s& from);
  void MergeFrom(const ripe_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ripe_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.ripe_bk_s";
  }
  protected:
  explicit ripe_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ripe_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
  };
  // repeated .frmpub.protocc.ripe_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::ripe_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::ripe_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::ripe_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::ripe_bk_s_item& its(int index) const;
  ::frmpub::protocc::ripe_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.ripe_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class order_list_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_list_bk_c) */ {
 public:
  inline order_list_bk_c() : order_list_bk_c(nullptr) {}
  virtual ~order_list_bk_c();
  explicit constexpr order_list_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_list_bk_c(const order_list_bk_c& from);
  order_list_bk_c(order_list_bk_c&& from) noexcept
    : order_list_bk_c() {
    *this = ::std::move(from);
  }

  inline order_list_bk_c& operator=(const order_list_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_list_bk_c& operator=(order_list_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_list_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_list_bk_c* internal_default_instance() {
    return reinterpret_cast<const order_list_bk_c*>(
               &_order_list_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(order_list_bk_c& a, order_list_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(order_list_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_list_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_list_bk_c* New() const final {
    return CreateMaybeMessage<order_list_bk_c>(nullptr);
  }

  order_list_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_list_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_list_bk_c& from);
  void MergeFrom(const order_list_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_list_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_list_bk_c";
  }
  protected:
  explicit order_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyPhoneFieldNumber = 1,
    kSellPhoneFieldNumber = 3,
    kTypeFieldNumber = 2,
    kStateFieldNumber = 4,
    kIdFieldNumber = 5,
    kCurrPageFieldNumber = 6,
  };
  // int64 buy_phone = 1;
  void clear_buy_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 buy_phone() const;
  void set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buy_phone() const;
  void _internal_set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sell_phone = 3;
  void clear_sell_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone() const;
  void set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sell_phone() const;
  void _internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 curr_page = 6;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_list_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 buy_phone_;
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class order_list_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_list_bk_s.item) */ {
 public:
  inline order_list_bk_s_item() : order_list_bk_s_item(nullptr) {}
  virtual ~order_list_bk_s_item();
  explicit constexpr order_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_list_bk_s_item(const order_list_bk_s_item& from);
  order_list_bk_s_item(order_list_bk_s_item&& from) noexcept
    : order_list_bk_s_item() {
    *this = ::std::move(from);
  }

  inline order_list_bk_s_item& operator=(const order_list_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_list_bk_s_item& operator=(order_list_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_list_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_list_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const order_list_bk_s_item*>(
               &_order_list_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(order_list_bk_s_item& a, order_list_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(order_list_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_list_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_list_bk_s_item* New() const final {
    return CreateMaybeMessage<order_list_bk_s_item>(nullptr);
  }

  order_list_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_list_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_list_bk_s_item& from);
  void MergeFrom(const order_list_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_list_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_list_bk_s.item";
  }
  protected:
  explicit order_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractTypeNameFieldNumber = 4,
    kPayiconFieldNumber = 6,
    kIdFieldNumber = 1,
    kBuyPhoneFieldNumber = 2,
    kSellPhoneFieldNumber = 3,
    kPriceFieldNumber = 5,
    kRushTimeFieldNumber = 7,
    kPayTimeFieldNumber = 8,
    kSellConfirmTimeFieldNumber = 9,
    kStateFieldNumber = 10,
  };
  // string contract_type_name = 4;
  void clear_contract_type_name();
  const std::string& contract_type_name() const;
  void set_contract_type_name(const std::string& value);
  void set_contract_type_name(std::string&& value);
  void set_contract_type_name(const char* value);
  void set_contract_type_name(const char* value, size_t size);
  std::string* mutable_contract_type_name();
  std::string* release_contract_type_name();
  void set_allocated_contract_type_name(std::string* contract_type_name);
  private:
  const std::string& _internal_contract_type_name() const;
  void _internal_set_contract_type_name(const std::string& value);
  std::string* _internal_mutable_contract_type_name();
  public:

  // string payicon = 6;
  void clear_payicon();
  const std::string& payicon() const;
  void set_payicon(const std::string& value);
  void set_payicon(std::string&& value);
  void set_payicon(const char* value);
  void set_payicon(const char* value, size_t size);
  std::string* mutable_payicon();
  std::string* release_payicon();
  void set_allocated_payicon(std::string* payicon);
  private:
  const std::string& _internal_payicon() const;
  void _internal_set_payicon(const std::string& value);
  std::string* _internal_mutable_payicon();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 buy_phone = 2;
  void clear_buy_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 buy_phone() const;
  void set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buy_phone() const;
  void _internal_set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sell_phone = 3;
  void clear_sell_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone() const;
  void set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sell_phone() const;
  void _internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float price = 5;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 rush_time = 7;
  void clear_rush_time();
  ::PROTOBUF_NAMESPACE_ID::int32 rush_time() const;
  void set_rush_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rush_time() const;
  void _internal_set_rush_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pay_time = 8;
  void clear_pay_time();
  ::PROTOBUF_NAMESPACE_ID::int32 pay_time() const;
  void set_pay_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pay_time() const;
  void _internal_set_pay_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sell_confirm_time = 9;
  void clear_sell_confirm_time();
  ::PROTOBUF_NAMESPACE_ID::int32 sell_confirm_time() const;
  void set_sell_confirm_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sell_confirm_time() const;
  void _internal_set_sell_confirm_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 10;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_list_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_type_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payicon_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 buy_phone_;
  ::PROTOBUF_NAMESPACE_ID::int64 sell_phone_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 rush_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 pay_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 sell_confirm_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class order_list_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_list_bk_s) */ {
 public:
  inline order_list_bk_s() : order_list_bk_s(nullptr) {}
  virtual ~order_list_bk_s();
  explicit constexpr order_list_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_list_bk_s(const order_list_bk_s& from);
  order_list_bk_s(order_list_bk_s&& from) noexcept
    : order_list_bk_s() {
    *this = ::std::move(from);
  }

  inline order_list_bk_s& operator=(const order_list_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_list_bk_s& operator=(order_list_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_list_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_list_bk_s* internal_default_instance() {
    return reinterpret_cast<const order_list_bk_s*>(
               &_order_list_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(order_list_bk_s& a, order_list_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(order_list_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_list_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_list_bk_s* New() const final {
    return CreateMaybeMessage<order_list_bk_s>(nullptr);
  }

  order_list_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_list_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_list_bk_s& from);
  void MergeFrom(const order_list_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_list_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_list_bk_s";
  }
  protected:
  explicit order_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef order_list_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
  };
  // repeated .frmpub.protocc.order_list_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::order_list_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::order_list_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::order_list_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::order_list_bk_s_item& its(int index) const;
  ::frmpub::protocc::order_list_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_list_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class order_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_bk_c) */ {
 public:
  inline order_bk_c() : order_bk_c(nullptr) {}
  virtual ~order_bk_c();
  explicit constexpr order_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_bk_c(const order_bk_c& from);
  order_bk_c(order_bk_c&& from) noexcept
    : order_bk_c() {
    *this = ::std::move(from);
  }

  inline order_bk_c& operator=(const order_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_bk_c& operator=(order_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_bk_c* internal_default_instance() {
    return reinterpret_cast<const order_bk_c*>(
               &_order_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(order_bk_c& a, order_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(order_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_bk_c* New() const final {
    return CreateMaybeMessage<order_bk_c>(nullptr);
  }

  order_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_bk_c& from);
  void MergeFrom(const order_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_bk_c";
  }
  protected:
  explicit order_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOperFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 oper = 2;
  void clear_oper();
  ::PROTOBUF_NAMESPACE_ID::int32 oper() const;
  void set_oper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oper() const;
  void _internal_set_oper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 oper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class order_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.order_bk_s) */ {
 public:
  inline order_bk_s() : order_bk_s(nullptr) {}
  virtual ~order_bk_s();
  explicit constexpr order_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  order_bk_s(const order_bk_s& from);
  order_bk_s(order_bk_s&& from) noexcept
    : order_bk_s() {
    *this = ::std::move(from);
  }

  inline order_bk_s& operator=(const order_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_bk_s& operator=(order_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const order_bk_s* internal_default_instance() {
    return reinterpret_cast<const order_bk_s*>(
               &_order_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(order_bk_s& a, order_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(order_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_bk_s* New() const final {
    return CreateMaybeMessage<order_bk_s>(nullptr);
  }

  order_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_bk_s& from);
  void MergeFrom(const order_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.order_bk_s";
  }
  protected:
  explicit order_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.order_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class recharge_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_bk_c) */ {
 public:
  inline recharge_bk_c() : recharge_bk_c(nullptr) {}
  virtual ~recharge_bk_c();
  explicit constexpr recharge_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_bk_c(const recharge_bk_c& from);
  recharge_bk_c(recharge_bk_c&& from) noexcept
    : recharge_bk_c() {
    *this = ::std::move(from);
  }

  inline recharge_bk_c& operator=(const recharge_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_bk_c& operator=(recharge_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_bk_c* internal_default_instance() {
    return reinterpret_cast<const recharge_bk_c*>(
               &_recharge_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(recharge_bk_c& a, recharge_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_bk_c* New() const final {
    return CreateMaybeMessage<recharge_bk_c>(nullptr);
  }

  recharge_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_bk_c& from);
  void MergeFrom(const recharge_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_bk_c";
  }
  protected:
  explicit recharge_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kEnableFieldNumber = 2,
    kOperatorFieldNumber = 3,
    kTypeFieldNumber = 4,
    kCurrPageFieldNumber = 5,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 enable = 2;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operator = 3;
  void clear_operator_();
  ::PROTOBUF_NAMESPACE_ID::int32 operator_() const;
  void set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operator_() const;
  void _internal_set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_page = 5;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 operator__;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class recharge_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_bk_s.item) */ {
 public:
  inline recharge_bk_s_item() : recharge_bk_s_item(nullptr) {}
  virtual ~recharge_bk_s_item();
  explicit constexpr recharge_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_bk_s_item(const recharge_bk_s_item& from);
  recharge_bk_s_item(recharge_bk_s_item&& from) noexcept
    : recharge_bk_s_item() {
    *this = ::std::move(from);
  }

  inline recharge_bk_s_item& operator=(const recharge_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_bk_s_item& operator=(recharge_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const recharge_bk_s_item*>(
               &_recharge_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(recharge_bk_s_item& a, recharge_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_bk_s_item* New() const final {
    return CreateMaybeMessage<recharge_bk_s_item>(nullptr);
  }

  recharge_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_bk_s_item& from);
  void MergeFrom(const recharge_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_bk_s.item";
  }
  protected:
  explicit recharge_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaycertFieldNumber = 5,
    kNichenFieldNumber = 9,
    kPhoneFieldNumber = 2,
    kIdFieldNumber = 1,
    kNumFieldNumber = 3,
    kRmbFieldNumber = 4,
    kTimeFieldNumber = 6,
    kEnableFieldNumber = 7,
    kOperatorFieldNumber = 8,
  };
  // string paycert = 5;
  void clear_paycert();
  const std::string& paycert() const;
  void set_paycert(const std::string& value);
  void set_paycert(std::string&& value);
  void set_paycert(const char* value);
  void set_paycert(const char* value, size_t size);
  std::string* mutable_paycert();
  std::string* release_paycert();
  void set_allocated_paycert(std::string* paycert);
  private:
  const std::string& _internal_paycert() const;
  void _internal_set_paycert(const std::string& value);
  std::string* _internal_mutable_paycert();
  public:

  // string nichen = 9;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // int64 phone = 2;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float rmb = 4;
  void clear_rmb();
  float rmb() const;
  void set_rmb(float value);
  private:
  float _internal_rmb() const;
  void _internal_set_rmb(float value);
  public:

  // int32 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enable = 7;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operator = 8;
  void clear_operator_();
  ::PROTOBUF_NAMESPACE_ID::int32 operator_() const;
  void set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operator_() const;
  void _internal_set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paycert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  float rmb_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class recharge_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_bk_s) */ {
 public:
  inline recharge_bk_s() : recharge_bk_s(nullptr) {}
  virtual ~recharge_bk_s();
  explicit constexpr recharge_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_bk_s(const recharge_bk_s& from);
  recharge_bk_s(recharge_bk_s&& from) noexcept
    : recharge_bk_s() {
    *this = ::std::move(from);
  }

  inline recharge_bk_s& operator=(const recharge_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_bk_s& operator=(recharge_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_bk_s* internal_default_instance() {
    return reinterpret_cast<const recharge_bk_s*>(
               &_recharge_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(recharge_bk_s& a, recharge_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_bk_s* New() const final {
    return CreateMaybeMessage<recharge_bk_s>(nullptr);
  }

  recharge_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_bk_s& from);
  void MergeFrom(const recharge_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_bk_s";
  }
  protected:
  explicit recharge_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef recharge_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .frmpub.protocc.recharge_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::recharge_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::recharge_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::recharge_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::recharge_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::recharge_bk_s_item& its(int index) const;
  ::frmpub::protocc::recharge_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::recharge_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::recharge_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class recharge_oper_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_oper_bk_c) */ {
 public:
  inline recharge_oper_bk_c() : recharge_oper_bk_c(nullptr) {}
  virtual ~recharge_oper_bk_c();
  explicit constexpr recharge_oper_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_oper_bk_c(const recharge_oper_bk_c& from);
  recharge_oper_bk_c(recharge_oper_bk_c&& from) noexcept
    : recharge_oper_bk_c() {
    *this = ::std::move(from);
  }

  inline recharge_oper_bk_c& operator=(const recharge_oper_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_oper_bk_c& operator=(recharge_oper_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_oper_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_oper_bk_c* internal_default_instance() {
    return reinterpret_cast<const recharge_oper_bk_c*>(
               &_recharge_oper_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(recharge_oper_bk_c& a, recharge_oper_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_oper_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_oper_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_oper_bk_c* New() const final {
    return CreateMaybeMessage<recharge_oper_bk_c>(nullptr);
  }

  recharge_oper_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_oper_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_oper_bk_c& from);
  void MergeFrom(const recharge_oper_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_oper_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_oper_bk_c";
  }
  protected:
  explicit recharge_oper_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEnableFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enable = 2;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_oper_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class recharge_oper_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.recharge_oper_bk_s) */ {
 public:
  inline recharge_oper_bk_s() : recharge_oper_bk_s(nullptr) {}
  virtual ~recharge_oper_bk_s();
  explicit constexpr recharge_oper_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_oper_bk_s(const recharge_oper_bk_s& from);
  recharge_oper_bk_s(recharge_oper_bk_s&& from) noexcept
    : recharge_oper_bk_s() {
    *this = ::std::move(from);
  }

  inline recharge_oper_bk_s& operator=(const recharge_oper_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_oper_bk_s& operator=(recharge_oper_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recharge_oper_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_oper_bk_s* internal_default_instance() {
    return reinterpret_cast<const recharge_oper_bk_s*>(
               &_recharge_oper_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(recharge_oper_bk_s& a, recharge_oper_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_oper_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_oper_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recharge_oper_bk_s* New() const final {
    return CreateMaybeMessage<recharge_oper_bk_s>(nullptr);
  }

  recharge_oper_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recharge_oper_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recharge_oper_bk_s& from);
  void MergeFrom(const recharge_oper_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_oper_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.recharge_oper_bk_s";
  }
  protected:
  explicit recharge_oper_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.recharge_oper_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_list_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_list_bk_c) */ {
 public:
  inline user_list_bk_c() : user_list_bk_c(nullptr) {}
  virtual ~user_list_bk_c();
  explicit constexpr user_list_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_list_bk_c(const user_list_bk_c& from);
  user_list_bk_c(user_list_bk_c&& from) noexcept
    : user_list_bk_c() {
    *this = ::std::move(from);
  }

  inline user_list_bk_c& operator=(const user_list_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_list_bk_c& operator=(user_list_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_list_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_list_bk_c* internal_default_instance() {
    return reinterpret_cast<const user_list_bk_c*>(
               &_user_list_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(user_list_bk_c& a, user_list_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(user_list_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_list_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_list_bk_c* New() const final {
    return CreateMaybeMessage<user_list_bk_c>(nullptr);
  }

  user_list_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_list_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_list_bk_c& from);
  void MergeFrom(const user_list_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_list_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_list_bk_c";
  }
  protected:
  explicit user_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kEnableFieldNumber = 2,
    kCurrPageFieldNumber = 3,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 enable = 2;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curr_page = 3;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_list_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_list_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_list_bk_s.item) */ {
 public:
  inline user_list_bk_s_item() : user_list_bk_s_item(nullptr) {}
  virtual ~user_list_bk_s_item();
  explicit constexpr user_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_list_bk_s_item(const user_list_bk_s_item& from);
  user_list_bk_s_item(user_list_bk_s_item&& from) noexcept
    : user_list_bk_s_item() {
    *this = ::std::move(from);
  }

  inline user_list_bk_s_item& operator=(const user_list_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_list_bk_s_item& operator=(user_list_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_list_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_list_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const user_list_bk_s_item*>(
               &_user_list_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(user_list_bk_s_item& a, user_list_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(user_list_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_list_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_list_bk_s_item* New() const final {
    return CreateMaybeMessage<user_list_bk_s_item>(nullptr);
  }

  user_list_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_list_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_list_bk_s_item& from);
  void MergeFrom(const user_list_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_list_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_list_bk_s.item";
  }
  protected:
  explicit user_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kPwdFieldNumber = 11,
    kPhoneFieldNumber = 1,
    kDispatchCoinFieldNumber = 3,
    kActivatedCoinFieldNumber = 4,
    kTotalIncomeFieldNumber = 5,
    kStaticIncomeFieldNumber = 6,
    kPromoteCurrentIncomeFieldNumber = 7,
    kTeamCurrentIncomeFieldNumber = 8,
    kActivatedFieldNumber = 9,
    kEnableFieldNumber = 10,
    kParentPhoneFieldNumber = 13,
    kTradeFieldNumber = 12,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string pwd = 11;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 dispatch_coin = 3;
  void clear_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin() const;
  void set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dispatch_coin() const;
  void _internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activated_coin = 4;
  void clear_activated_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin() const;
  void set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_coin() const;
  void _internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float total_income = 5;
  void clear_total_income();
  float total_income() const;
  void set_total_income(float value);
  private:
  float _internal_total_income() const;
  void _internal_set_total_income(float value);
  public:

  // float static_income = 6;
  void clear_static_income();
  float static_income() const;
  void set_static_income(float value);
  private:
  float _internal_static_income() const;
  void _internal_set_static_income(float value);
  public:

  // float promote_current_income = 7;
  void clear_promote_current_income();
  float promote_current_income() const;
  void set_promote_current_income(float value);
  private:
  float _internal_promote_current_income() const;
  void _internal_set_promote_current_income(float value);
  public:

  // float team_current_income = 8;
  void clear_team_current_income();
  float team_current_income() const;
  void set_team_current_income(float value);
  private:
  float _internal_team_current_income() const;
  void _internal_set_team_current_income(float value);
  public:

  // int32 activated = 9;
  void clear_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 activated() const;
  void set_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated() const;
  void _internal_set_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enable = 10;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 parent_phone = 13;
  void clear_parent_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 parent_phone() const;
  void set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parent_phone() const;
  void _internal_set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 trade = 12;
  void clear_trade();
  ::PROTOBUF_NAMESPACE_ID::int32 trade() const;
  void set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade() const;
  void _internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_list_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_;
  float total_income_;
  float static_income_;
  float promote_current_income_;
  float team_current_income_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_list_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_list_bk_s) */ {
 public:
  inline user_list_bk_s() : user_list_bk_s(nullptr) {}
  virtual ~user_list_bk_s();
  explicit constexpr user_list_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_list_bk_s(const user_list_bk_s& from);
  user_list_bk_s(user_list_bk_s&& from) noexcept
    : user_list_bk_s() {
    *this = ::std::move(from);
  }

  inline user_list_bk_s& operator=(const user_list_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_list_bk_s& operator=(user_list_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_list_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_list_bk_s* internal_default_instance() {
    return reinterpret_cast<const user_list_bk_s*>(
               &_user_list_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(user_list_bk_s& a, user_list_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(user_list_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_list_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_list_bk_s* New() const final {
    return CreateMaybeMessage<user_list_bk_s>(nullptr);
  }

  user_list_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_list_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_list_bk_s& from);
  void MergeFrom(const user_list_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_list_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_list_bk_s";
  }
  protected:
  explicit user_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef user_list_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
  };
  // repeated .frmpub.protocc.user_list_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::user_list_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_list_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::user_list_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::user_list_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::user_list_bk_s_item& its(int index) const;
  ::frmpub::protocc::user_list_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_list_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_list_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_list_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class update_user_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.update_user_bk_c) */ {
 public:
  inline update_user_bk_c() : update_user_bk_c(nullptr) {}
  virtual ~update_user_bk_c();
  explicit constexpr update_user_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  update_user_bk_c(const update_user_bk_c& from);
  update_user_bk_c(update_user_bk_c&& from) noexcept
    : update_user_bk_c() {
    *this = ::std::move(from);
  }

  inline update_user_bk_c& operator=(const update_user_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_user_bk_c& operator=(update_user_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_user_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const update_user_bk_c* internal_default_instance() {
    return reinterpret_cast<const update_user_bk_c*>(
               &_update_user_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(update_user_bk_c& a, update_user_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(update_user_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_user_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_user_bk_c* New() const final {
    return CreateMaybeMessage<update_user_bk_c>(nullptr);
  }

  update_user_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_user_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_user_bk_c& from);
  void MergeFrom(const update_user_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_user_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.update_user_bk_c";
  }
  protected:
  explicit update_user_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwdFieldNumber = 5,
    kDispatchCoinFieldNumber = 1,
    kActivatedCoinFieldNumber = 2,
    kPromoteCurrentIncomeFieldNumber = 3,
    kTeamCurrentIncomeFieldNumber = 4,
    kParentPhoneFieldNumber = 7,
    kPhoneFieldNumber = 8,
    kTradeFieldNumber = 6,
  };
  // string pwd = 5;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // int32 dispatch_coin = 1;
  void clear_dispatch_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin() const;
  void set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dispatch_coin() const;
  void _internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activated_coin = 2;
  void clear_activated_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin() const;
  void set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_coin() const;
  void _internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 promote_current_income = 3;
  void clear_promote_current_income();
  ::PROTOBUF_NAMESPACE_ID::int32 promote_current_income() const;
  void set_promote_current_income(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_promote_current_income() const;
  void _internal_set_promote_current_income(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 team_current_income = 4;
  void clear_team_current_income();
  ::PROTOBUF_NAMESPACE_ID::int32 team_current_income() const;
  void set_team_current_income(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_current_income() const;
  void _internal_set_team_current_income(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 parent_phone = 7;
  void clear_parent_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 parent_phone() const;
  void set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parent_phone() const;
  void _internal_set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 phone = 8;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 trade = 6;
  void clear_trade();
  ::PROTOBUF_NAMESPACE_ID::int32 trade() const;
  void set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade() const;
  void _internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.update_user_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 dispatch_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 promote_current_income_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_current_income_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_phone_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class update_user_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.update_user_bk_s) */ {
 public:
  inline update_user_bk_s() : update_user_bk_s(nullptr) {}
  virtual ~update_user_bk_s();
  explicit constexpr update_user_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  update_user_bk_s(const update_user_bk_s& from);
  update_user_bk_s(update_user_bk_s&& from) noexcept
    : update_user_bk_s() {
    *this = ::std::move(from);
  }

  inline update_user_bk_s& operator=(const update_user_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline update_user_bk_s& operator=(update_user_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const update_user_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const update_user_bk_s* internal_default_instance() {
    return reinterpret_cast<const update_user_bk_s*>(
               &_update_user_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(update_user_bk_s& a, update_user_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(update_user_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(update_user_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline update_user_bk_s* New() const final {
    return CreateMaybeMessage<update_user_bk_s>(nullptr);
  }

  update_user_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<update_user_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const update_user_bk_s& from);
  void MergeFrom(const update_user_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_user_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.update_user_bk_s";
  }
  protected:
  explicit update_user_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.update_user_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_contract_list_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_contract_list_bk_c) */ {
 public:
  inline user_contract_list_bk_c() : user_contract_list_bk_c(nullptr) {}
  virtual ~user_contract_list_bk_c();
  explicit constexpr user_contract_list_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_contract_list_bk_c(const user_contract_list_bk_c& from);
  user_contract_list_bk_c(user_contract_list_bk_c&& from) noexcept
    : user_contract_list_bk_c() {
    *this = ::std::move(from);
  }

  inline user_contract_list_bk_c& operator=(const user_contract_list_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_contract_list_bk_c& operator=(user_contract_list_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_contract_list_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_contract_list_bk_c* internal_default_instance() {
    return reinterpret_cast<const user_contract_list_bk_c*>(
               &_user_contract_list_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(user_contract_list_bk_c& a, user_contract_list_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(user_contract_list_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_contract_list_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_contract_list_bk_c* New() const final {
    return CreateMaybeMessage<user_contract_list_bk_c>(nullptr);
  }

  user_contract_list_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_contract_list_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_contract_list_bk_c& from);
  void MergeFrom(const user_contract_list_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_contract_list_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_contract_list_bk_c";
  }
  protected:
  explicit user_contract_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 8,
  };
  // int64 phone = 8;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_contract_list_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_contract_list_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_contract_list_bk_s.item) */ {
 public:
  inline user_contract_list_bk_s_item() : user_contract_list_bk_s_item(nullptr) {}
  virtual ~user_contract_list_bk_s_item();
  explicit constexpr user_contract_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_contract_list_bk_s_item(const user_contract_list_bk_s_item& from);
  user_contract_list_bk_s_item(user_contract_list_bk_s_item&& from) noexcept
    : user_contract_list_bk_s_item() {
    *this = ::std::move(from);
  }

  inline user_contract_list_bk_s_item& operator=(const user_contract_list_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_contract_list_bk_s_item& operator=(user_contract_list_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_contract_list_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_contract_list_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const user_contract_list_bk_s_item*>(
               &_user_contract_list_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(user_contract_list_bk_s_item& a, user_contract_list_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(user_contract_list_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_contract_list_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_contract_list_bk_s_item* New() const final {
    return CreateMaybeMessage<user_contract_list_bk_s_item>(nullptr);
  }

  user_contract_list_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_contract_list_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_contract_list_bk_s_item& from);
  void MergeFrom(const user_contract_list_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_contract_list_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_contract_list_bk_s.item";
  }
  protected:
  explicit user_contract_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContractTypeFieldNumber = 2,
    kPriceFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 contract_type = 2;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 3;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_contract_list_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_contract_list_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_contract_list_bk_s) */ {
 public:
  inline user_contract_list_bk_s() : user_contract_list_bk_s(nullptr) {}
  virtual ~user_contract_list_bk_s();
  explicit constexpr user_contract_list_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_contract_list_bk_s(const user_contract_list_bk_s& from);
  user_contract_list_bk_s(user_contract_list_bk_s&& from) noexcept
    : user_contract_list_bk_s() {
    *this = ::std::move(from);
  }

  inline user_contract_list_bk_s& operator=(const user_contract_list_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_contract_list_bk_s& operator=(user_contract_list_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_contract_list_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_contract_list_bk_s* internal_default_instance() {
    return reinterpret_cast<const user_contract_list_bk_s*>(
               &_user_contract_list_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(user_contract_list_bk_s& a, user_contract_list_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(user_contract_list_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_contract_list_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_contract_list_bk_s* New() const final {
    return CreateMaybeMessage<user_contract_list_bk_s>(nullptr);
  }

  user_contract_list_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_contract_list_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_contract_list_bk_s& from);
  void MergeFrom(const user_contract_list_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_contract_list_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_contract_list_bk_s";
  }
  protected:
  explicit user_contract_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef user_contract_list_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
  };
  // repeated .frmpub.protocc.user_contract_list_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::user_contract_list_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_contract_list_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::user_contract_list_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::user_contract_list_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::user_contract_list_bk_s_item& its(int index) const;
  ::frmpub::protocc::user_contract_list_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_contract_list_bk_s_item >&
      its() const;

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_contract_list_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_contract_list_bk_s_item > its_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class del_user_contract_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.del_user_contract_bk_c) */ {
 public:
  inline del_user_contract_bk_c() : del_user_contract_bk_c(nullptr) {}
  virtual ~del_user_contract_bk_c();
  explicit constexpr del_user_contract_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  del_user_contract_bk_c(const del_user_contract_bk_c& from);
  del_user_contract_bk_c(del_user_contract_bk_c&& from) noexcept
    : del_user_contract_bk_c() {
    *this = ::std::move(from);
  }

  inline del_user_contract_bk_c& operator=(const del_user_contract_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline del_user_contract_bk_c& operator=(del_user_contract_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const del_user_contract_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const del_user_contract_bk_c* internal_default_instance() {
    return reinterpret_cast<const del_user_contract_bk_c*>(
               &_del_user_contract_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(del_user_contract_bk_c& a, del_user_contract_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(del_user_contract_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(del_user_contract_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline del_user_contract_bk_c* New() const final {
    return CreateMaybeMessage<del_user_contract_bk_c>(nullptr);
  }

  del_user_contract_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<del_user_contract_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const del_user_contract_bk_c& from);
  void MergeFrom(const del_user_contract_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(del_user_contract_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.del_user_contract_bk_c";
  }
  protected:
  explicit del_user_contract_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.del_user_contract_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class del_user_contract_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.del_user_contract_bk_s) */ {
 public:
  inline del_user_contract_bk_s() : del_user_contract_bk_s(nullptr) {}
  virtual ~del_user_contract_bk_s();
  explicit constexpr del_user_contract_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  del_user_contract_bk_s(const del_user_contract_bk_s& from);
  del_user_contract_bk_s(del_user_contract_bk_s&& from) noexcept
    : del_user_contract_bk_s() {
    *this = ::std::move(from);
  }

  inline del_user_contract_bk_s& operator=(const del_user_contract_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline del_user_contract_bk_s& operator=(del_user_contract_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const del_user_contract_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const del_user_contract_bk_s* internal_default_instance() {
    return reinterpret_cast<const del_user_contract_bk_s*>(
               &_del_user_contract_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(del_user_contract_bk_s& a, del_user_contract_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(del_user_contract_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(del_user_contract_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline del_user_contract_bk_s* New() const final {
    return CreateMaybeMessage<del_user_contract_bk_s>(nullptr);
  }

  del_user_contract_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<del_user_contract_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const del_user_contract_bk_s& from);
  void MergeFrom(const del_user_contract_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(del_user_contract_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.del_user_contract_bk_s";
  }
  protected:
  explicit del_user_contract_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.del_user_contract_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class name_verifie_list_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.name_verifie_list_bk_c) */ {
 public:
  inline name_verifie_list_bk_c() : name_verifie_list_bk_c(nullptr) {}
  virtual ~name_verifie_list_bk_c();
  explicit constexpr name_verifie_list_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_verifie_list_bk_c(const name_verifie_list_bk_c& from);
  name_verifie_list_bk_c(name_verifie_list_bk_c&& from) noexcept
    : name_verifie_list_bk_c() {
    *this = ::std::move(from);
  }

  inline name_verifie_list_bk_c& operator=(const name_verifie_list_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_verifie_list_bk_c& operator=(name_verifie_list_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const name_verifie_list_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_verifie_list_bk_c* internal_default_instance() {
    return reinterpret_cast<const name_verifie_list_bk_c*>(
               &_name_verifie_list_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(name_verifie_list_bk_c& a, name_verifie_list_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(name_verifie_list_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_verifie_list_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_verifie_list_bk_c* New() const final {
    return CreateMaybeMessage<name_verifie_list_bk_c>(nullptr);
  }

  name_verifie_list_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_verifie_list_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const name_verifie_list_bk_c& from);
  void MergeFrom(const name_verifie_list_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_verifie_list_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.name_verifie_list_bk_c";
  }
  protected:
  explicit name_verifie_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrPageFieldNumber = 1,
  };
  // int32 curr_page = 1;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.name_verifie_list_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class name_verifie_list_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.name_verifie_list_bk_s.item) */ {
 public:
  inline name_verifie_list_bk_s_item() : name_verifie_list_bk_s_item(nullptr) {}
  virtual ~name_verifie_list_bk_s_item();
  explicit constexpr name_verifie_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_verifie_list_bk_s_item(const name_verifie_list_bk_s_item& from);
  name_verifie_list_bk_s_item(name_verifie_list_bk_s_item&& from) noexcept
    : name_verifie_list_bk_s_item() {
    *this = ::std::move(from);
  }

  inline name_verifie_list_bk_s_item& operator=(const name_verifie_list_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_verifie_list_bk_s_item& operator=(name_verifie_list_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const name_verifie_list_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_verifie_list_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const name_verifie_list_bk_s_item*>(
               &_name_verifie_list_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(name_verifie_list_bk_s_item& a, name_verifie_list_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(name_verifie_list_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_verifie_list_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_verifie_list_bk_s_item* New() const final {
    return CreateMaybeMessage<name_verifie_list_bk_s_item>(nullptr);
  }

  name_verifie_list_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_verifie_list_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const name_verifie_list_bk_s_item& from);
  void MergeFrom(const name_verifie_list_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_verifie_list_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.name_verifie_list_bk_s.item";
  }
  protected:
  explicit name_verifie_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kNameFieldNumber = 4,
    kIdcardFieldNumber = 5,
    kPhoneFieldNumber = 1,
    kActivatedFieldNumber = 3,
    kNameVerifieFieldNumber = 6,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string idcard = 5;
  void clear_idcard();
  const std::string& idcard() const;
  void set_idcard(const std::string& value);
  void set_idcard(std::string&& value);
  void set_idcard(const char* value);
  void set_idcard(const char* value, size_t size);
  std::string* mutable_idcard();
  std::string* release_idcard();
  void set_allocated_idcard(std::string* idcard);
  private:
  const std::string& _internal_idcard() const;
  void _internal_set_idcard(const std::string& value);
  std::string* _internal_mutable_idcard();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 activated = 3;
  void clear_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 activated() const;
  void set_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated() const;
  void _internal_set_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 name_verifie = 6;
  void clear_name_verifie();
  ::PROTOBUF_NAMESPACE_ID::int32 name_verifie() const;
  void set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name_verifie() const;
  void _internal_set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.name_verifie_list_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idcard_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class name_verifie_list_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.name_verifie_list_bk_s) */ {
 public:
  inline name_verifie_list_bk_s() : name_verifie_list_bk_s(nullptr) {}
  virtual ~name_verifie_list_bk_s();
  explicit constexpr name_verifie_list_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_verifie_list_bk_s(const name_verifie_list_bk_s& from);
  name_verifie_list_bk_s(name_verifie_list_bk_s&& from) noexcept
    : name_verifie_list_bk_s() {
    *this = ::std::move(from);
  }

  inline name_verifie_list_bk_s& operator=(const name_verifie_list_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_verifie_list_bk_s& operator=(name_verifie_list_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const name_verifie_list_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_verifie_list_bk_s* internal_default_instance() {
    return reinterpret_cast<const name_verifie_list_bk_s*>(
               &_name_verifie_list_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(name_verifie_list_bk_s& a, name_verifie_list_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(name_verifie_list_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_verifie_list_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_verifie_list_bk_s* New() const final {
    return CreateMaybeMessage<name_verifie_list_bk_s>(nullptr);
  }

  name_verifie_list_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_verifie_list_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const name_verifie_list_bk_s& from);
  void MergeFrom(const name_verifie_list_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_verifie_list_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.name_verifie_list_bk_s";
  }
  protected:
  explicit name_verifie_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef name_verifie_list_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
  };
  // repeated .frmpub.protocc.name_verifie_list_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::name_verifie_list_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::name_verifie_list_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::name_verifie_list_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::name_verifie_list_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::name_verifie_list_bk_s_item& its(int index) const;
  ::frmpub::protocc::name_verifie_list_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::name_verifie_list_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.name_verifie_list_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::name_verifie_list_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class name_verifie_oper_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.name_verifie_oper_bk_c) */ {
 public:
  inline name_verifie_oper_bk_c() : name_verifie_oper_bk_c(nullptr) {}
  virtual ~name_verifie_oper_bk_c();
  explicit constexpr name_verifie_oper_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_verifie_oper_bk_c(const name_verifie_oper_bk_c& from);
  name_verifie_oper_bk_c(name_verifie_oper_bk_c&& from) noexcept
    : name_verifie_oper_bk_c() {
    *this = ::std::move(from);
  }

  inline name_verifie_oper_bk_c& operator=(const name_verifie_oper_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_verifie_oper_bk_c& operator=(name_verifie_oper_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const name_verifie_oper_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_verifie_oper_bk_c* internal_default_instance() {
    return reinterpret_cast<const name_verifie_oper_bk_c*>(
               &_name_verifie_oper_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(name_verifie_oper_bk_c& a, name_verifie_oper_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(name_verifie_oper_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_verifie_oper_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_verifie_oper_bk_c* New() const final {
    return CreateMaybeMessage<name_verifie_oper_bk_c>(nullptr);
  }

  name_verifie_oper_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_verifie_oper_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const name_verifie_oper_bk_c& from);
  void MergeFrom(const name_verifie_oper_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_verifie_oper_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.name_verifie_oper_bk_c";
  }
  protected:
  explicit name_verifie_oper_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.name_verifie_oper_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class name_verifie_oper_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.name_verifie_oper_bk_s) */ {
 public:
  inline name_verifie_oper_bk_s() : name_verifie_oper_bk_s(nullptr) {}
  virtual ~name_verifie_oper_bk_s();
  explicit constexpr name_verifie_oper_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_verifie_oper_bk_s(const name_verifie_oper_bk_s& from);
  name_verifie_oper_bk_s(name_verifie_oper_bk_s&& from) noexcept
    : name_verifie_oper_bk_s() {
    *this = ::std::move(from);
  }

  inline name_verifie_oper_bk_s& operator=(const name_verifie_oper_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_verifie_oper_bk_s& operator=(name_verifie_oper_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const name_verifie_oper_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_verifie_oper_bk_s* internal_default_instance() {
    return reinterpret_cast<const name_verifie_oper_bk_s*>(
               &_name_verifie_oper_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(name_verifie_oper_bk_s& a, name_verifie_oper_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(name_verifie_oper_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_verifie_oper_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_verifie_oper_bk_s* New() const final {
    return CreateMaybeMessage<name_verifie_oper_bk_s>(nullptr);
  }

  name_verifie_oper_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_verifie_oper_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const name_verifie_oper_bk_s& from);
  void MergeFrom(const name_verifie_oper_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_verifie_oper_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.name_verifie_oper_bk_s";
  }
  protected:
  explicit name_verifie_oper_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.name_verifie_oper_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class pay_verifie_list_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_verifie_list_bk_c) */ {
 public:
  inline pay_verifie_list_bk_c() : pay_verifie_list_bk_c(nullptr) {}
  virtual ~pay_verifie_list_bk_c();
  explicit constexpr pay_verifie_list_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_verifie_list_bk_c(const pay_verifie_list_bk_c& from);
  pay_verifie_list_bk_c(pay_verifie_list_bk_c&& from) noexcept
    : pay_verifie_list_bk_c() {
    *this = ::std::move(from);
  }

  inline pay_verifie_list_bk_c& operator=(const pay_verifie_list_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_verifie_list_bk_c& operator=(pay_verifie_list_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_verifie_list_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_verifie_list_bk_c* internal_default_instance() {
    return reinterpret_cast<const pay_verifie_list_bk_c*>(
               &_pay_verifie_list_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(pay_verifie_list_bk_c& a, pay_verifie_list_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_verifie_list_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_verifie_list_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_verifie_list_bk_c* New() const final {
    return CreateMaybeMessage<pay_verifie_list_bk_c>(nullptr);
  }

  pay_verifie_list_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_verifie_list_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_verifie_list_bk_c& from);
  void MergeFrom(const pay_verifie_list_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_verifie_list_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_verifie_list_bk_c";
  }
  protected:
  explicit pay_verifie_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrPageFieldNumber = 1,
  };
  // int32 curr_page = 1;
  void clear_curr_page();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page() const;
  void set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_page() const;
  void _internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_verifie_list_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class pay_verifie_list_bk_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_verifie_list_bk_s.item) */ {
 public:
  inline pay_verifie_list_bk_s_item() : pay_verifie_list_bk_s_item(nullptr) {}
  virtual ~pay_verifie_list_bk_s_item();
  explicit constexpr pay_verifie_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_verifie_list_bk_s_item(const pay_verifie_list_bk_s_item& from);
  pay_verifie_list_bk_s_item(pay_verifie_list_bk_s_item&& from) noexcept
    : pay_verifie_list_bk_s_item() {
    *this = ::std::move(from);
  }

  inline pay_verifie_list_bk_s_item& operator=(const pay_verifie_list_bk_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_verifie_list_bk_s_item& operator=(pay_verifie_list_bk_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_verifie_list_bk_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_verifie_list_bk_s_item* internal_default_instance() {
    return reinterpret_cast<const pay_verifie_list_bk_s_item*>(
               &_pay_verifie_list_bk_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(pay_verifie_list_bk_s_item& a, pay_verifie_list_bk_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_verifie_list_bk_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_verifie_list_bk_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_verifie_list_bk_s_item* New() const final {
    return CreateMaybeMessage<pay_verifie_list_bk_s_item>(nullptr);
  }

  pay_verifie_list_bk_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_verifie_list_bk_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_verifie_list_bk_s_item& from);
  void MergeFrom(const pay_verifie_list_bk_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_verifie_list_bk_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_verifie_list_bk_s.item";
  }
  protected:
  explicit pay_verifie_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kBankNameFieldNumber = 4,
    kBankCardidFieldNumber = 5,
    kBankUserNameFieldNumber = 6,
    kAilpayIdFieldNumber = 7,
    kAlipayNameFieldNumber = 8,
    kWebchatNameFieldNumber = 9,
    kPhoneFieldNumber = 1,
    kActivatedFieldNumber = 3,
    kPayVerifieFieldNumber = 10,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string bank_name = 4;
  void clear_bank_name();
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // string bank_cardid = 5;
  void clear_bank_cardid();
  const std::string& bank_cardid() const;
  void set_bank_cardid(const std::string& value);
  void set_bank_cardid(std::string&& value);
  void set_bank_cardid(const char* value);
  void set_bank_cardid(const char* value, size_t size);
  std::string* mutable_bank_cardid();
  std::string* release_bank_cardid();
  void set_allocated_bank_cardid(std::string* bank_cardid);
  private:
  const std::string& _internal_bank_cardid() const;
  void _internal_set_bank_cardid(const std::string& value);
  std::string* _internal_mutable_bank_cardid();
  public:

  // string bank_user_name = 6;
  void clear_bank_user_name();
  const std::string& bank_user_name() const;
  void set_bank_user_name(const std::string& value);
  void set_bank_user_name(std::string&& value);
  void set_bank_user_name(const char* value);
  void set_bank_user_name(const char* value, size_t size);
  std::string* mutable_bank_user_name();
  std::string* release_bank_user_name();
  void set_allocated_bank_user_name(std::string* bank_user_name);
  private:
  const std::string& _internal_bank_user_name() const;
  void _internal_set_bank_user_name(const std::string& value);
  std::string* _internal_mutable_bank_user_name();
  public:

  // string ailpay_id = 7;
  void clear_ailpay_id();
  const std::string& ailpay_id() const;
  void set_ailpay_id(const std::string& value);
  void set_ailpay_id(std::string&& value);
  void set_ailpay_id(const char* value);
  void set_ailpay_id(const char* value, size_t size);
  std::string* mutable_ailpay_id();
  std::string* release_ailpay_id();
  void set_allocated_ailpay_id(std::string* ailpay_id);
  private:
  const std::string& _internal_ailpay_id() const;
  void _internal_set_ailpay_id(const std::string& value);
  std::string* _internal_mutable_ailpay_id();
  public:

  // string alipay_name = 8;
  void clear_alipay_name();
  const std::string& alipay_name() const;
  void set_alipay_name(const std::string& value);
  void set_alipay_name(std::string&& value);
  void set_alipay_name(const char* value);
  void set_alipay_name(const char* value, size_t size);
  std::string* mutable_alipay_name();
  std::string* release_alipay_name();
  void set_allocated_alipay_name(std::string* alipay_name);
  private:
  const std::string& _internal_alipay_name() const;
  void _internal_set_alipay_name(const std::string& value);
  std::string* _internal_mutable_alipay_name();
  public:

  // string webchat_name = 9;
  void clear_webchat_name();
  const std::string& webchat_name() const;
  void set_webchat_name(const std::string& value);
  void set_webchat_name(std::string&& value);
  void set_webchat_name(const char* value);
  void set_webchat_name(const char* value, size_t size);
  std::string* mutable_webchat_name();
  std::string* release_webchat_name();
  void set_allocated_webchat_name(std::string* webchat_name);
  private:
  const std::string& _internal_webchat_name() const;
  void _internal_set_webchat_name(const std::string& value);
  std::string* _internal_mutable_webchat_name();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 activated = 3;
  void clear_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 activated() const;
  void set_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated() const;
  void _internal_set_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pay_verifie = 10;
  void clear_pay_verifie();
  ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie() const;
  void set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pay_verifie() const;
  void _internal_set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_verifie_list_bk_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_cardid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ailpay_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alipay_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webchat_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class pay_verifie_list_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_verifie_list_bk_s) */ {
 public:
  inline pay_verifie_list_bk_s() : pay_verifie_list_bk_s(nullptr) {}
  virtual ~pay_verifie_list_bk_s();
  explicit constexpr pay_verifie_list_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_verifie_list_bk_s(const pay_verifie_list_bk_s& from);
  pay_verifie_list_bk_s(pay_verifie_list_bk_s&& from) noexcept
    : pay_verifie_list_bk_s() {
    *this = ::std::move(from);
  }

  inline pay_verifie_list_bk_s& operator=(const pay_verifie_list_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_verifie_list_bk_s& operator=(pay_verifie_list_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_verifie_list_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_verifie_list_bk_s* internal_default_instance() {
    return reinterpret_cast<const pay_verifie_list_bk_s*>(
               &_pay_verifie_list_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(pay_verifie_list_bk_s& a, pay_verifie_list_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_verifie_list_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_verifie_list_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_verifie_list_bk_s* New() const final {
    return CreateMaybeMessage<pay_verifie_list_bk_s>(nullptr);
  }

  pay_verifie_list_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_verifie_list_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_verifie_list_bk_s& from);
  void MergeFrom(const pay_verifie_list_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_verifie_list_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_verifie_list_bk_s";
  }
  protected:
  explicit pay_verifie_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef pay_verifie_list_bk_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTotalPageFieldNumber = 2,
  };
  // repeated .frmpub.protocc.pay_verifie_list_bk_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::pay_verifie_list_bk_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::pay_verifie_list_bk_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::pay_verifie_list_bk_s_item& _internal_its(int index) const;
  ::frmpub::protocc::pay_verifie_list_bk_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::pay_verifie_list_bk_s_item& its(int index) const;
  ::frmpub::protocc::pay_verifie_list_bk_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::pay_verifie_list_bk_s_item >&
      its() const;

  // int32 total_page = 2;
  void clear_total_page();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page() const;
  void set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page() const;
  void _internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_verifie_list_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::pay_verifie_list_bk_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class pay_verifie_oper_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_verifie_oper_bk_c) */ {
 public:
  inline pay_verifie_oper_bk_c() : pay_verifie_oper_bk_c(nullptr) {}
  virtual ~pay_verifie_oper_bk_c();
  explicit constexpr pay_verifie_oper_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_verifie_oper_bk_c(const pay_verifie_oper_bk_c& from);
  pay_verifie_oper_bk_c(pay_verifie_oper_bk_c&& from) noexcept
    : pay_verifie_oper_bk_c() {
    *this = ::std::move(from);
  }

  inline pay_verifie_oper_bk_c& operator=(const pay_verifie_oper_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_verifie_oper_bk_c& operator=(pay_verifie_oper_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_verifie_oper_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_verifie_oper_bk_c* internal_default_instance() {
    return reinterpret_cast<const pay_verifie_oper_bk_c*>(
               &_pay_verifie_oper_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(pay_verifie_oper_bk_c& a, pay_verifie_oper_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_verifie_oper_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_verifie_oper_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_verifie_oper_bk_c* New() const final {
    return CreateMaybeMessage<pay_verifie_oper_bk_c>(nullptr);
  }

  pay_verifie_oper_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_verifie_oper_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_verifie_oper_bk_c& from);
  void MergeFrom(const pay_verifie_oper_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_verifie_oper_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_verifie_oper_bk_c";
  }
  protected:
  explicit pay_verifie_oper_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_verifie_oper_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class pay_verifie_oper_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.pay_verifie_oper_bk_s) */ {
 public:
  inline pay_verifie_oper_bk_s() : pay_verifie_oper_bk_s(nullptr) {}
  virtual ~pay_verifie_oper_bk_s();
  explicit constexpr pay_verifie_oper_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pay_verifie_oper_bk_s(const pay_verifie_oper_bk_s& from);
  pay_verifie_oper_bk_s(pay_verifie_oper_bk_s&& from) noexcept
    : pay_verifie_oper_bk_s() {
    *this = ::std::move(from);
  }

  inline pay_verifie_oper_bk_s& operator=(const pay_verifie_oper_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline pay_verifie_oper_bk_s& operator=(pay_verifie_oper_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pay_verifie_oper_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const pay_verifie_oper_bk_s* internal_default_instance() {
    return reinterpret_cast<const pay_verifie_oper_bk_s*>(
               &_pay_verifie_oper_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(pay_verifie_oper_bk_s& a, pay_verifie_oper_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(pay_verifie_oper_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pay_verifie_oper_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pay_verifie_oper_bk_s* New() const final {
    return CreateMaybeMessage<pay_verifie_oper_bk_s>(nullptr);
  }

  pay_verifie_oper_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pay_verifie_oper_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pay_verifie_oper_bk_s& from);
  void MergeFrom(const pay_verifie_oper_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pay_verifie_oper_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.pay_verifie_oper_bk_s";
  }
  protected:
  explicit pay_verifie_oper_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.pay_verifie_oper_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class create_user_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.create_user_bk_c) */ {
 public:
  inline create_user_bk_c() : create_user_bk_c(nullptr) {}
  virtual ~create_user_bk_c();
  explicit constexpr create_user_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  create_user_bk_c(const create_user_bk_c& from);
  create_user_bk_c(create_user_bk_c&& from) noexcept
    : create_user_bk_c() {
    *this = ::std::move(from);
  }

  inline create_user_bk_c& operator=(const create_user_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline create_user_bk_c& operator=(create_user_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const create_user_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const create_user_bk_c* internal_default_instance() {
    return reinterpret_cast<const create_user_bk_c*>(
               &_create_user_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(create_user_bk_c& a, create_user_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(create_user_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(create_user_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline create_user_bk_c* New() const final {
    return CreateMaybeMessage<create_user_bk_c>(nullptr);
  }

  create_user_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<create_user_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const create_user_bk_c& from);
  void MergeFrom(const create_user_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_user_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.create_user_bk_c";
  }
  protected:
  explicit create_user_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kPwdFieldNumber = 3,
    kPhoneFieldNumber = 1,
    kTradeFieldNumber = 4,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string pwd = 3;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 trade = 4;
  void clear_trade();
  ::PROTOBUF_NAMESPACE_ID::int32 trade() const;
  void set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trade() const;
  void _internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.create_user_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class create_user_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.create_user_bk_s) */ {
 public:
  inline create_user_bk_s() : create_user_bk_s(nullptr) {}
  virtual ~create_user_bk_s();
  explicit constexpr create_user_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  create_user_bk_s(const create_user_bk_s& from);
  create_user_bk_s(create_user_bk_s&& from) noexcept
    : create_user_bk_s() {
    *this = ::std::move(from);
  }

  inline create_user_bk_s& operator=(const create_user_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline create_user_bk_s& operator=(create_user_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const create_user_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const create_user_bk_s* internal_default_instance() {
    return reinterpret_cast<const create_user_bk_s*>(
               &_create_user_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(create_user_bk_s& a, create_user_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(create_user_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(create_user_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline create_user_bk_s* New() const final {
    return CreateMaybeMessage<create_user_bk_s>(nullptr);
  }

  create_user_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<create_user_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const create_user_bk_s& from);
  void MergeFrom(const create_user_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_user_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.create_user_bk_s";
  }
  protected:
  explicit create_user_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.create_user_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_proxy_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_proxy_bk_c) */ {
 public:
  inline user_proxy_bk_c() : user_proxy_bk_c(nullptr) {}
  virtual ~user_proxy_bk_c();
  explicit constexpr user_proxy_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_proxy_bk_c(const user_proxy_bk_c& from);
  user_proxy_bk_c(user_proxy_bk_c&& from) noexcept
    : user_proxy_bk_c() {
    *this = ::std::move(from);
  }

  inline user_proxy_bk_c& operator=(const user_proxy_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_proxy_bk_c& operator=(user_proxy_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_proxy_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_proxy_bk_c* internal_default_instance() {
    return reinterpret_cast<const user_proxy_bk_c*>(
               &_user_proxy_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(user_proxy_bk_c& a, user_proxy_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(user_proxy_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_proxy_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_proxy_bk_c* New() const final {
    return CreateMaybeMessage<user_proxy_bk_c>(nullptr);
  }

  user_proxy_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_proxy_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_proxy_bk_c& from);
  void MergeFrom(const user_proxy_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_proxy_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_proxy_bk_c";
  }
  protected:
  explicit user_proxy_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_proxy_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class user_proxy_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.user_proxy_bk_s) */ {
 public:
  inline user_proxy_bk_s() : user_proxy_bk_s(nullptr) {}
  virtual ~user_proxy_bk_s();
  explicit constexpr user_proxy_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_proxy_bk_s(const user_proxy_bk_s& from);
  user_proxy_bk_s(user_proxy_bk_s&& from) noexcept
    : user_proxy_bk_s() {
    *this = ::std::move(from);
  }

  inline user_proxy_bk_s& operator=(const user_proxy_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_proxy_bk_s& operator=(user_proxy_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_proxy_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_proxy_bk_s* internal_default_instance() {
    return reinterpret_cast<const user_proxy_bk_s*>(
               &_user_proxy_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(user_proxy_bk_s& a, user_proxy_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(user_proxy_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_proxy_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_proxy_bk_s* New() const final {
    return CreateMaybeMessage<user_proxy_bk_s>(nullptr);
  }

  user_proxy_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_proxy_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_proxy_bk_s& from);
  void MergeFrom(const user_proxy_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_proxy_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.user_proxy_bk_s";
  }
  protected:
  explicit user_proxy_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 2,
    kParentNichenFieldNumber = 4,
    kPhoneFieldNumber = 1,
    kParentPhoneFieldNumber = 3,
    kSum1ActivatedFieldNumber = 5,
    kCount1PhoneFieldNumber = 6,
    kSum2ActivatedFieldNumber = 7,
    kCount2PhoneFieldNumber = 8,
    kSum3ActivatedFieldNumber = 9,
    kCount3PhoneFieldNumber = 10,
    kSum99ActivatedFieldNumber = 11,
    kCount99PhoneFieldNumber = 12,
    kTeamTotalIncomeFieldNumber = 13,
  };
  // string nichen = 2;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // string parent_nichen = 4;
  void clear_parent_nichen();
  const std::string& parent_nichen() const;
  void set_parent_nichen(const std::string& value);
  void set_parent_nichen(std::string&& value);
  void set_parent_nichen(const char* value);
  void set_parent_nichen(const char* value, size_t size);
  std::string* mutable_parent_nichen();
  std::string* release_parent_nichen();
  void set_allocated_parent_nichen(std::string* parent_nichen);
  private:
  const std::string& _internal_parent_nichen() const;
  void _internal_set_parent_nichen(const std::string& value);
  std::string* _internal_mutable_parent_nichen();
  public:

  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 parent_phone = 3;
  void clear_parent_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 parent_phone() const;
  void set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parent_phone() const;
  void _internal_set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 sum_1_activated = 5;
  void clear_sum_1_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 sum_1_activated() const;
  void set_sum_1_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sum_1_activated() const;
  void _internal_set_sum_1_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count_1_phone = 6;
  void clear_count_1_phone();
  ::PROTOBUF_NAMESPACE_ID::int32 count_1_phone() const;
  void set_count_1_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_1_phone() const;
  void _internal_set_count_1_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sum_2_activated = 7;
  void clear_sum_2_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 sum_2_activated() const;
  void set_sum_2_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sum_2_activated() const;
  void _internal_set_sum_2_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count_2_phone = 8;
  void clear_count_2_phone();
  ::PROTOBUF_NAMESPACE_ID::int32 count_2_phone() const;
  void set_count_2_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_2_phone() const;
  void _internal_set_count_2_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sum_3_activated = 9;
  void clear_sum_3_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 sum_3_activated() const;
  void set_sum_3_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sum_3_activated() const;
  void _internal_set_sum_3_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count_3_phone = 10;
  void clear_count_3_phone();
  ::PROTOBUF_NAMESPACE_ID::int32 count_3_phone() const;
  void set_count_3_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_3_phone() const;
  void _internal_set_count_3_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sum_99_activated = 11;
  void clear_sum_99_activated();
  ::PROTOBUF_NAMESPACE_ID::int32 sum_99_activated() const;
  void set_sum_99_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sum_99_activated() const;
  void _internal_set_sum_99_activated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count_99_phone = 12;
  void clear_count_99_phone();
  ::PROTOBUF_NAMESPACE_ID::int32 count_99_phone() const;
  void set_count_99_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_99_phone() const;
  void _internal_set_count_99_phone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float team_total_income = 13;
  void clear_team_total_income();
  float team_total_income() const;
  void set_team_total_income(float value);
  private:
  float _internal_team_total_income() const;
  void _internal_set_team_total_income(float value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.user_proxy_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_nichen_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_1_activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_1_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_2_activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_2_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_3_activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_3_phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_99_activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_99_phone_;
  float team_total_income_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class close_user_bk_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.close_user_bk_c) */ {
 public:
  inline close_user_bk_c() : close_user_bk_c(nullptr) {}
  virtual ~close_user_bk_c();
  explicit constexpr close_user_bk_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  close_user_bk_c(const close_user_bk_c& from);
  close_user_bk_c(close_user_bk_c&& from) noexcept
    : close_user_bk_c() {
    *this = ::std::move(from);
  }

  inline close_user_bk_c& operator=(const close_user_bk_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline close_user_bk_c& operator=(close_user_bk_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const close_user_bk_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const close_user_bk_c* internal_default_instance() {
    return reinterpret_cast<const close_user_bk_c*>(
               &_close_user_bk_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(close_user_bk_c& a, close_user_bk_c& b) {
    a.Swap(&b);
  }
  inline void Swap(close_user_bk_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(close_user_bk_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline close_user_bk_c* New() const final {
    return CreateMaybeMessage<close_user_bk_c>(nullptr);
  }

  close_user_bk_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<close_user_bk_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const close_user_bk_c& from);
  void MergeFrom(const close_user_bk_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(close_user_bk_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.close_user_bk_c";
  }
  protected:
  explicit close_user_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
  };
  // int64 phone = 1;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.close_user_bk_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class close_user_bk_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.close_user_bk_s) */ {
 public:
  inline close_user_bk_s() : close_user_bk_s(nullptr) {}
  virtual ~close_user_bk_s();
  explicit constexpr close_user_bk_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  close_user_bk_s(const close_user_bk_s& from);
  close_user_bk_s(close_user_bk_s&& from) noexcept
    : close_user_bk_s() {
    *this = ::std::move(from);
  }

  inline close_user_bk_s& operator=(const close_user_bk_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline close_user_bk_s& operator=(close_user_bk_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const close_user_bk_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const close_user_bk_s* internal_default_instance() {
    return reinterpret_cast<const close_user_bk_s*>(
               &_close_user_bk_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(close_user_bk_s& a, close_user_bk_s& b) {
    a.Swap(&b);
  }
  inline void Swap(close_user_bk_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(close_user_bk_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline close_user_bk_s* New() const final {
    return CreateMaybeMessage<close_user_bk_s>(nullptr);
  }

  close_user_bk_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<close_user_bk_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const close_user_bk_s& from);
  void MergeFrom(const close_user_bk_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(close_user_bk_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.close_user_bk_s";
  }
  protected:
  explicit close_user_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.close_user_bk_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class new_recharge_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.new_recharge_s) */ {
 public:
  inline new_recharge_s() : new_recharge_s(nullptr) {}
  virtual ~new_recharge_s();
  explicit constexpr new_recharge_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  new_recharge_s(const new_recharge_s& from);
  new_recharge_s(new_recharge_s&& from) noexcept
    : new_recharge_s() {
    *this = ::std::move(from);
  }

  inline new_recharge_s& operator=(const new_recharge_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline new_recharge_s& operator=(new_recharge_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const new_recharge_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const new_recharge_s* internal_default_instance() {
    return reinterpret_cast<const new_recharge_s*>(
               &_new_recharge_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(new_recharge_s& a, new_recharge_s& b) {
    a.Swap(&b);
  }
  inline void Swap(new_recharge_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(new_recharge_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline new_recharge_s* New() const final {
    return CreateMaybeMessage<new_recharge_s>(nullptr);
  }

  new_recharge_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<new_recharge_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const new_recharge_s& from);
  void MergeFrom(const new_recharge_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(new_recharge_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.new_recharge_s";
  }
  protected:
  explicit new_recharge_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.new_recharge_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_oper_list_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_oper_list_c) */ {
 public:
  inline contract_oper_list_c() : contract_oper_list_c(nullptr) {}
  virtual ~contract_oper_list_c();
  explicit constexpr contract_oper_list_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_oper_list_c(const contract_oper_list_c& from);
  contract_oper_list_c(contract_oper_list_c&& from) noexcept
    : contract_oper_list_c() {
    *this = ::std::move(from);
  }

  inline contract_oper_list_c& operator=(const contract_oper_list_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_oper_list_c& operator=(contract_oper_list_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_oper_list_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_oper_list_c* internal_default_instance() {
    return reinterpret_cast<const contract_oper_list_c*>(
               &_contract_oper_list_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(contract_oper_list_c& a, contract_oper_list_c& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_oper_list_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_oper_list_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_oper_list_c* New() const final {
    return CreateMaybeMessage<contract_oper_list_c>(nullptr);
  }

  contract_oper_list_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_oper_list_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_oper_list_c& from);
  void MergeFrom(const contract_oper_list_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_oper_list_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_oper_list_c";
  }
  protected:
  explicit contract_oper_list_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_oper_list_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_oper_list_s_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_oper_list_s.item) */ {
 public:
  inline contract_oper_list_s_item() : contract_oper_list_s_item(nullptr) {}
  virtual ~contract_oper_list_s_item();
  explicit constexpr contract_oper_list_s_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_oper_list_s_item(const contract_oper_list_s_item& from);
  contract_oper_list_s_item(contract_oper_list_s_item&& from) noexcept
    : contract_oper_list_s_item() {
    *this = ::std::move(from);
  }

  inline contract_oper_list_s_item& operator=(const contract_oper_list_s_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_oper_list_s_item& operator=(contract_oper_list_s_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_oper_list_s_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_oper_list_s_item* internal_default_instance() {
    return reinterpret_cast<const contract_oper_list_s_item*>(
               &_contract_oper_list_s_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(contract_oper_list_s_item& a, contract_oper_list_s_item& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_oper_list_s_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_oper_list_s_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_oper_list_s_item* New() const final {
    return CreateMaybeMessage<contract_oper_list_s_item>(nullptr);
  }

  contract_oper_list_s_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_oper_list_s_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_oper_list_s_item& from);
  void MergeFrom(const contract_oper_list_s_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_oper_list_s_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_oper_list_s.item";
  }
  protected:
  explicit contract_oper_list_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNichenFieldNumber = 4,
    kContractTypeFieldNumber = 1,
    kPriceFieldNumber = 2,
    kPhoneFieldNumber = 3,
  };
  // string nichen = 4;
  void clear_nichen();
  const std::string& nichen() const;
  void set_nichen(const std::string& value);
  void set_nichen(std::string&& value);
  void set_nichen(const char* value);
  void set_nichen(const char* value, size_t size);
  std::string* mutable_nichen();
  std::string* release_nichen();
  void set_allocated_nichen(std::string* nichen);
  private:
  const std::string& _internal_nichen() const;
  void _internal_set_nichen(const std::string& value);
  std::string* _internal_mutable_nichen();
  public:

  // int32 contract_type = 1;
  void clear_contract_type();
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type() const;
  void set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contract_type() const;
  void _internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float price = 2;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int64 phone = 3;
  void clear_phone();
  ::PROTOBUF_NAMESPACE_ID::int64 phone() const;
  void set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_phone() const;
  void _internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_oper_list_s.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nichen_;
  ::PROTOBUF_NAMESPACE_ID::int32 contract_type_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_oper_list_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_oper_list_s) */ {
 public:
  inline contract_oper_list_s() : contract_oper_list_s(nullptr) {}
  virtual ~contract_oper_list_s();
  explicit constexpr contract_oper_list_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_oper_list_s(const contract_oper_list_s& from);
  contract_oper_list_s(contract_oper_list_s&& from) noexcept
    : contract_oper_list_s() {
    *this = ::std::move(from);
  }

  inline contract_oper_list_s& operator=(const contract_oper_list_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_oper_list_s& operator=(contract_oper_list_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_oper_list_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_oper_list_s* internal_default_instance() {
    return reinterpret_cast<const contract_oper_list_s*>(
               &_contract_oper_list_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(contract_oper_list_s& a, contract_oper_list_s& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_oper_list_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_oper_list_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_oper_list_s* New() const final {
    return CreateMaybeMessage<contract_oper_list_s>(nullptr);
  }

  contract_oper_list_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_oper_list_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_oper_list_s& from);
  void MergeFrom(const contract_oper_list_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_oper_list_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_oper_list_s";
  }
  protected:
  explicit contract_oper_list_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef contract_oper_list_s_item item;

  // accessors -------------------------------------------------------

  enum : int {
    kItsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .frmpub.protocc.contract_oper_list_s.item its = 1;
  int its_size() const;
  private:
  int _internal_its_size() const;
  public:
  void clear_its();
  ::frmpub::protocc::contract_oper_list_s_item* mutable_its(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_oper_list_s_item >*
      mutable_its();
  private:
  const ::frmpub::protocc::contract_oper_list_s_item& _internal_its(int index) const;
  ::frmpub::protocc::contract_oper_list_s_item* _internal_add_its();
  public:
  const ::frmpub::protocc::contract_oper_list_s_item& its(int index) const;
  ::frmpub::protocc::contract_oper_list_s_item* add_its();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_oper_list_s_item >&
      its() const;

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_oper_list_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_oper_list_s_item > its_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_oper_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_oper_c) */ {
 public:
  inline contract_oper_c() : contract_oper_c(nullptr) {}
  virtual ~contract_oper_c();
  explicit constexpr contract_oper_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_oper_c(const contract_oper_c& from);
  contract_oper_c(contract_oper_c&& from) noexcept
    : contract_oper_c() {
    *this = ::std::move(from);
  }

  inline contract_oper_c& operator=(const contract_oper_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_oper_c& operator=(contract_oper_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_oper_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_oper_c* internal_default_instance() {
    return reinterpret_cast<const contract_oper_c*>(
               &_contract_oper_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(contract_oper_c& a, contract_oper_c& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_oper_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_oper_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_oper_c* New() const final {
    return CreateMaybeMessage<contract_oper_c>(nullptr);
  }

  contract_oper_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_oper_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_oper_c& from);
  void MergeFrom(const contract_oper_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_oper_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_oper_c";
  }
  protected:
  explicit contract_oper_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_oper_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// -------------------------------------------------------------------

class contract_oper_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.contract_oper_s) */ {
 public:
  inline contract_oper_s() : contract_oper_s(nullptr) {}
  virtual ~contract_oper_s();
  explicit constexpr contract_oper_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_oper_s(const contract_oper_s& from);
  contract_oper_s(contract_oper_s&& from) noexcept
    : contract_oper_s() {
    *this = ::std::move(from);
  }

  inline contract_oper_s& operator=(const contract_oper_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_oper_s& operator=(contract_oper_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_oper_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_oper_s* internal_default_instance() {
    return reinterpret_cast<const contract_oper_s*>(
               &_contract_oper_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(contract_oper_s& a, contract_oper_s& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_oper_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_oper_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_oper_s* New() const final {
    return CreateMaybeMessage<contract_oper_s>(nullptr);
  }

  contract_oper_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_oper_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_oper_s& from);
  void MergeFrom(const contract_oper_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_oper_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.contract_oper_s";
  }
  protected:
  explicit contract_oper_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backend_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.contract_oper_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_bk_c

// int64 phone = 1;
inline void login_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 login_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 login_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_bk_c.phone)
  return _internal_phone();
}
inline void login_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void login_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_bk_c.phone)
}

// string pwd = 2;
inline void login_bk_c::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& login_bk_c::pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_bk_c.pwd)
  return _internal_pwd();
}
inline void login_bk_c::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_bk_c.pwd)
}
inline std::string* login_bk_c::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.login_bk_c.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& login_bk_c::_internal_pwd() const {
  return pwd_.Get();
}
inline void login_bk_c::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_bk_c::set_pwd(std::string&& value) {
  
  pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.login_bk_c.pwd)
}
inline void login_bk_c::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.login_bk_c.pwd)
}
inline void login_bk_c::set_pwd(const char* value,
    size_t size) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.login_bk_c.pwd)
}
inline std::string* login_bk_c::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_bk_c::release_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.login_bk_c.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_bk_c::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.login_bk_c.pwd)
}

// -------------------------------------------------------------------

// login_bk_s

// int32 result = 1;
inline void login_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 login_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.login_bk_s.result)
  return _internal_result();
}
inline void login_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void login_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.login_bk_s.result)
}

// -------------------------------------------------------------------

// crucial_bk_s

// int32 total_register_num = 1;
inline void crucial_bk_s::clear_total_register_num() {
  total_register_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::_internal_total_register_num() const {
  return total_register_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::total_register_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.total_register_num)
  return _internal_total_register_num();
}
inline void crucial_bk_s::_internal_set_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_register_num_ = value;
}
inline void crucial_bk_s::set_total_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_register_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.total_register_num)
}

// int32 today_register_num = 2;
inline void crucial_bk_s::clear_today_register_num() {
  today_register_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::_internal_today_register_num() const {
  return today_register_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::today_register_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.today_register_num)
  return _internal_today_register_num();
}
inline void crucial_bk_s::_internal_set_today_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  today_register_num_ = value;
}
inline void crucial_bk_s::set_today_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_today_register_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.today_register_num)
}

// int32 total_active_num = 3;
inline void crucial_bk_s::clear_total_active_num() {
  total_active_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::_internal_total_active_num() const {
  return total_active_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::total_active_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.total_active_num)
  return _internal_total_active_num();
}
inline void crucial_bk_s::_internal_set_total_active_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_active_num_ = value;
}
inline void crucial_bk_s::set_total_active_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_active_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.total_active_num)
}

// int32 today_active_num = 4;
inline void crucial_bk_s::clear_today_active_num() {
  today_active_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::_internal_today_active_num() const {
  return today_active_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::today_active_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.today_active_num)
  return _internal_today_active_num();
}
inline void crucial_bk_s::_internal_set_today_active_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  today_active_num_ = value;
}
inline void crucial_bk_s::set_today_active_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_today_active_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.today_active_num)
}

// int32 total_disenable_num = 5;
inline void crucial_bk_s::clear_total_disenable_num() {
  total_disenable_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::_internal_total_disenable_num() const {
  return total_disenable_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::total_disenable_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.total_disenable_num)
  return _internal_total_disenable_num();
}
inline void crucial_bk_s::_internal_set_total_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_disenable_num_ = value;
}
inline void crucial_bk_s::set_total_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_disenable_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.total_disenable_num)
}

// int32 today_disenable_num = 6;
inline void crucial_bk_s::clear_today_disenable_num() {
  today_disenable_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::_internal_today_disenable_num() const {
  return today_disenable_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 crucial_bk_s::today_disenable_num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.today_disenable_num)
  return _internal_today_disenable_num();
}
inline void crucial_bk_s::_internal_set_today_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  today_disenable_num_ = value;
}
inline void crucial_bk_s::set_today_disenable_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_today_disenable_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.today_disenable_num)
}

// float total_income = 7;
inline void crucial_bk_s::clear_total_income() {
  total_income_ = 0;
}
inline float crucial_bk_s::_internal_total_income() const {
  return total_income_;
}
inline float crucial_bk_s::total_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.crucial_bk_s.total_income)
  return _internal_total_income();
}
inline void crucial_bk_s::_internal_set_total_income(float value) {
  
  total_income_ = value;
}
inline void crucial_bk_s::set_total_income(float value) {
  _internal_set_total_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.crucial_bk_s.total_income)
}

// -------------------------------------------------------------------

// maillist_bk_s_item

// int32 id = 1;
inline void maillist_bk_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 maillist_bk_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 maillist_bk_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.maillist_bk_s.item.id)
  return _internal_id();
}
inline void maillist_bk_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void maillist_bk_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.maillist_bk_s.item.id)
}

// string topic = 2;
inline void maillist_bk_s_item::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& maillist_bk_s_item::topic() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.maillist_bk_s.item.topic)
  return _internal_topic();
}
inline void maillist_bk_s_item::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.maillist_bk_s.item.topic)
}
inline std::string* maillist_bk_s_item::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.maillist_bk_s.item.topic)
  return _internal_mutable_topic();
}
inline const std::string& maillist_bk_s_item::_internal_topic() const {
  return topic_.Get();
}
inline void maillist_bk_s_item::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void maillist_bk_s_item::set_topic(std::string&& value) {
  
  topic_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.maillist_bk_s.item.topic)
}
inline void maillist_bk_s_item::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.maillist_bk_s.item.topic)
}
inline void maillist_bk_s_item::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.maillist_bk_s.item.topic)
}
inline std::string* maillist_bk_s_item::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* maillist_bk_s_item::release_topic() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.maillist_bk_s.item.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void maillist_bk_s_item::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.maillist_bk_s.item.topic)
}

// string info = 3;
inline void maillist_bk_s_item::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& maillist_bk_s_item::info() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.maillist_bk_s.item.info)
  return _internal_info();
}
inline void maillist_bk_s_item::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.maillist_bk_s.item.info)
}
inline std::string* maillist_bk_s_item::mutable_info() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.maillist_bk_s.item.info)
  return _internal_mutable_info();
}
inline const std::string& maillist_bk_s_item::_internal_info() const {
  return info_.Get();
}
inline void maillist_bk_s_item::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void maillist_bk_s_item::set_info(std::string&& value) {
  
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.maillist_bk_s.item.info)
}
inline void maillist_bk_s_item::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.maillist_bk_s.item.info)
}
inline void maillist_bk_s_item::set_info(const char* value,
    size_t size) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.maillist_bk_s.item.info)
}
inline std::string* maillist_bk_s_item::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* maillist_bk_s_item::release_info() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.maillist_bk_s.item.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void maillist_bk_s_item::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.maillist_bk_s.item.info)
}

// int32 time = 4;
inline void maillist_bk_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 maillist_bk_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 maillist_bk_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.maillist_bk_s.item.time)
  return _internal_time();
}
inline void maillist_bk_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void maillist_bk_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.maillist_bk_s.item.time)
}

// -------------------------------------------------------------------

// maillist_bk_s

// repeated .frmpub.protocc.maillist_bk_s.item its = 1;
inline int maillist_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int maillist_bk_s::its_size() const {
  return _internal_its_size();
}
inline void maillist_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::maillist_bk_s_item* maillist_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.maillist_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::maillist_bk_s_item >*
maillist_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.maillist_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::maillist_bk_s_item& maillist_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::maillist_bk_s_item& maillist_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.maillist_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::maillist_bk_s_item* maillist_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::maillist_bk_s_item* maillist_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.maillist_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::maillist_bk_s_item >&
maillist_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.maillist_bk_s.its)
  return its_;
}

// -------------------------------------------------------------------

// addmail_bk_c

// string topic = 2;
inline void addmail_bk_c::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& addmail_bk_c::topic() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.addmail_bk_c.topic)
  return _internal_topic();
}
inline void addmail_bk_c::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.addmail_bk_c.topic)
}
inline std::string* addmail_bk_c::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.addmail_bk_c.topic)
  return _internal_mutable_topic();
}
inline const std::string& addmail_bk_c::_internal_topic() const {
  return topic_.Get();
}
inline void addmail_bk_c::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addmail_bk_c::set_topic(std::string&& value) {
  
  topic_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.addmail_bk_c.topic)
}
inline void addmail_bk_c::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.addmail_bk_c.topic)
}
inline void addmail_bk_c::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.addmail_bk_c.topic)
}
inline std::string* addmail_bk_c::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addmail_bk_c::release_topic() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.addmail_bk_c.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addmail_bk_c::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.addmail_bk_c.topic)
}

// string info = 3;
inline void addmail_bk_c::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& addmail_bk_c::info() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.addmail_bk_c.info)
  return _internal_info();
}
inline void addmail_bk_c::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.addmail_bk_c.info)
}
inline std::string* addmail_bk_c::mutable_info() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.addmail_bk_c.info)
  return _internal_mutable_info();
}
inline const std::string& addmail_bk_c::_internal_info() const {
  return info_.Get();
}
inline void addmail_bk_c::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addmail_bk_c::set_info(std::string&& value) {
  
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.addmail_bk_c.info)
}
inline void addmail_bk_c::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.addmail_bk_c.info)
}
inline void addmail_bk_c::set_info(const char* value,
    size_t size) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.addmail_bk_c.info)
}
inline std::string* addmail_bk_c::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addmail_bk_c::release_info() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.addmail_bk_c.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addmail_bk_c::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.addmail_bk_c.info)
}

// -------------------------------------------------------------------

// addmail_bk_s

// int32 result = 1;
inline void addmail_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addmail_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addmail_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.addmail_bk_s.result)
  return _internal_result();
}
inline void addmail_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void addmail_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.addmail_bk_s.result)
}

// -------------------------------------------------------------------

// contract_type_list_bk_s_item

// int32 id = 1;
inline void contract_type_list_bk_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.id)
  return _internal_id();
}
inline void contract_type_list_bk_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void contract_type_list_bk_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.id)
}

// int32 cycle = 2;
inline void contract_type_list_bk_s_item::clear_cycle() {
  cycle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_cycle() const {
  return cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::cycle() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.cycle)
  return _internal_cycle();
}
inline void contract_type_list_bk_s_item::_internal_set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cycle_ = value;
}
inline void contract_type_list_bk_s_item::set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.cycle)
}

// float interest_rate = 3;
inline void contract_type_list_bk_s_item::clear_interest_rate() {
  interest_rate_ = 0;
}
inline float contract_type_list_bk_s_item::_internal_interest_rate() const {
  return interest_rate_;
}
inline float contract_type_list_bk_s_item::interest_rate() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.interest_rate)
  return _internal_interest_rate();
}
inline void contract_type_list_bk_s_item::_internal_set_interest_rate(float value) {
  
  interest_rate_ = value;
}
inline void contract_type_list_bk_s_item::set_interest_rate(float value) {
  _internal_set_interest_rate(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.interest_rate)
}

// int32 reserve_dispatch_coin = 4;
inline void contract_type_list_bk_s_item::clear_reserve_dispatch_coin() {
  reserve_dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_reserve_dispatch_coin() const {
  return reserve_dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::reserve_dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.reserve_dispatch_coin)
  return _internal_reserve_dispatch_coin();
}
inline void contract_type_list_bk_s_item::_internal_set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reserve_dispatch_coin_ = value;
}
inline void contract_type_list_bk_s_item::set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserve_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.reserve_dispatch_coin)
}

// int32 rush_dispathch_coin = 5;
inline void contract_type_list_bk_s_item::clear_rush_dispathch_coin() {
  rush_dispathch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_rush_dispathch_coin() const {
  return rush_dispathch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::rush_dispathch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.rush_dispathch_coin)
  return _internal_rush_dispathch_coin();
}
inline void contract_type_list_bk_s_item::_internal_set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_dispathch_coin_ = value;
}
inline void contract_type_list_bk_s_item::set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_dispathch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.rush_dispathch_coin)
}

// int32 rush_begin_time = 6;
inline void contract_type_list_bk_s_item::clear_rush_begin_time() {
  rush_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_rush_begin_time() const {
  return rush_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::rush_begin_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.rush_begin_time)
  return _internal_rush_begin_time();
}
inline void contract_type_list_bk_s_item::_internal_set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_begin_time_ = value;
}
inline void contract_type_list_bk_s_item::set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_begin_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.rush_begin_time)
}

// int32 rush_end_time = 7;
inline void contract_type_list_bk_s_item::clear_rush_end_time() {
  rush_end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_rush_end_time() const {
  return rush_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::rush_end_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.rush_end_time)
  return _internal_rush_end_time();
}
inline void contract_type_list_bk_s_item::_internal_set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_end_time_ = value;
}
inline void contract_type_list_bk_s_item::set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_end_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.rush_end_time)
}

// int32 state = 8;
inline void contract_type_list_bk_s_item::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.state)
  return _internal_state();
}
inline void contract_type_list_bk_s_item::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void contract_type_list_bk_s_item::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.state)
}

// string name = 9;
inline void contract_type_list_bk_s_item::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& contract_type_list_bk_s_item::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.name)
  return _internal_name();
}
inline void contract_type_list_bk_s_item::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.name)
}
inline std::string* contract_type_list_bk_s_item::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.contract_type_list_bk_s.item.name)
  return _internal_mutable_name();
}
inline const std::string& contract_type_list_bk_s_item::_internal_name() const {
  return name_.Get();
}
inline void contract_type_list_bk_s_item::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void contract_type_list_bk_s_item::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.contract_type_list_bk_s.item.name)
}
inline void contract_type_list_bk_s_item::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.contract_type_list_bk_s.item.name)
}
inline void contract_type_list_bk_s_item::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.contract_type_list_bk_s.item.name)
}
inline std::string* contract_type_list_bk_s_item::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* contract_type_list_bk_s_item::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.contract_type_list_bk_s.item.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void contract_type_list_bk_s_item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.contract_type_list_bk_s.item.name)
}

// int32 min_price = 10;
inline void contract_type_list_bk_s_item::clear_min_price() {
  min_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_min_price() const {
  return min_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::min_price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.min_price)
  return _internal_min_price();
}
inline void contract_type_list_bk_s_item::_internal_set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_price_ = value;
}
inline void contract_type_list_bk_s_item::set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.min_price)
}

// int32 max_price = 11;
inline void contract_type_list_bk_s_item::clear_max_price() {
  max_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::_internal_max_price() const {
  return max_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_type_list_bk_s_item::max_price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.item.max_price)
  return _internal_max_price();
}
inline void contract_type_list_bk_s_item::_internal_set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_price_ = value;
}
inline void contract_type_list_bk_s_item::set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_type_list_bk_s.item.max_price)
}

// -------------------------------------------------------------------

// contract_type_list_bk_s

// repeated .frmpub.protocc.contract_type_list_bk_s.item its = 1;
inline int contract_type_list_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int contract_type_list_bk_s::its_size() const {
  return _internal_its_size();
}
inline void contract_type_list_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::contract_type_list_bk_s_item* contract_type_list_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.contract_type_list_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_type_list_bk_s_item >*
contract_type_list_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.contract_type_list_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::contract_type_list_bk_s_item& contract_type_list_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::contract_type_list_bk_s_item& contract_type_list_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_type_list_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::contract_type_list_bk_s_item* contract_type_list_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::contract_type_list_bk_s_item* contract_type_list_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.contract_type_list_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_type_list_bk_s_item >&
contract_type_list_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.contract_type_list_bk_s.its)
  return its_;
}

// -------------------------------------------------------------------

// update_contract_type_bk_c

// int32 id = 1;
inline void update_contract_type_bk_c::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.id)
  return _internal_id();
}
inline void update_contract_type_bk_c::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void update_contract_type_bk_c::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.id)
}

// int32 cycle = 2;
inline void update_contract_type_bk_c::clear_cycle() {
  cycle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_cycle() const {
  return cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::cycle() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.cycle)
  return _internal_cycle();
}
inline void update_contract_type_bk_c::_internal_set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cycle_ = value;
}
inline void update_contract_type_bk_c::set_cycle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.cycle)
}

// float interest_rate = 3;
inline void update_contract_type_bk_c::clear_interest_rate() {
  interest_rate_ = 0;
}
inline float update_contract_type_bk_c::_internal_interest_rate() const {
  return interest_rate_;
}
inline float update_contract_type_bk_c::interest_rate() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.interest_rate)
  return _internal_interest_rate();
}
inline void update_contract_type_bk_c::_internal_set_interest_rate(float value) {
  
  interest_rate_ = value;
}
inline void update_contract_type_bk_c::set_interest_rate(float value) {
  _internal_set_interest_rate(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.interest_rate)
}

// int32 reserve_dispatch_coin = 4;
inline void update_contract_type_bk_c::clear_reserve_dispatch_coin() {
  reserve_dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_reserve_dispatch_coin() const {
  return reserve_dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::reserve_dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.reserve_dispatch_coin)
  return _internal_reserve_dispatch_coin();
}
inline void update_contract_type_bk_c::_internal_set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reserve_dispatch_coin_ = value;
}
inline void update_contract_type_bk_c::set_reserve_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserve_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.reserve_dispatch_coin)
}

// int32 rush_dispathch_coin = 5;
inline void update_contract_type_bk_c::clear_rush_dispathch_coin() {
  rush_dispathch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_rush_dispathch_coin() const {
  return rush_dispathch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::rush_dispathch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.rush_dispathch_coin)
  return _internal_rush_dispathch_coin();
}
inline void update_contract_type_bk_c::_internal_set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_dispathch_coin_ = value;
}
inline void update_contract_type_bk_c::set_rush_dispathch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_dispathch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.rush_dispathch_coin)
}

// int32 rush_begin_time = 6;
inline void update_contract_type_bk_c::clear_rush_begin_time() {
  rush_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_rush_begin_time() const {
  return rush_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::rush_begin_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.rush_begin_time)
  return _internal_rush_begin_time();
}
inline void update_contract_type_bk_c::_internal_set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_begin_time_ = value;
}
inline void update_contract_type_bk_c::set_rush_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_begin_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.rush_begin_time)
}

// int32 rush_end_time = 7;
inline void update_contract_type_bk_c::clear_rush_end_time() {
  rush_end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_rush_end_time() const {
  return rush_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::rush_end_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.rush_end_time)
  return _internal_rush_end_time();
}
inline void update_contract_type_bk_c::_internal_set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_end_time_ = value;
}
inline void update_contract_type_bk_c::set_rush_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_end_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.rush_end_time)
}

// int32 state = 8;
inline void update_contract_type_bk_c::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.state)
  return _internal_state();
}
inline void update_contract_type_bk_c::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void update_contract_type_bk_c::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.state)
}

// string name = 9;
inline void update_contract_type_bk_c::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& update_contract_type_bk_c::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.name)
  return _internal_name();
}
inline void update_contract_type_bk_c::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.name)
}
inline std::string* update_contract_type_bk_c::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.update_contract_type_bk_c.name)
  return _internal_mutable_name();
}
inline const std::string& update_contract_type_bk_c::_internal_name() const {
  return name_.Get();
}
inline void update_contract_type_bk_c::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void update_contract_type_bk_c::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.update_contract_type_bk_c.name)
}
inline void update_contract_type_bk_c::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.update_contract_type_bk_c.name)
}
inline void update_contract_type_bk_c::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.update_contract_type_bk_c.name)
}
inline std::string* update_contract_type_bk_c::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* update_contract_type_bk_c::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.update_contract_type_bk_c.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void update_contract_type_bk_c::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.update_contract_type_bk_c.name)
}

// int32 min_price = 10;
inline void update_contract_type_bk_c::clear_min_price() {
  min_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_min_price() const {
  return min_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::min_price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.min_price)
  return _internal_min_price();
}
inline void update_contract_type_bk_c::_internal_set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_price_ = value;
}
inline void update_contract_type_bk_c::set_min_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.min_price)
}

// int32 max_price = 11;
inline void update_contract_type_bk_c::clear_max_price() {
  max_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::_internal_max_price() const {
  return max_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_c::max_price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_c.max_price)
  return _internal_max_price();
}
inline void update_contract_type_bk_c::_internal_set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_price_ = value;
}
inline void update_contract_type_bk_c::set_max_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_c.max_price)
}

// -------------------------------------------------------------------

// update_contract_type_bk_s

// int32 result = 1;
inline void update_contract_type_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_contract_type_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_contract_type_bk_s.result)
  return _internal_result();
}
inline void update_contract_type_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void update_contract_type_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_contract_type_bk_s.result)
}

// -------------------------------------------------------------------

// add_contract_bk_c

// int64 phone = 1;
inline void add_contract_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 add_contract_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 add_contract_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.add_contract_bk_c.phone)
  return _internal_phone();
}
inline void add_contract_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void add_contract_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.add_contract_bk_c.phone)
}

// int32 type = 2;
inline void add_contract_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_contract_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_contract_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.add_contract_bk_c.type)
  return _internal_type();
}
inline void add_contract_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void add_contract_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.add_contract_bk_c.type)
}

// float price = 3;
inline void add_contract_bk_c::clear_price() {
  price_ = 0;
}
inline float add_contract_bk_c::_internal_price() const {
  return price_;
}
inline float add_contract_bk_c::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.add_contract_bk_c.price)
  return _internal_price();
}
inline void add_contract_bk_c::_internal_set_price(float value) {
  
  price_ = value;
}
inline void add_contract_bk_c::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.add_contract_bk_c.price)
}

// int32 num = 4;
inline void add_contract_bk_c::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_contract_bk_c::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_contract_bk_c::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.add_contract_bk_c.num)
  return _internal_num();
}
inline void add_contract_bk_c::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void add_contract_bk_c::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.add_contract_bk_c.num)
}

// -------------------------------------------------------------------

// add_contract_bk_s

// int32 result = 1;
inline void add_contract_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_contract_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_contract_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.add_contract_bk_s.result)
  return _internal_result();
}
inline void add_contract_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void add_contract_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.add_contract_bk_s.result)
}

// -------------------------------------------------------------------

// booking_count_bk_s_item

// int32 contract_type = 1;
inline void booking_count_bk_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_count_bk_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_count_bk_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_count_bk_s.item.contract_type)
  return _internal_contract_type();
}
inline void booking_count_bk_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void booking_count_bk_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_count_bk_s.item.contract_type)
}

// int32 num = 2;
inline void booking_count_bk_s_item::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_count_bk_s_item::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_count_bk_s_item::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_count_bk_s.item.num)
  return _internal_num();
}
inline void booking_count_bk_s_item::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void booking_count_bk_s_item::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_count_bk_s.item.num)
}

// -------------------------------------------------------------------

// booking_count_bk_s

// repeated .frmpub.protocc.booking_count_bk_s.item its = 1;
inline int booking_count_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int booking_count_bk_s::its_size() const {
  return _internal_its_size();
}
inline void booking_count_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::booking_count_bk_s_item* booking_count_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.booking_count_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_count_bk_s_item >*
booking_count_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.booking_count_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::booking_count_bk_s_item& booking_count_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::booking_count_bk_s_item& booking_count_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_count_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::booking_count_bk_s_item* booking_count_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::booking_count_bk_s_item* booking_count_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.booking_count_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_count_bk_s_item >&
booking_count_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.booking_count_bk_s.its)
  return its_;
}

// -------------------------------------------------------------------

// booking_bk_c

// int64 phone = 1;
inline void booking_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 booking_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 booking_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_c.phone)
  return _internal_phone();
}
inline void booking_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void booking_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_c.phone)
}

// int32 type = 2;
inline void booking_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_c.type)
  return _internal_type();
}
inline void booking_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void booking_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_c.type)
}

// string begin_time = 3;
inline void booking_bk_c::clear_begin_time() {
  begin_time_.ClearToEmpty();
}
inline const std::string& booking_bk_c::begin_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_c.begin_time)
  return _internal_begin_time();
}
inline void booking_bk_c::set_begin_time(const std::string& value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_c.begin_time)
}
inline std::string* booking_bk_c::mutable_begin_time() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.booking_bk_c.begin_time)
  return _internal_mutable_begin_time();
}
inline const std::string& booking_bk_c::_internal_begin_time() const {
  return begin_time_.Get();
}
inline void booking_bk_c::_internal_set_begin_time(const std::string& value) {
  
  begin_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void booking_bk_c::set_begin_time(std::string&& value) {
  
  begin_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.booking_bk_c.begin_time)
}
inline void booking_bk_c::set_begin_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  begin_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.booking_bk_c.begin_time)
}
inline void booking_bk_c::set_begin_time(const char* value,
    size_t size) {
  
  begin_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.booking_bk_c.begin_time)
}
inline std::string* booking_bk_c::_internal_mutable_begin_time() {
  
  return begin_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* booking_bk_c::release_begin_time() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.booking_bk_c.begin_time)
  return begin_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void booking_bk_c::set_allocated_begin_time(std::string* begin_time) {
  if (begin_time != nullptr) {
    
  } else {
    
  }
  begin_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), begin_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.booking_bk_c.begin_time)
}

// string end_time = 4;
inline void booking_bk_c::clear_end_time() {
  end_time_.ClearToEmpty();
}
inline const std::string& booking_bk_c::end_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_c.end_time)
  return _internal_end_time();
}
inline void booking_bk_c::set_end_time(const std::string& value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_c.end_time)
}
inline std::string* booking_bk_c::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.booking_bk_c.end_time)
  return _internal_mutable_end_time();
}
inline const std::string& booking_bk_c::_internal_end_time() const {
  return end_time_.Get();
}
inline void booking_bk_c::_internal_set_end_time(const std::string& value) {
  
  end_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void booking_bk_c::set_end_time(std::string&& value) {
  
  end_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.booking_bk_c.end_time)
}
inline void booking_bk_c::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.booking_bk_c.end_time)
}
inline void booking_bk_c::set_end_time(const char* value,
    size_t size) {
  
  end_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.booking_bk_c.end_time)
}
inline std::string* booking_bk_c::_internal_mutable_end_time() {
  
  return end_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* booking_bk_c::release_end_time() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.booking_bk_c.end_time)
  return end_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void booking_bk_c::set_allocated_end_time(std::string* end_time) {
  if (end_time != nullptr) {
    
  } else {
    
  }
  end_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.booking_bk_c.end_time)
}

// int32 curr_page = 5;
inline void booking_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_c.curr_page)
  return _internal_curr_page();
}
inline void booking_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void booking_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_c.curr_page)
}

// -------------------------------------------------------------------

// booking_bk_s_item

// int64 phone = 1;
inline void booking_bk_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 booking_bk_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 booking_bk_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.item.phone)
  return _internal_phone();
}
inline void booking_bk_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void booking_bk_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.item.phone)
}

// string nichen = 2;
inline void booking_bk_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& booking_bk_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.item.nichen)
  return _internal_nichen();
}
inline void booking_bk_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.item.nichen)
}
inline std::string* booking_bk_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.booking_bk_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& booking_bk_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void booking_bk_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void booking_bk_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.booking_bk_s.item.nichen)
}
inline void booking_bk_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.booking_bk_s.item.nichen)
}
inline void booking_bk_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.booking_bk_s.item.nichen)
}
inline std::string* booking_bk_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* booking_bk_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.booking_bk_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void booking_bk_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.booking_bk_s.item.nichen)
}

// int32 contract_type = 3;
inline void booking_bk_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.item.contract_type)
  return _internal_contract_type();
}
inline void booking_bk_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void booking_bk_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.item.contract_type)
}

// int32 time = 4;
inline void booking_bk_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.item.time)
  return _internal_time();
}
inline void booking_bk_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void booking_bk_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.item.time)
}

// int32 rob = 5;
inline void booking_bk_s_item::clear_rob() {
  rob_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::_internal_rob() const {
  return rob_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::rob() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.item.rob)
  return _internal_rob();
}
inline void booking_bk_s_item::_internal_set_rob(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rob_ = value;
}
inline void booking_bk_s_item::set_rob(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rob(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.item.rob)
}

// int32 robed = 6;
inline void booking_bk_s_item::clear_robed() {
  robed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::_internal_robed() const {
  return robed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s_item::robed() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.item.robed)
  return _internal_robed();
}
inline void booking_bk_s_item::_internal_set_robed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robed_ = value;
}
inline void booking_bk_s_item::set_robed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robed(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.item.robed)
}

// -------------------------------------------------------------------

// booking_bk_s

// repeated .frmpub.protocc.booking_bk_s.item its = 1;
inline int booking_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int booking_bk_s::its_size() const {
  return _internal_its_size();
}
inline void booking_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::booking_bk_s_item* booking_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.booking_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_bk_s_item >*
booking_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.booking_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::booking_bk_s_item& booking_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::booking_bk_s_item& booking_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::booking_bk_s_item* booking_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::booking_bk_s_item* booking_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.booking_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::booking_bk_s_item >&
booking_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.booking_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void booking_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 booking_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.booking_bk_s.total_page)
  return _internal_total_page();
}
inline void booking_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void booking_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.booking_bk_s.total_page)
}

// -------------------------------------------------------------------

// ripe_count_bk_s_item

// int32 contract_type = 1;
inline void ripe_count_bk_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_count_bk_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_count_bk_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_count_bk_s.item.contract_type)
  return _internal_contract_type();
}
inline void ripe_count_bk_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void ripe_count_bk_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_count_bk_s.item.contract_type)
}

// int32 num = 2;
inline void ripe_count_bk_s_item::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_count_bk_s_item::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_count_bk_s_item::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_count_bk_s.item.num)
  return _internal_num();
}
inline void ripe_count_bk_s_item::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void ripe_count_bk_s_item::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_count_bk_s.item.num)
}

// -------------------------------------------------------------------

// ripe_count_bk_s

// repeated .frmpub.protocc.ripe_count_bk_s.item its = 1;
inline int ripe_count_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int ripe_count_bk_s::its_size() const {
  return _internal_its_size();
}
inline void ripe_count_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::ripe_count_bk_s_item* ripe_count_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.ripe_count_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_count_bk_s_item >*
ripe_count_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.ripe_count_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::ripe_count_bk_s_item& ripe_count_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::ripe_count_bk_s_item& ripe_count_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_count_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::ripe_count_bk_s_item* ripe_count_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::ripe_count_bk_s_item* ripe_count_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.ripe_count_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_count_bk_s_item >&
ripe_count_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.ripe_count_bk_s.its)
  return its_;
}

// -------------------------------------------------------------------

// ripe_bk_c

// int64 phone = 1;
inline void ripe_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ripe_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ripe_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_c.phone)
  return _internal_phone();
}
inline void ripe_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void ripe_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_c.phone)
}

// int32 type = 2;
inline void ripe_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_c.type)
  return _internal_type();
}
inline void ripe_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ripe_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_c.type)
}

// int32 curr_page = 3;
inline void ripe_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_c.curr_page)
  return _internal_curr_page();
}
inline void ripe_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void ripe_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_c.curr_page)
}

// -------------------------------------------------------------------

// ripe_bk_s_item

// int64 phone = 1;
inline void ripe_bk_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ripe_bk_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ripe_bk_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.item.phone)
  return _internal_phone();
}
inline void ripe_bk_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void ripe_bk_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_s.item.phone)
}

// string nichen = 2;
inline void ripe_bk_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& ripe_bk_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.item.nichen)
  return _internal_nichen();
}
inline void ripe_bk_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_s.item.nichen)
}
inline std::string* ripe_bk_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.ripe_bk_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& ripe_bk_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void ripe_bk_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ripe_bk_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.ripe_bk_s.item.nichen)
}
inline void ripe_bk_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.ripe_bk_s.item.nichen)
}
inline void ripe_bk_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.ripe_bk_s.item.nichen)
}
inline std::string* ripe_bk_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ripe_bk_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.ripe_bk_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ripe_bk_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.ripe_bk_s.item.nichen)
}

// int32 contract_type = 3;
inline void ripe_bk_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.item.contract_type)
  return _internal_contract_type();
}
inline void ripe_bk_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void ripe_bk_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_s.item.contract_type)
}

// float price = 4;
inline void ripe_bk_s_item::clear_price() {
  price_ = 0;
}
inline float ripe_bk_s_item::_internal_price() const {
  return price_;
}
inline float ripe_bk_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.item.price)
  return _internal_price();
}
inline void ripe_bk_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void ripe_bk_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_s.item.price)
}

// int32 time = 5;
inline void ripe_bk_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.item.time)
  return _internal_time();
}
inline void ripe_bk_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ripe_bk_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_s.item.time)
}

// -------------------------------------------------------------------

// ripe_bk_s

// repeated .frmpub.protocc.ripe_bk_s.item its = 1;
inline int ripe_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int ripe_bk_s::its_size() const {
  return _internal_its_size();
}
inline void ripe_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::ripe_bk_s_item* ripe_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.ripe_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_bk_s_item >*
ripe_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.ripe_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::ripe_bk_s_item& ripe_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::ripe_bk_s_item& ripe_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::ripe_bk_s_item* ripe_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::ripe_bk_s_item* ripe_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.ripe_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::ripe_bk_s_item >&
ripe_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.ripe_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void ripe_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ripe_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.ripe_bk_s.total_page)
  return _internal_total_page();
}
inline void ripe_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void ripe_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.ripe_bk_s.total_page)
}

// -------------------------------------------------------------------

// order_list_bk_c

// int64 buy_phone = 1;
inline void order_list_bk_c::clear_buy_phone() {
  buy_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_c::_internal_buy_phone() const {
  return buy_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_c::buy_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_c.buy_phone)
  return _internal_buy_phone();
}
inline void order_list_bk_c::_internal_set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buy_phone_ = value;
}
inline void order_list_bk_c::set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buy_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_c.buy_phone)
}

// int32 type = 2;
inline void order_list_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_c.type)
  return _internal_type();
}
inline void order_list_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void order_list_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_c.type)
}

// int64 sell_phone = 3;
inline void order_list_bk_c::clear_sell_phone() {
  sell_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_c::_internal_sell_phone() const {
  return sell_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_c::sell_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_c.sell_phone)
  return _internal_sell_phone();
}
inline void order_list_bk_c::_internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sell_phone_ = value;
}
inline void order_list_bk_c::set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sell_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_c.sell_phone)
}

// int32 state = 4;
inline void order_list_bk_c::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_c::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_c::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_c.state)
  return _internal_state();
}
inline void order_list_bk_c::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void order_list_bk_c::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_c.state)
}

// int64 id = 5;
inline void order_list_bk_c::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_c::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_c::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_c.id)
  return _internal_id();
}
inline void order_list_bk_c::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void order_list_bk_c::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_c.id)
}

// int32 curr_page = 6;
inline void order_list_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_c.curr_page)
  return _internal_curr_page();
}
inline void order_list_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void order_list_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_c.curr_page)
}

// -------------------------------------------------------------------

// order_list_bk_s_item

// int64 id = 1;
inline void order_list_bk_s_item::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.id)
  return _internal_id();
}
inline void order_list_bk_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void order_list_bk_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.id)
}

// int64 buy_phone = 2;
inline void order_list_bk_s_item::clear_buy_phone() {
  buy_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_s_item::_internal_buy_phone() const {
  return buy_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_s_item::buy_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.buy_phone)
  return _internal_buy_phone();
}
inline void order_list_bk_s_item::_internal_set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buy_phone_ = value;
}
inline void order_list_bk_s_item::set_buy_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buy_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.buy_phone)
}

// int64 sell_phone = 3;
inline void order_list_bk_s_item::clear_sell_phone() {
  sell_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_s_item::_internal_sell_phone() const {
  return sell_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_list_bk_s_item::sell_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.sell_phone)
  return _internal_sell_phone();
}
inline void order_list_bk_s_item::_internal_set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sell_phone_ = value;
}
inline void order_list_bk_s_item::set_sell_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sell_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.sell_phone)
}

// string contract_type_name = 4;
inline void order_list_bk_s_item::clear_contract_type_name() {
  contract_type_name_.ClearToEmpty();
}
inline const std::string& order_list_bk_s_item::contract_type_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.contract_type_name)
  return _internal_contract_type_name();
}
inline void order_list_bk_s_item::set_contract_type_name(const std::string& value) {
  _internal_set_contract_type_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.contract_type_name)
}
inline std::string* order_list_bk_s_item::mutable_contract_type_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.order_list_bk_s.item.contract_type_name)
  return _internal_mutable_contract_type_name();
}
inline const std::string& order_list_bk_s_item::_internal_contract_type_name() const {
  return contract_type_name_.Get();
}
inline void order_list_bk_s_item::_internal_set_contract_type_name(const std::string& value) {
  
  contract_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void order_list_bk_s_item::set_contract_type_name(std::string&& value) {
  
  contract_type_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.order_list_bk_s.item.contract_type_name)
}
inline void order_list_bk_s_item::set_contract_type_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.order_list_bk_s.item.contract_type_name)
}
inline void order_list_bk_s_item::set_contract_type_name(const char* value,
    size_t size) {
  
  contract_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.order_list_bk_s.item.contract_type_name)
}
inline std::string* order_list_bk_s_item::_internal_mutable_contract_type_name() {
  
  return contract_type_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* order_list_bk_s_item::release_contract_type_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.order_list_bk_s.item.contract_type_name)
  return contract_type_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void order_list_bk_s_item::set_allocated_contract_type_name(std::string* contract_type_name) {
  if (contract_type_name != nullptr) {
    
  } else {
    
  }
  contract_type_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_type_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.order_list_bk_s.item.contract_type_name)
}

// float price = 5;
inline void order_list_bk_s_item::clear_price() {
  price_ = 0;
}
inline float order_list_bk_s_item::_internal_price() const {
  return price_;
}
inline float order_list_bk_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.price)
  return _internal_price();
}
inline void order_list_bk_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void order_list_bk_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.price)
}

// string payicon = 6;
inline void order_list_bk_s_item::clear_payicon() {
  payicon_.ClearToEmpty();
}
inline const std::string& order_list_bk_s_item::payicon() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.payicon)
  return _internal_payicon();
}
inline void order_list_bk_s_item::set_payicon(const std::string& value) {
  _internal_set_payicon(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.payicon)
}
inline std::string* order_list_bk_s_item::mutable_payicon() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.order_list_bk_s.item.payicon)
  return _internal_mutable_payicon();
}
inline const std::string& order_list_bk_s_item::_internal_payicon() const {
  return payicon_.Get();
}
inline void order_list_bk_s_item::_internal_set_payicon(const std::string& value) {
  
  payicon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void order_list_bk_s_item::set_payicon(std::string&& value) {
  
  payicon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.order_list_bk_s.item.payicon)
}
inline void order_list_bk_s_item::set_payicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payicon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.order_list_bk_s.item.payicon)
}
inline void order_list_bk_s_item::set_payicon(const char* value,
    size_t size) {
  
  payicon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.order_list_bk_s.item.payicon)
}
inline std::string* order_list_bk_s_item::_internal_mutable_payicon() {
  
  return payicon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* order_list_bk_s_item::release_payicon() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.order_list_bk_s.item.payicon)
  return payicon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void order_list_bk_s_item::set_allocated_payicon(std::string* payicon) {
  if (payicon != nullptr) {
    
  } else {
    
  }
  payicon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payicon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.order_list_bk_s.item.payicon)
}

// int32 rush_time = 7;
inline void order_list_bk_s_item::clear_rush_time() {
  rush_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::_internal_rush_time() const {
  return rush_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::rush_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.rush_time)
  return _internal_rush_time();
}
inline void order_list_bk_s_item::_internal_set_rush_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rush_time_ = value;
}
inline void order_list_bk_s_item::set_rush_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rush_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.rush_time)
}

// int32 pay_time = 8;
inline void order_list_bk_s_item::clear_pay_time() {
  pay_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::_internal_pay_time() const {
  return pay_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::pay_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.pay_time)
  return _internal_pay_time();
}
inline void order_list_bk_s_item::_internal_set_pay_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pay_time_ = value;
}
inline void order_list_bk_s_item::set_pay_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pay_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.pay_time)
}

// int32 sell_confirm_time = 9;
inline void order_list_bk_s_item::clear_sell_confirm_time() {
  sell_confirm_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::_internal_sell_confirm_time() const {
  return sell_confirm_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::sell_confirm_time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.sell_confirm_time)
  return _internal_sell_confirm_time();
}
inline void order_list_bk_s_item::_internal_set_sell_confirm_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sell_confirm_time_ = value;
}
inline void order_list_bk_s_item::set_sell_confirm_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sell_confirm_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.sell_confirm_time)
}

// int32 state = 10;
inline void order_list_bk_s_item::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s_item::state() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.item.state)
  return _internal_state();
}
inline void order_list_bk_s_item::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void order_list_bk_s_item::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.item.state)
}

// -------------------------------------------------------------------

// order_list_bk_s

// repeated .frmpub.protocc.order_list_bk_s.item its = 1;
inline int order_list_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int order_list_bk_s::its_size() const {
  return _internal_its_size();
}
inline void order_list_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::order_list_bk_s_item* order_list_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.order_list_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_bk_s_item >*
order_list_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.order_list_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::order_list_bk_s_item& order_list_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::order_list_bk_s_item& order_list_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::order_list_bk_s_item* order_list_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::order_list_bk_s_item* order_list_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.order_list_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::order_list_bk_s_item >&
order_list_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.order_list_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void order_list_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_list_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_list_bk_s.total_page)
  return _internal_total_page();
}
inline void order_list_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void order_list_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_list_bk_s.total_page)
}

// -------------------------------------------------------------------

// order_bk_c

// int64 id = 1;
inline void order_bk_c::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_bk_c::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 order_bk_c::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_bk_c.id)
  return _internal_id();
}
inline void order_bk_c::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void order_bk_c::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_bk_c.id)
}

// int32 oper = 2;
inline void order_bk_c::clear_oper() {
  oper_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_bk_c::_internal_oper() const {
  return oper_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_bk_c::oper() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_bk_c.oper)
  return _internal_oper();
}
inline void order_bk_c::_internal_set_oper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oper_ = value;
}
inline void order_bk_c::set_oper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oper(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_bk_c.oper)
}

// -------------------------------------------------------------------

// order_bk_s

// int32 result = 1;
inline void order_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 order_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.order_bk_s.result)
  return _internal_result();
}
inline void order_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void order_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.order_bk_s.result)
}

// -------------------------------------------------------------------

// recharge_bk_c

// int64 phone = 1;
inline void recharge_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 recharge_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 recharge_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_c.phone)
  return _internal_phone();
}
inline void recharge_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void recharge_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_c.phone)
}

// int32 enable = 2;
inline void recharge_bk_c::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::enable() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_c.enable)
  return _internal_enable();
}
inline void recharge_bk_c::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void recharge_bk_c::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_c.enable)
}

// int32 operator = 3;
inline void recharge_bk_c::clear_operator_() {
  operator__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::_internal_operator_() const {
  return operator__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::operator_() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_c.operator)
  return _internal_operator_();
}
inline void recharge_bk_c::_internal_set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operator__ = value;
}
inline void recharge_bk_c::set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_c.operator)
}

// int32 type = 4;
inline void recharge_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_c.type)
  return _internal_type();
}
inline void recharge_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void recharge_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_c.type)
}

// int32 curr_page = 5;
inline void recharge_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_c.curr_page)
  return _internal_curr_page();
}
inline void recharge_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void recharge_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_c.curr_page)
}

// -------------------------------------------------------------------

// recharge_bk_s_item

// int32 id = 1;
inline void recharge_bk_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.id)
  return _internal_id();
}
inline void recharge_bk_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void recharge_bk_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.id)
}

// int64 phone = 2;
inline void recharge_bk_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 recharge_bk_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 recharge_bk_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.phone)
  return _internal_phone();
}
inline void recharge_bk_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void recharge_bk_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.phone)
}

// int32 num = 3;
inline void recharge_bk_s_item::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.num)
  return _internal_num();
}
inline void recharge_bk_s_item::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void recharge_bk_s_item::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.num)
}

// float rmb = 4;
inline void recharge_bk_s_item::clear_rmb() {
  rmb_ = 0;
}
inline float recharge_bk_s_item::_internal_rmb() const {
  return rmb_;
}
inline float recharge_bk_s_item::rmb() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.rmb)
  return _internal_rmb();
}
inline void recharge_bk_s_item::_internal_set_rmb(float value) {
  
  rmb_ = value;
}
inline void recharge_bk_s_item::set_rmb(float value) {
  _internal_set_rmb(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.rmb)
}

// string paycert = 5;
inline void recharge_bk_s_item::clear_paycert() {
  paycert_.ClearToEmpty();
}
inline const std::string& recharge_bk_s_item::paycert() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.paycert)
  return _internal_paycert();
}
inline void recharge_bk_s_item::set_paycert(const std::string& value) {
  _internal_set_paycert(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.paycert)
}
inline std::string* recharge_bk_s_item::mutable_paycert() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.recharge_bk_s.item.paycert)
  return _internal_mutable_paycert();
}
inline const std::string& recharge_bk_s_item::_internal_paycert() const {
  return paycert_.Get();
}
inline void recharge_bk_s_item::_internal_set_paycert(const std::string& value) {
  
  paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recharge_bk_s_item::set_paycert(std::string&& value) {
  
  paycert_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.recharge_bk_s.item.paycert)
}
inline void recharge_bk_s_item::set_paycert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.recharge_bk_s.item.paycert)
}
inline void recharge_bk_s_item::set_paycert(const char* value,
    size_t size) {
  
  paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.recharge_bk_s.item.paycert)
}
inline std::string* recharge_bk_s_item::_internal_mutable_paycert() {
  
  return paycert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recharge_bk_s_item::release_paycert() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.recharge_bk_s.item.paycert)
  return paycert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recharge_bk_s_item::set_allocated_paycert(std::string* paycert) {
  if (paycert != nullptr) {
    
  } else {
    
  }
  paycert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paycert,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.recharge_bk_s.item.paycert)
}

// int32 time = 6;
inline void recharge_bk_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.time)
  return _internal_time();
}
inline void recharge_bk_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void recharge_bk_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.time)
}

// int32 enable = 7;
inline void recharge_bk_s_item::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::enable() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.enable)
  return _internal_enable();
}
inline void recharge_bk_s_item::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void recharge_bk_s_item::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.enable)
}

// int32 operator = 8;
inline void recharge_bk_s_item::clear_operator_() {
  operator__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::_internal_operator_() const {
  return operator__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s_item::operator_() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.operator)
  return _internal_operator_();
}
inline void recharge_bk_s_item::_internal_set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operator__ = value;
}
inline void recharge_bk_s_item::set_operator_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.operator)
}

// string nichen = 9;
inline void recharge_bk_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& recharge_bk_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.item.nichen)
  return _internal_nichen();
}
inline void recharge_bk_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.item.nichen)
}
inline std::string* recharge_bk_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.recharge_bk_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& recharge_bk_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void recharge_bk_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recharge_bk_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.recharge_bk_s.item.nichen)
}
inline void recharge_bk_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.recharge_bk_s.item.nichen)
}
inline void recharge_bk_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.recharge_bk_s.item.nichen)
}
inline std::string* recharge_bk_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recharge_bk_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.recharge_bk_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recharge_bk_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.recharge_bk_s.item.nichen)
}

// -------------------------------------------------------------------

// recharge_bk_s

// repeated .frmpub.protocc.recharge_bk_s.item its = 1;
inline int recharge_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int recharge_bk_s::its_size() const {
  return _internal_its_size();
}
inline void recharge_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::recharge_bk_s_item* recharge_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.recharge_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::recharge_bk_s_item >*
recharge_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.recharge_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::recharge_bk_s_item& recharge_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::recharge_bk_s_item& recharge_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::recharge_bk_s_item* recharge_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::recharge_bk_s_item* recharge_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.recharge_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::recharge_bk_s_item >&
recharge_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.recharge_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void recharge_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.total_page)
  return _internal_total_page();
}
inline void recharge_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void recharge_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.total_page)
}

// int32 type = 3;
inline void recharge_bk_s::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_bk_s::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_bk_s.type)
  return _internal_type();
}
inline void recharge_bk_s::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void recharge_bk_s::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_bk_s.type)
}

// -------------------------------------------------------------------

// recharge_oper_bk_c

// int32 id = 1;
inline void recharge_oper_bk_c::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_c::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_c::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_oper_bk_c.id)
  return _internal_id();
}
inline void recharge_oper_bk_c::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void recharge_oper_bk_c::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_oper_bk_c.id)
}

// int32 enable = 2;
inline void recharge_oper_bk_c::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_c::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_c::enable() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_oper_bk_c.enable)
  return _internal_enable();
}
inline void recharge_oper_bk_c::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void recharge_oper_bk_c::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_oper_bk_c.enable)
}

// int32 type = 3;
inline void recharge_oper_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_oper_bk_c.type)
  return _internal_type();
}
inline void recharge_oper_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void recharge_oper_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_oper_bk_c.type)
}

// -------------------------------------------------------------------

// recharge_oper_bk_s

// int32 result = 1;
inline void recharge_oper_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recharge_oper_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.recharge_oper_bk_s.result)
  return _internal_result();
}
inline void recharge_oper_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void recharge_oper_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.recharge_oper_bk_s.result)
}

// -------------------------------------------------------------------

// user_list_bk_c

// int64 phone = 1;
inline void user_list_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_list_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_list_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_c.phone)
  return _internal_phone();
}
inline void user_list_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_list_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_c.phone)
}

// int32 enable = 2;
inline void user_list_bk_c::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_c::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_c::enable() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_c.enable)
  return _internal_enable();
}
inline void user_list_bk_c::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void user_list_bk_c::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_c.enable)
}

// int32 curr_page = 3;
inline void user_list_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_c.curr_page)
  return _internal_curr_page();
}
inline void user_list_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void user_list_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_c.curr_page)
}

// -------------------------------------------------------------------

// user_list_bk_s_item

// int64 phone = 1;
inline void user_list_bk_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_list_bk_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_list_bk_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.phone)
  return _internal_phone();
}
inline void user_list_bk_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_list_bk_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.phone)
}

// string nichen = 2;
inline void user_list_bk_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& user_list_bk_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.nichen)
  return _internal_nichen();
}
inline void user_list_bk_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.nichen)
}
inline std::string* user_list_bk_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.user_list_bk_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& user_list_bk_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void user_list_bk_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void user_list_bk_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.user_list_bk_s.item.nichen)
}
inline void user_list_bk_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.user_list_bk_s.item.nichen)
}
inline void user_list_bk_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.user_list_bk_s.item.nichen)
}
inline std::string* user_list_bk_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* user_list_bk_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.user_list_bk_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_list_bk_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.user_list_bk_s.item.nichen)
}

// int32 dispatch_coin = 3;
inline void user_list_bk_s_item::clear_dispatch_coin() {
  dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::_internal_dispatch_coin() const {
  return dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.dispatch_coin)
  return _internal_dispatch_coin();
}
inline void user_list_bk_s_item::_internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dispatch_coin_ = value;
}
inline void user_list_bk_s_item::set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.dispatch_coin)
}

// int32 activated_coin = 4;
inline void user_list_bk_s_item::clear_activated_coin() {
  activated_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::_internal_activated_coin() const {
  return activated_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::activated_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.activated_coin)
  return _internal_activated_coin();
}
inline void user_list_bk_s_item::_internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_coin_ = value;
}
inline void user_list_bk_s_item::set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.activated_coin)
}

// float total_income = 5;
inline void user_list_bk_s_item::clear_total_income() {
  total_income_ = 0;
}
inline float user_list_bk_s_item::_internal_total_income() const {
  return total_income_;
}
inline float user_list_bk_s_item::total_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.total_income)
  return _internal_total_income();
}
inline void user_list_bk_s_item::_internal_set_total_income(float value) {
  
  total_income_ = value;
}
inline void user_list_bk_s_item::set_total_income(float value) {
  _internal_set_total_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.total_income)
}

// float static_income = 6;
inline void user_list_bk_s_item::clear_static_income() {
  static_income_ = 0;
}
inline float user_list_bk_s_item::_internal_static_income() const {
  return static_income_;
}
inline float user_list_bk_s_item::static_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.static_income)
  return _internal_static_income();
}
inline void user_list_bk_s_item::_internal_set_static_income(float value) {
  
  static_income_ = value;
}
inline void user_list_bk_s_item::set_static_income(float value) {
  _internal_set_static_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.static_income)
}

// float promote_current_income = 7;
inline void user_list_bk_s_item::clear_promote_current_income() {
  promote_current_income_ = 0;
}
inline float user_list_bk_s_item::_internal_promote_current_income() const {
  return promote_current_income_;
}
inline float user_list_bk_s_item::promote_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.promote_current_income)
  return _internal_promote_current_income();
}
inline void user_list_bk_s_item::_internal_set_promote_current_income(float value) {
  
  promote_current_income_ = value;
}
inline void user_list_bk_s_item::set_promote_current_income(float value) {
  _internal_set_promote_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.promote_current_income)
}

// float team_current_income = 8;
inline void user_list_bk_s_item::clear_team_current_income() {
  team_current_income_ = 0;
}
inline float user_list_bk_s_item::_internal_team_current_income() const {
  return team_current_income_;
}
inline float user_list_bk_s_item::team_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.team_current_income)
  return _internal_team_current_income();
}
inline void user_list_bk_s_item::_internal_set_team_current_income(float value) {
  
  team_current_income_ = value;
}
inline void user_list_bk_s_item::set_team_current_income(float value) {
  _internal_set_team_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.team_current_income)
}

// int32 activated = 9;
inline void user_list_bk_s_item::clear_activated() {
  activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::_internal_activated() const {
  return activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.activated)
  return _internal_activated();
}
inline void user_list_bk_s_item::_internal_set_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_ = value;
}
inline void user_list_bk_s_item::set_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.activated)
}

// int32 enable = 10;
inline void user_list_bk_s_item::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::enable() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.enable)
  return _internal_enable();
}
inline void user_list_bk_s_item::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void user_list_bk_s_item::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.enable)
}

// string pwd = 11;
inline void user_list_bk_s_item::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& user_list_bk_s_item::pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.pwd)
  return _internal_pwd();
}
inline void user_list_bk_s_item::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.pwd)
}
inline std::string* user_list_bk_s_item::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.user_list_bk_s.item.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& user_list_bk_s_item::_internal_pwd() const {
  return pwd_.Get();
}
inline void user_list_bk_s_item::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void user_list_bk_s_item::set_pwd(std::string&& value) {
  
  pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.user_list_bk_s.item.pwd)
}
inline void user_list_bk_s_item::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.user_list_bk_s.item.pwd)
}
inline void user_list_bk_s_item::set_pwd(const char* value,
    size_t size) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.user_list_bk_s.item.pwd)
}
inline std::string* user_list_bk_s_item::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* user_list_bk_s_item::release_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.user_list_bk_s.item.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_list_bk_s_item::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.user_list_bk_s.item.pwd)
}

// int32 trade = 12;
inline void user_list_bk_s_item::clear_trade() {
  trade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::_internal_trade() const {
  return trade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s_item::trade() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.trade)
  return _internal_trade();
}
inline void user_list_bk_s_item::_internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_ = value;
}
inline void user_list_bk_s_item::set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.trade)
}

// int64 parent_phone = 13;
inline void user_list_bk_s_item::clear_parent_phone() {
  parent_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_list_bk_s_item::_internal_parent_phone() const {
  return parent_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_list_bk_s_item::parent_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.item.parent_phone)
  return _internal_parent_phone();
}
inline void user_list_bk_s_item::_internal_set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parent_phone_ = value;
}
inline void user_list_bk_s_item::set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parent_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.item.parent_phone)
}

// -------------------------------------------------------------------

// user_list_bk_s

// repeated .frmpub.protocc.user_list_bk_s.item its = 1;
inline int user_list_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int user_list_bk_s::its_size() const {
  return _internal_its_size();
}
inline void user_list_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::user_list_bk_s_item* user_list_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.user_list_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_list_bk_s_item >*
user_list_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.user_list_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::user_list_bk_s_item& user_list_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::user_list_bk_s_item& user_list_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::user_list_bk_s_item* user_list_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::user_list_bk_s_item* user_list_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.user_list_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_list_bk_s_item >&
user_list_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.user_list_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void user_list_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_list_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_list_bk_s.total_page)
  return _internal_total_page();
}
inline void user_list_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void user_list_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_list_bk_s.total_page)
}

// -------------------------------------------------------------------

// update_user_bk_c

// int32 dispatch_coin = 1;
inline void update_user_bk_c::clear_dispatch_coin() {
  dispatch_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::_internal_dispatch_coin() const {
  return dispatch_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::dispatch_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.dispatch_coin)
  return _internal_dispatch_coin();
}
inline void update_user_bk_c::_internal_set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dispatch_coin_ = value;
}
inline void update_user_bk_c::set_dispatch_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dispatch_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.dispatch_coin)
}

// int32 activated_coin = 2;
inline void update_user_bk_c::clear_activated_coin() {
  activated_coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::_internal_activated_coin() const {
  return activated_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::activated_coin() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.activated_coin)
  return _internal_activated_coin();
}
inline void update_user_bk_c::_internal_set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_coin_ = value;
}
inline void update_user_bk_c::set_activated_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_coin(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.activated_coin)
}

// int32 promote_current_income = 3;
inline void update_user_bk_c::clear_promote_current_income() {
  promote_current_income_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::_internal_promote_current_income() const {
  return promote_current_income_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::promote_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.promote_current_income)
  return _internal_promote_current_income();
}
inline void update_user_bk_c::_internal_set_promote_current_income(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  promote_current_income_ = value;
}
inline void update_user_bk_c::set_promote_current_income(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_promote_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.promote_current_income)
}

// int32 team_current_income = 4;
inline void update_user_bk_c::clear_team_current_income() {
  team_current_income_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::_internal_team_current_income() const {
  return team_current_income_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::team_current_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.team_current_income)
  return _internal_team_current_income();
}
inline void update_user_bk_c::_internal_set_team_current_income(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_current_income_ = value;
}
inline void update_user_bk_c::set_team_current_income(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_current_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.team_current_income)
}

// string pwd = 5;
inline void update_user_bk_c::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& update_user_bk_c::pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.pwd)
  return _internal_pwd();
}
inline void update_user_bk_c::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.pwd)
}
inline std::string* update_user_bk_c::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.update_user_bk_c.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& update_user_bk_c::_internal_pwd() const {
  return pwd_.Get();
}
inline void update_user_bk_c::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void update_user_bk_c::set_pwd(std::string&& value) {
  
  pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.update_user_bk_c.pwd)
}
inline void update_user_bk_c::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.update_user_bk_c.pwd)
}
inline void update_user_bk_c::set_pwd(const char* value,
    size_t size) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.update_user_bk_c.pwd)
}
inline std::string* update_user_bk_c::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* update_user_bk_c::release_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.update_user_bk_c.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void update_user_bk_c::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.update_user_bk_c.pwd)
}

// int32 trade = 6;
inline void update_user_bk_c::clear_trade() {
  trade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::_internal_trade() const {
  return trade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_c::trade() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.trade)
  return _internal_trade();
}
inline void update_user_bk_c::_internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_ = value;
}
inline void update_user_bk_c::set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.trade)
}

// int64 parent_phone = 7;
inline void update_user_bk_c::clear_parent_phone() {
  parent_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 update_user_bk_c::_internal_parent_phone() const {
  return parent_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 update_user_bk_c::parent_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.parent_phone)
  return _internal_parent_phone();
}
inline void update_user_bk_c::_internal_set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parent_phone_ = value;
}
inline void update_user_bk_c::set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parent_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.parent_phone)
}

// int64 phone = 8;
inline void update_user_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 update_user_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 update_user_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_c.phone)
  return _internal_phone();
}
inline void update_user_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void update_user_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_c.phone)
}

// -------------------------------------------------------------------

// update_user_bk_s

// int32 result = 1;
inline void update_user_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 update_user_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.update_user_bk_s.result)
  return _internal_result();
}
inline void update_user_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void update_user_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.update_user_bk_s.result)
}

// -------------------------------------------------------------------

// user_contract_list_bk_c

// int64 phone = 8;
inline void user_contract_list_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_contract_list_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_contract_list_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_contract_list_bk_c.phone)
  return _internal_phone();
}
inline void user_contract_list_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_contract_list_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_contract_list_bk_c.phone)
}

// -------------------------------------------------------------------

// user_contract_list_bk_s_item

// int32 id = 1;
inline void user_contract_list_bk_s_item::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_contract_list_bk_s_item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_contract_list_bk_s_item::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_contract_list_bk_s.item.id)
  return _internal_id();
}
inline void user_contract_list_bk_s_item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void user_contract_list_bk_s_item::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_contract_list_bk_s.item.id)
}

// int32 contract_type = 2;
inline void user_contract_list_bk_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_contract_list_bk_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_contract_list_bk_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_contract_list_bk_s.item.contract_type)
  return _internal_contract_type();
}
inline void user_contract_list_bk_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void user_contract_list_bk_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_contract_list_bk_s.item.contract_type)
}

// float price = 3;
inline void user_contract_list_bk_s_item::clear_price() {
  price_ = 0;
}
inline float user_contract_list_bk_s_item::_internal_price() const {
  return price_;
}
inline float user_contract_list_bk_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_contract_list_bk_s.item.price)
  return _internal_price();
}
inline void user_contract_list_bk_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void user_contract_list_bk_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_contract_list_bk_s.item.price)
}

// int32 time = 4;
inline void user_contract_list_bk_s_item::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_contract_list_bk_s_item::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_contract_list_bk_s_item::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_contract_list_bk_s.item.time)
  return _internal_time();
}
inline void user_contract_list_bk_s_item::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void user_contract_list_bk_s_item::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_contract_list_bk_s.item.time)
}

// -------------------------------------------------------------------

// user_contract_list_bk_s

// repeated .frmpub.protocc.user_contract_list_bk_s.item its = 1;
inline int user_contract_list_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int user_contract_list_bk_s::its_size() const {
  return _internal_its_size();
}
inline void user_contract_list_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::user_contract_list_bk_s_item* user_contract_list_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.user_contract_list_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_contract_list_bk_s_item >*
user_contract_list_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.user_contract_list_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::user_contract_list_bk_s_item& user_contract_list_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::user_contract_list_bk_s_item& user_contract_list_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_contract_list_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::user_contract_list_bk_s_item* user_contract_list_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::user_contract_list_bk_s_item* user_contract_list_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.user_contract_list_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::user_contract_list_bk_s_item >&
user_contract_list_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.user_contract_list_bk_s.its)
  return its_;
}

// -------------------------------------------------------------------

// del_user_contract_bk_c

// int32 id = 1;
inline void del_user_contract_bk_c::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 del_user_contract_bk_c::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 del_user_contract_bk_c::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.del_user_contract_bk_c.id)
  return _internal_id();
}
inline void del_user_contract_bk_c::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void del_user_contract_bk_c::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.del_user_contract_bk_c.id)
}

// -------------------------------------------------------------------

// del_user_contract_bk_s

// int32 result = 1;
inline void del_user_contract_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 del_user_contract_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 del_user_contract_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.del_user_contract_bk_s.result)
  return _internal_result();
}
inline void del_user_contract_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void del_user_contract_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.del_user_contract_bk_s.result)
}

// -------------------------------------------------------------------

// name_verifie_list_bk_c

// int32 curr_page = 1;
inline void name_verifie_list_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_c.curr_page)
  return _internal_curr_page();
}
inline void name_verifie_list_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void name_verifie_list_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_c.curr_page)
}

// -------------------------------------------------------------------

// name_verifie_list_bk_s_item

// int64 phone = 1;
inline void name_verifie_list_bk_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 name_verifie_list_bk_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 name_verifie_list_bk_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.item.phone)
  return _internal_phone();
}
inline void name_verifie_list_bk_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void name_verifie_list_bk_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.item.phone)
}

// string nichen = 2;
inline void name_verifie_list_bk_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& name_verifie_list_bk_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
  return _internal_nichen();
}
inline void name_verifie_list_bk_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
}
inline std::string* name_verifie_list_bk_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& name_verifie_list_bk_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void name_verifie_list_bk_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void name_verifie_list_bk_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
}
inline void name_verifie_list_bk_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
}
inline void name_verifie_list_bk_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
}
inline std::string* name_verifie_list_bk_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* name_verifie_list_bk_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void name_verifie_list_bk_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.name_verifie_list_bk_s.item.nichen)
}

// int32 activated = 3;
inline void name_verifie_list_bk_s_item::clear_activated() {
  activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_s_item::_internal_activated() const {
  return activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_s_item::activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.item.activated)
  return _internal_activated();
}
inline void name_verifie_list_bk_s_item::_internal_set_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_ = value;
}
inline void name_verifie_list_bk_s_item::set_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.item.activated)
}

// string name = 4;
inline void name_verifie_list_bk_s_item::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& name_verifie_list_bk_s_item::name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.item.name)
  return _internal_name();
}
inline void name_verifie_list_bk_s_item::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.item.name)
}
inline std::string* name_verifie_list_bk_s_item::mutable_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.name_verifie_list_bk_s.item.name)
  return _internal_mutable_name();
}
inline const std::string& name_verifie_list_bk_s_item::_internal_name() const {
  return name_.Get();
}
inline void name_verifie_list_bk_s_item::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void name_verifie_list_bk_s_item::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.name_verifie_list_bk_s.item.name)
}
inline void name_verifie_list_bk_s_item::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.name_verifie_list_bk_s.item.name)
}
inline void name_verifie_list_bk_s_item::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.name_verifie_list_bk_s.item.name)
}
inline std::string* name_verifie_list_bk_s_item::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* name_verifie_list_bk_s_item::release_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.name_verifie_list_bk_s.item.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void name_verifie_list_bk_s_item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.name_verifie_list_bk_s.item.name)
}

// string idcard = 5;
inline void name_verifie_list_bk_s_item::clear_idcard() {
  idcard_.ClearToEmpty();
}
inline const std::string& name_verifie_list_bk_s_item::idcard() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
  return _internal_idcard();
}
inline void name_verifie_list_bk_s_item::set_idcard(const std::string& value) {
  _internal_set_idcard(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
}
inline std::string* name_verifie_list_bk_s_item::mutable_idcard() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
  return _internal_mutable_idcard();
}
inline const std::string& name_verifie_list_bk_s_item::_internal_idcard() const {
  return idcard_.Get();
}
inline void name_verifie_list_bk_s_item::_internal_set_idcard(const std::string& value) {
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void name_verifie_list_bk_s_item::set_idcard(std::string&& value) {
  
  idcard_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
}
inline void name_verifie_list_bk_s_item::set_idcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
}
inline void name_verifie_list_bk_s_item::set_idcard(const char* value,
    size_t size) {
  
  idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
}
inline std::string* name_verifie_list_bk_s_item::_internal_mutable_idcard() {
  
  return idcard_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* name_verifie_list_bk_s_item::release_idcard() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
  return idcard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void name_verifie_list_bk_s_item::set_allocated_idcard(std::string* idcard) {
  if (idcard != nullptr) {
    
  } else {
    
  }
  idcard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idcard,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.name_verifie_list_bk_s.item.idcard)
}

// int32 name_verifie = 6;
inline void name_verifie_list_bk_s_item::clear_name_verifie() {
  name_verifie_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_s_item::_internal_name_verifie() const {
  return name_verifie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_s_item::name_verifie() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.item.name_verifie)
  return _internal_name_verifie();
}
inline void name_verifie_list_bk_s_item::_internal_set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_verifie_ = value;
}
inline void name_verifie_list_bk_s_item::set_name_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name_verifie(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.item.name_verifie)
}

// -------------------------------------------------------------------

// name_verifie_list_bk_s

// repeated .frmpub.protocc.name_verifie_list_bk_s.item its = 1;
inline int name_verifie_list_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int name_verifie_list_bk_s::its_size() const {
  return _internal_its_size();
}
inline void name_verifie_list_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::name_verifie_list_bk_s_item* name_verifie_list_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.name_verifie_list_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::name_verifie_list_bk_s_item >*
name_verifie_list_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.name_verifie_list_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::name_verifie_list_bk_s_item& name_verifie_list_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::name_verifie_list_bk_s_item& name_verifie_list_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::name_verifie_list_bk_s_item* name_verifie_list_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::name_verifie_list_bk_s_item* name_verifie_list_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.name_verifie_list_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::name_verifie_list_bk_s_item >&
name_verifie_list_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.name_verifie_list_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void name_verifie_list_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_list_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_list_bk_s.total_page)
  return _internal_total_page();
}
inline void name_verifie_list_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void name_verifie_list_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_list_bk_s.total_page)
}

// -------------------------------------------------------------------

// name_verifie_oper_bk_c

// int64 phone = 1;
inline void name_verifie_oper_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 name_verifie_oper_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 name_verifie_oper_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_oper_bk_c.phone)
  return _internal_phone();
}
inline void name_verifie_oper_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void name_verifie_oper_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_oper_bk_c.phone)
}

// int32 type = 2;
inline void name_verifie_oper_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_oper_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_oper_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_oper_bk_c.type)
  return _internal_type();
}
inline void name_verifie_oper_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void name_verifie_oper_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_oper_bk_c.type)
}

// -------------------------------------------------------------------

// name_verifie_oper_bk_s

// int32 result = 1;
inline void name_verifie_oper_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_oper_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 name_verifie_oper_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.name_verifie_oper_bk_s.result)
  return _internal_result();
}
inline void name_verifie_oper_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void name_verifie_oper_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.name_verifie_oper_bk_s.result)
}

// -------------------------------------------------------------------

// pay_verifie_list_bk_c

// int32 curr_page = 1;
inline void pay_verifie_list_bk_c::clear_curr_page() {
  curr_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_c::_internal_curr_page() const {
  return curr_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_c::curr_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_c.curr_page)
  return _internal_curr_page();
}
inline void pay_verifie_list_bk_c::_internal_set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curr_page_ = value;
}
inline void pay_verifie_list_bk_c::set_curr_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_c.curr_page)
}

// -------------------------------------------------------------------

// pay_verifie_list_bk_s_item

// int64 phone = 1;
inline void pay_verifie_list_bk_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pay_verifie_list_bk_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pay_verifie_list_bk_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.phone)
  return _internal_phone();
}
inline void pay_verifie_list_bk_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void pay_verifie_list_bk_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.phone)
}

// string nichen = 2;
inline void pay_verifie_list_bk_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
  return _internal_nichen();
}
inline void pay_verifie_list_bk_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
}
inline void pay_verifie_list_bk_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
}
inline void pay_verifie_list_bk_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.nichen)
}

// int32 activated = 3;
inline void pay_verifie_list_bk_s_item::clear_activated() {
  activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_s_item::_internal_activated() const {
  return activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_s_item::activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.activated)
  return _internal_activated();
}
inline void pay_verifie_list_bk_s_item::_internal_set_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_ = value;
}
inline void pay_verifie_list_bk_s_item::set_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.activated)
}

// string bank_name = 4;
inline void pay_verifie_list_bk_s_item::clear_bank_name() {
  bank_name_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::bank_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
  return _internal_bank_name();
}
inline void pay_verifie_list_bk_s_item::set_bank_name(const std::string& value) {
  _internal_set_bank_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_bank_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
  return _internal_mutable_bank_name();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_bank_name(const std::string& value) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_bank_name(std::string&& value) {
  
  bank_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
}
inline void pay_verifie_list_bk_s_item::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
}
inline void pay_verifie_list_bk_s_item::set_bank_name(const char* value,
    size_t size) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_bank_name() {
  
  return bank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_bank_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
  return bank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.bank_name)
}

// string bank_cardid = 5;
inline void pay_verifie_list_bk_s_item::clear_bank_cardid() {
  bank_cardid_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::bank_cardid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
  return _internal_bank_cardid();
}
inline void pay_verifie_list_bk_s_item::set_bank_cardid(const std::string& value) {
  _internal_set_bank_cardid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_bank_cardid() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
  return _internal_mutable_bank_cardid();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_bank_cardid() const {
  return bank_cardid_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_bank_cardid(const std::string& value) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_bank_cardid(std::string&& value) {
  
  bank_cardid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
}
inline void pay_verifie_list_bk_s_item::set_bank_cardid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
}
inline void pay_verifie_list_bk_s_item::set_bank_cardid(const char* value,
    size_t size) {
  
  bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_bank_cardid() {
  
  return bank_cardid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_bank_cardid() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
  return bank_cardid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_bank_cardid(std::string* bank_cardid) {
  if (bank_cardid != nullptr) {
    
  } else {
    
  }
  bank_cardid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_cardid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid)
}

// string bank_user_name = 6;
inline void pay_verifie_list_bk_s_item::clear_bank_user_name() {
  bank_user_name_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::bank_user_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
  return _internal_bank_user_name();
}
inline void pay_verifie_list_bk_s_item::set_bank_user_name(const std::string& value) {
  _internal_set_bank_user_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_bank_user_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
  return _internal_mutable_bank_user_name();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_bank_user_name() const {
  return bank_user_name_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_bank_user_name(const std::string& value) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_bank_user_name(std::string&& value) {
  
  bank_user_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
}
inline void pay_verifie_list_bk_s_item::set_bank_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
}
inline void pay_verifie_list_bk_s_item::set_bank_user_name(const char* value,
    size_t size) {
  
  bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_bank_user_name() {
  
  return bank_user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_bank_user_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
  return bank_user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_bank_user_name(std::string* bank_user_name) {
  if (bank_user_name != nullptr) {
    
  } else {
    
  }
  bank_user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name)
}

// string ailpay_id = 7;
inline void pay_verifie_list_bk_s_item::clear_ailpay_id() {
  ailpay_id_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::ailpay_id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
  return _internal_ailpay_id();
}
inline void pay_verifie_list_bk_s_item::set_ailpay_id(const std::string& value) {
  _internal_set_ailpay_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_ailpay_id() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
  return _internal_mutable_ailpay_id();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_ailpay_id() const {
  return ailpay_id_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_ailpay_id(const std::string& value) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_ailpay_id(std::string&& value) {
  
  ailpay_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
}
inline void pay_verifie_list_bk_s_item::set_ailpay_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
}
inline void pay_verifie_list_bk_s_item::set_ailpay_id(const char* value,
    size_t size) {
  
  ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_ailpay_id() {
  
  return ailpay_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_ailpay_id() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
  return ailpay_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_ailpay_id(std::string* ailpay_id) {
  if (ailpay_id != nullptr) {
    
  } else {
    
  }
  ailpay_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ailpay_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id)
}

// string alipay_name = 8;
inline void pay_verifie_list_bk_s_item::clear_alipay_name() {
  alipay_name_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::alipay_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
  return _internal_alipay_name();
}
inline void pay_verifie_list_bk_s_item::set_alipay_name(const std::string& value) {
  _internal_set_alipay_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_alipay_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
  return _internal_mutable_alipay_name();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_alipay_name() const {
  return alipay_name_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_alipay_name(const std::string& value) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_alipay_name(std::string&& value) {
  
  alipay_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
}
inline void pay_verifie_list_bk_s_item::set_alipay_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
}
inline void pay_verifie_list_bk_s_item::set_alipay_name(const char* value,
    size_t size) {
  
  alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_alipay_name() {
  
  return alipay_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_alipay_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
  return alipay_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_alipay_name(std::string* alipay_name) {
  if (alipay_name != nullptr) {
    
  } else {
    
  }
  alipay_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alipay_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name)
}

// string webchat_name = 9;
inline void pay_verifie_list_bk_s_item::clear_webchat_name() {
  webchat_name_.ClearToEmpty();
}
inline const std::string& pay_verifie_list_bk_s_item::webchat_name() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
  return _internal_webchat_name();
}
inline void pay_verifie_list_bk_s_item::set_webchat_name(const std::string& value) {
  _internal_set_webchat_name(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
}
inline std::string* pay_verifie_list_bk_s_item::mutable_webchat_name() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
  return _internal_mutable_webchat_name();
}
inline const std::string& pay_verifie_list_bk_s_item::_internal_webchat_name() const {
  return webchat_name_.Get();
}
inline void pay_verifie_list_bk_s_item::_internal_set_webchat_name(const std::string& value) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pay_verifie_list_bk_s_item::set_webchat_name(std::string&& value) {
  
  webchat_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
}
inline void pay_verifie_list_bk_s_item::set_webchat_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
}
inline void pay_verifie_list_bk_s_item::set_webchat_name(const char* value,
    size_t size) {
  
  webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
}
inline std::string* pay_verifie_list_bk_s_item::_internal_mutable_webchat_name() {
  
  return webchat_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pay_verifie_list_bk_s_item::release_webchat_name() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
  return webchat_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pay_verifie_list_bk_s_item::set_allocated_webchat_name(std::string* webchat_name) {
  if (webchat_name != nullptr) {
    
  } else {
    
  }
  webchat_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webchat_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name)
}

// int32 pay_verifie = 10;
inline void pay_verifie_list_bk_s_item::clear_pay_verifie() {
  pay_verifie_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_s_item::_internal_pay_verifie() const {
  return pay_verifie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_s_item::pay_verifie() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.item.pay_verifie)
  return _internal_pay_verifie();
}
inline void pay_verifie_list_bk_s_item::_internal_set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pay_verifie_ = value;
}
inline void pay_verifie_list_bk_s_item::set_pay_verifie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pay_verifie(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.item.pay_verifie)
}

// -------------------------------------------------------------------

// pay_verifie_list_bk_s

// repeated .frmpub.protocc.pay_verifie_list_bk_s.item its = 1;
inline int pay_verifie_list_bk_s::_internal_its_size() const {
  return its_.size();
}
inline int pay_verifie_list_bk_s::its_size() const {
  return _internal_its_size();
}
inline void pay_verifie_list_bk_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::pay_verifie_list_bk_s_item* pay_verifie_list_bk_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.pay_verifie_list_bk_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::pay_verifie_list_bk_s_item >*
pay_verifie_list_bk_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.pay_verifie_list_bk_s.its)
  return &its_;
}
inline const ::frmpub::protocc::pay_verifie_list_bk_s_item& pay_verifie_list_bk_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::pay_verifie_list_bk_s_item& pay_verifie_list_bk_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::pay_verifie_list_bk_s_item* pay_verifie_list_bk_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::pay_verifie_list_bk_s_item* pay_verifie_list_bk_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.pay_verifie_list_bk_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::pay_verifie_list_bk_s_item >&
pay_verifie_list_bk_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.pay_verifie_list_bk_s.its)
  return its_;
}

// int32 total_page = 2;
inline void pay_verifie_list_bk_s::clear_total_page() {
  total_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_s::_internal_total_page() const {
  return total_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_list_bk_s::total_page() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_list_bk_s.total_page)
  return _internal_total_page();
}
inline void pay_verifie_list_bk_s::_internal_set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_ = value;
}
inline void pay_verifie_list_bk_s::set_total_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_list_bk_s.total_page)
}

// -------------------------------------------------------------------

// pay_verifie_oper_bk_c

// int64 phone = 1;
inline void pay_verifie_oper_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pay_verifie_oper_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pay_verifie_oper_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_oper_bk_c.phone)
  return _internal_phone();
}
inline void pay_verifie_oper_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void pay_verifie_oper_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_oper_bk_c.phone)
}

// int32 type = 2;
inline void pay_verifie_oper_bk_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_oper_bk_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_oper_bk_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_oper_bk_c.type)
  return _internal_type();
}
inline void pay_verifie_oper_bk_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void pay_verifie_oper_bk_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_oper_bk_c.type)
}

// -------------------------------------------------------------------

// pay_verifie_oper_bk_s

// int32 result = 1;
inline void pay_verifie_oper_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_oper_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pay_verifie_oper_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.pay_verifie_oper_bk_s.result)
  return _internal_result();
}
inline void pay_verifie_oper_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void pay_verifie_oper_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.pay_verifie_oper_bk_s.result)
}

// -------------------------------------------------------------------

// create_user_bk_c

// int64 phone = 1;
inline void create_user_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 create_user_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 create_user_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.create_user_bk_c.phone)
  return _internal_phone();
}
inline void create_user_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void create_user_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.create_user_bk_c.phone)
}

// string nichen = 2;
inline void create_user_bk_c::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& create_user_bk_c::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.create_user_bk_c.nichen)
  return _internal_nichen();
}
inline void create_user_bk_c::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.create_user_bk_c.nichen)
}
inline std::string* create_user_bk_c::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.create_user_bk_c.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& create_user_bk_c::_internal_nichen() const {
  return nichen_.Get();
}
inline void create_user_bk_c::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void create_user_bk_c::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.create_user_bk_c.nichen)
}
inline void create_user_bk_c::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.create_user_bk_c.nichen)
}
inline void create_user_bk_c::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.create_user_bk_c.nichen)
}
inline std::string* create_user_bk_c::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* create_user_bk_c::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.create_user_bk_c.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void create_user_bk_c::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.create_user_bk_c.nichen)
}

// string pwd = 3;
inline void create_user_bk_c::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& create_user_bk_c::pwd() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.create_user_bk_c.pwd)
  return _internal_pwd();
}
inline void create_user_bk_c::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.create_user_bk_c.pwd)
}
inline std::string* create_user_bk_c::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.create_user_bk_c.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& create_user_bk_c::_internal_pwd() const {
  return pwd_.Get();
}
inline void create_user_bk_c::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void create_user_bk_c::set_pwd(std::string&& value) {
  
  pwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.create_user_bk_c.pwd)
}
inline void create_user_bk_c::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.create_user_bk_c.pwd)
}
inline void create_user_bk_c::set_pwd(const char* value,
    size_t size) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.create_user_bk_c.pwd)
}
inline std::string* create_user_bk_c::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* create_user_bk_c::release_pwd() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.create_user_bk_c.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void create_user_bk_c::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.create_user_bk_c.pwd)
}

// int32 trade = 4;
inline void create_user_bk_c::clear_trade() {
  trade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_user_bk_c::_internal_trade() const {
  return trade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_user_bk_c::trade() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.create_user_bk_c.trade)
  return _internal_trade();
}
inline void create_user_bk_c::_internal_set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trade_ = value;
}
inline void create_user_bk_c::set_trade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trade(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.create_user_bk_c.trade)
}

// -------------------------------------------------------------------

// create_user_bk_s

// int32 result = 1;
inline void create_user_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_user_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_user_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.create_user_bk_s.result)
  return _internal_result();
}
inline void create_user_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void create_user_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.create_user_bk_s.result)
}

// -------------------------------------------------------------------

// user_proxy_bk_c

// int64 phone = 1;
inline void user_proxy_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_proxy_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_proxy_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_c.phone)
  return _internal_phone();
}
inline void user_proxy_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_proxy_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_c.phone)
}

// -------------------------------------------------------------------

// user_proxy_bk_s

// int64 phone = 1;
inline void user_proxy_bk_s::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_proxy_bk_s::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_proxy_bk_s::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.phone)
  return _internal_phone();
}
inline void user_proxy_bk_s::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void user_proxy_bk_s::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.phone)
}

// string nichen = 2;
inline void user_proxy_bk_s::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& user_proxy_bk_s::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.nichen)
  return _internal_nichen();
}
inline void user_proxy_bk_s::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.nichen)
}
inline std::string* user_proxy_bk_s::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.user_proxy_bk_s.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& user_proxy_bk_s::_internal_nichen() const {
  return nichen_.Get();
}
inline void user_proxy_bk_s::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void user_proxy_bk_s::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.user_proxy_bk_s.nichen)
}
inline void user_proxy_bk_s::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.user_proxy_bk_s.nichen)
}
inline void user_proxy_bk_s::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.user_proxy_bk_s.nichen)
}
inline std::string* user_proxy_bk_s::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* user_proxy_bk_s::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.user_proxy_bk_s.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_proxy_bk_s::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.user_proxy_bk_s.nichen)
}

// int64 parent_phone = 3;
inline void user_proxy_bk_s::clear_parent_phone() {
  parent_phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_proxy_bk_s::_internal_parent_phone() const {
  return parent_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 user_proxy_bk_s::parent_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.parent_phone)
  return _internal_parent_phone();
}
inline void user_proxy_bk_s::_internal_set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parent_phone_ = value;
}
inline void user_proxy_bk_s::set_parent_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parent_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.parent_phone)
}

// string parent_nichen = 4;
inline void user_proxy_bk_s::clear_parent_nichen() {
  parent_nichen_.ClearToEmpty();
}
inline const std::string& user_proxy_bk_s::parent_nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.parent_nichen)
  return _internal_parent_nichen();
}
inline void user_proxy_bk_s::set_parent_nichen(const std::string& value) {
  _internal_set_parent_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.parent_nichen)
}
inline std::string* user_proxy_bk_s::mutable_parent_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.user_proxy_bk_s.parent_nichen)
  return _internal_mutable_parent_nichen();
}
inline const std::string& user_proxy_bk_s::_internal_parent_nichen() const {
  return parent_nichen_.Get();
}
inline void user_proxy_bk_s::_internal_set_parent_nichen(const std::string& value) {
  
  parent_nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void user_proxy_bk_s::set_parent_nichen(std::string&& value) {
  
  parent_nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.user_proxy_bk_s.parent_nichen)
}
inline void user_proxy_bk_s::set_parent_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.user_proxy_bk_s.parent_nichen)
}
inline void user_proxy_bk_s::set_parent_nichen(const char* value,
    size_t size) {
  
  parent_nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.user_proxy_bk_s.parent_nichen)
}
inline std::string* user_proxy_bk_s::_internal_mutable_parent_nichen() {
  
  return parent_nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* user_proxy_bk_s::release_parent_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.user_proxy_bk_s.parent_nichen)
  return parent_nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_proxy_bk_s::set_allocated_parent_nichen(std::string* parent_nichen) {
  if (parent_nichen != nullptr) {
    
  } else {
    
  }
  parent_nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.user_proxy_bk_s.parent_nichen)
}

// int32 sum_1_activated = 5;
inline void user_proxy_bk_s::clear_sum_1_activated() {
  sum_1_activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_sum_1_activated() const {
  return sum_1_activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::sum_1_activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.sum_1_activated)
  return _internal_sum_1_activated();
}
inline void user_proxy_bk_s::_internal_set_sum_1_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_1_activated_ = value;
}
inline void user_proxy_bk_s::set_sum_1_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sum_1_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.sum_1_activated)
}

// int32 count_1_phone = 6;
inline void user_proxy_bk_s::clear_count_1_phone() {
  count_1_phone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_count_1_phone() const {
  return count_1_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::count_1_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.count_1_phone)
  return _internal_count_1_phone();
}
inline void user_proxy_bk_s::_internal_set_count_1_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_1_phone_ = value;
}
inline void user_proxy_bk_s::set_count_1_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_1_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.count_1_phone)
}

// int32 sum_2_activated = 7;
inline void user_proxy_bk_s::clear_sum_2_activated() {
  sum_2_activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_sum_2_activated() const {
  return sum_2_activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::sum_2_activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.sum_2_activated)
  return _internal_sum_2_activated();
}
inline void user_proxy_bk_s::_internal_set_sum_2_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_2_activated_ = value;
}
inline void user_proxy_bk_s::set_sum_2_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sum_2_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.sum_2_activated)
}

// int32 count_2_phone = 8;
inline void user_proxy_bk_s::clear_count_2_phone() {
  count_2_phone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_count_2_phone() const {
  return count_2_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::count_2_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.count_2_phone)
  return _internal_count_2_phone();
}
inline void user_proxy_bk_s::_internal_set_count_2_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_2_phone_ = value;
}
inline void user_proxy_bk_s::set_count_2_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_2_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.count_2_phone)
}

// int32 sum_3_activated = 9;
inline void user_proxy_bk_s::clear_sum_3_activated() {
  sum_3_activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_sum_3_activated() const {
  return sum_3_activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::sum_3_activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.sum_3_activated)
  return _internal_sum_3_activated();
}
inline void user_proxy_bk_s::_internal_set_sum_3_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_3_activated_ = value;
}
inline void user_proxy_bk_s::set_sum_3_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sum_3_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.sum_3_activated)
}

// int32 count_3_phone = 10;
inline void user_proxy_bk_s::clear_count_3_phone() {
  count_3_phone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_count_3_phone() const {
  return count_3_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::count_3_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.count_3_phone)
  return _internal_count_3_phone();
}
inline void user_proxy_bk_s::_internal_set_count_3_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_3_phone_ = value;
}
inline void user_proxy_bk_s::set_count_3_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_3_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.count_3_phone)
}

// int32 sum_99_activated = 11;
inline void user_proxy_bk_s::clear_sum_99_activated() {
  sum_99_activated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_sum_99_activated() const {
  return sum_99_activated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::sum_99_activated() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.sum_99_activated)
  return _internal_sum_99_activated();
}
inline void user_proxy_bk_s::_internal_set_sum_99_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_99_activated_ = value;
}
inline void user_proxy_bk_s::set_sum_99_activated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sum_99_activated(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.sum_99_activated)
}

// int32 count_99_phone = 12;
inline void user_proxy_bk_s::clear_count_99_phone() {
  count_99_phone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::_internal_count_99_phone() const {
  return count_99_phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_proxy_bk_s::count_99_phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.count_99_phone)
  return _internal_count_99_phone();
}
inline void user_proxy_bk_s::_internal_set_count_99_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_99_phone_ = value;
}
inline void user_proxy_bk_s::set_count_99_phone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_99_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.count_99_phone)
}

// float team_total_income = 13;
inline void user_proxy_bk_s::clear_team_total_income() {
  team_total_income_ = 0;
}
inline float user_proxy_bk_s::_internal_team_total_income() const {
  return team_total_income_;
}
inline float user_proxy_bk_s::team_total_income() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.user_proxy_bk_s.team_total_income)
  return _internal_team_total_income();
}
inline void user_proxy_bk_s::_internal_set_team_total_income(float value) {
  
  team_total_income_ = value;
}
inline void user_proxy_bk_s::set_team_total_income(float value) {
  _internal_set_team_total_income(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.user_proxy_bk_s.team_total_income)
}

// -------------------------------------------------------------------

// close_user_bk_c

// int64 phone = 1;
inline void close_user_bk_c::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 close_user_bk_c::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 close_user_bk_c::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.close_user_bk_c.phone)
  return _internal_phone();
}
inline void close_user_bk_c::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void close_user_bk_c::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.close_user_bk_c.phone)
}

// -------------------------------------------------------------------

// close_user_bk_s

// int32 result = 1;
inline void close_user_bk_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 close_user_bk_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 close_user_bk_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.close_user_bk_s.result)
  return _internal_result();
}
inline void close_user_bk_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void close_user_bk_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.close_user_bk_s.result)
}

// -------------------------------------------------------------------

// new_recharge_s

// int32 result = 1;
inline void new_recharge_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 new_recharge_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 new_recharge_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.new_recharge_s.result)
  return _internal_result();
}
inline void new_recharge_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void new_recharge_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.new_recharge_s.result)
}

// -------------------------------------------------------------------

// contract_oper_list_c

// int32 type = 1;
inline void contract_oper_list_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_list_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_list_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_c.type)
  return _internal_type();
}
inline void contract_oper_list_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void contract_oper_list_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_list_c.type)
}

// -------------------------------------------------------------------

// contract_oper_list_s_item

// int32 contract_type = 1;
inline void contract_oper_list_s_item::clear_contract_type() {
  contract_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_list_s_item::_internal_contract_type() const {
  return contract_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_list_s_item::contract_type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_s.item.contract_type)
  return _internal_contract_type();
}
inline void contract_oper_list_s_item::_internal_set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contract_type_ = value;
}
inline void contract_oper_list_s_item::set_contract_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_list_s.item.contract_type)
}

// float price = 2;
inline void contract_oper_list_s_item::clear_price() {
  price_ = 0;
}
inline float contract_oper_list_s_item::_internal_price() const {
  return price_;
}
inline float contract_oper_list_s_item::price() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_s.item.price)
  return _internal_price();
}
inline void contract_oper_list_s_item::_internal_set_price(float value) {
  
  price_ = value;
}
inline void contract_oper_list_s_item::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_list_s.item.price)
}

// int64 phone = 3;
inline void contract_oper_list_s_item::clear_phone() {
  phone_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 contract_oper_list_s_item::_internal_phone() const {
  return phone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 contract_oper_list_s_item::phone() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_s.item.phone)
  return _internal_phone();
}
inline void contract_oper_list_s_item::_internal_set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  phone_ = value;
}
inline void contract_oper_list_s_item::set_phone(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_list_s.item.phone)
}

// string nichen = 4;
inline void contract_oper_list_s_item::clear_nichen() {
  nichen_.ClearToEmpty();
}
inline const std::string& contract_oper_list_s_item::nichen() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_s.item.nichen)
  return _internal_nichen();
}
inline void contract_oper_list_s_item::set_nichen(const std::string& value) {
  _internal_set_nichen(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_list_s.item.nichen)
}
inline std::string* contract_oper_list_s_item::mutable_nichen() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.contract_oper_list_s.item.nichen)
  return _internal_mutable_nichen();
}
inline const std::string& contract_oper_list_s_item::_internal_nichen() const {
  return nichen_.Get();
}
inline void contract_oper_list_s_item::_internal_set_nichen(const std::string& value) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void contract_oper_list_s_item::set_nichen(std::string&& value) {
  
  nichen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.contract_oper_list_s.item.nichen)
}
inline void contract_oper_list_s_item::set_nichen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.contract_oper_list_s.item.nichen)
}
inline void contract_oper_list_s_item::set_nichen(const char* value,
    size_t size) {
  
  nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.contract_oper_list_s.item.nichen)
}
inline std::string* contract_oper_list_s_item::_internal_mutable_nichen() {
  
  return nichen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* contract_oper_list_s_item::release_nichen() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.contract_oper_list_s.item.nichen)
  return nichen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void contract_oper_list_s_item::set_allocated_nichen(std::string* nichen) {
  if (nichen != nullptr) {
    
  } else {
    
  }
  nichen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nichen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.contract_oper_list_s.item.nichen)
}

// -------------------------------------------------------------------

// contract_oper_list_s

// repeated .frmpub.protocc.contract_oper_list_s.item its = 1;
inline int contract_oper_list_s::_internal_its_size() const {
  return its_.size();
}
inline int contract_oper_list_s::its_size() const {
  return _internal_its_size();
}
inline void contract_oper_list_s::clear_its() {
  its_.Clear();
}
inline ::frmpub::protocc::contract_oper_list_s_item* contract_oper_list_s::mutable_its(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.contract_oper_list_s.its)
  return its_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_oper_list_s_item >*
contract_oper_list_s::mutable_its() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.contract_oper_list_s.its)
  return &its_;
}
inline const ::frmpub::protocc::contract_oper_list_s_item& contract_oper_list_s::_internal_its(int index) const {
  return its_.Get(index);
}
inline const ::frmpub::protocc::contract_oper_list_s_item& contract_oper_list_s::its(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_s.its)
  return _internal_its(index);
}
inline ::frmpub::protocc::contract_oper_list_s_item* contract_oper_list_s::_internal_add_its() {
  return its_.Add();
}
inline ::frmpub::protocc::contract_oper_list_s_item* contract_oper_list_s::add_its() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.contract_oper_list_s.its)
  return _internal_add_its();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::contract_oper_list_s_item >&
contract_oper_list_s::its() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.contract_oper_list_s.its)
  return its_;
}

// int32 type = 2;
inline void contract_oper_list_s::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_list_s::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_list_s::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_list_s.type)
  return _internal_type();
}
inline void contract_oper_list_s::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void contract_oper_list_s::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_list_s.type)
}

// -------------------------------------------------------------------

// contract_oper_c

// int32 type = 1;
inline void contract_oper_c::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_c::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_c::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_c.type)
  return _internal_type();
}
inline void contract_oper_c::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void contract_oper_c::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_c.type)
}

// -------------------------------------------------------------------

// contract_oper_s

// int32 type = 1;
inline void contract_oper_s::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_s::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_s::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_s.type)
  return _internal_type();
}
inline void contract_oper_s::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void contract_oper_s::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_s.type)
}

// int32 result = 2;
inline void contract_oper_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 contract_oper_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.contract_oper_s.result)
  return _internal_result();
}
inline void contract_oper_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void contract_oper_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.contract_oper_s.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocc
}  // namespace frmpub

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frmpub::protocc::BackendMsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frmpub::protocc::BackendMsgId>() {
  return ::frmpub::protocc::BackendMsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_2eproto
