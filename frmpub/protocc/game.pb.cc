// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace frmpub {
	namespace protocc {
		constexpr register_game_dbvisit_c::register_game_dbvisit_c(
			::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
			: sif_(nullptr) {
		}
		struct register_game_dbvisit_cDefaultTypeInternal {
			constexpr register_game_dbvisit_cDefaultTypeInternal()
				: _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {
			}
			~register_game_dbvisit_cDefaultTypeInternal() {}
			union {
				register_game_dbvisit_c _instance;
			};
		};
		PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_game_dbvisit_cDefaultTypeInternal _register_game_dbvisit_c_default_instance_;
		constexpr register_game_dbvisit_s::register_game_dbvisit_s(
			::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
			: result_(0) {
		}
		struct register_game_dbvisit_sDefaultTypeInternal {
			constexpr register_game_dbvisit_sDefaultTypeInternal()
				: _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {
			}
			~register_game_dbvisit_sDefaultTypeInternal() {}
			union {
				register_game_dbvisit_s _instance;
			};
		};
		PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_game_dbvisit_sDefaultTypeInternal _register_game_dbvisit_s_default_instance_;
		constexpr register_game_world_c::register_game_world_c(
			::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
			: sif_(nullptr) {
		}
		struct register_game_world_cDefaultTypeInternal {
			constexpr register_game_world_cDefaultTypeInternal()
				: _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {
			}
			~register_game_world_cDefaultTypeInternal() {}
			union {
				register_game_world_c _instance;
			};
		};
		PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_game_world_cDefaultTypeInternal _register_game_world_c_default_instance_;
		constexpr register_game_world_s::register_game_world_s(
			::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
			: result_(0) {
		}
		struct register_game_world_sDefaultTypeInternal {
			constexpr register_game_world_sDefaultTypeInternal()
				: _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {
			}
			~register_game_world_sDefaultTypeInternal() {}
			union {
				register_game_world_s _instance;
			};
		};
		PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_game_world_sDefaultTypeInternal _register_game_world_s_default_instance_;
	}  // namespace protocc
}  // namespace frmpub
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_dbvisit_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_dbvisit_c, sif_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_dbvisit_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_dbvisit_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_world_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_world_c, sif_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_world_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::register_game_world_s, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frmpub::protocc::register_game_dbvisit_c)},
  { 6, -1, sizeof(::frmpub::protocc::register_game_dbvisit_s)},
  { 12, -1, sizeof(::frmpub::protocc::register_game_world_c)},
  { 18, -1, sizeof(::frmpub::protocc::register_game_world_s)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_register_game_dbvisit_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_register_game_dbvisit_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_register_game_world_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_register_game_world_s_default_instance_),
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
"\n\ngame.proto\022\016frmpub.protocc\032\014common.pro"
"to\"B\n\027register_game_dbvisit_c\022\'\n\003sif\030\001 \001"
"(\0132\032.frmpub.protocc.ServerInfo\")\n\027regist"
"er_game_dbvisit_s\022\016\n\006result\030\001 \001(\005\"@\n\025reg"
"ister_game_world_c\022\'\n\003sif\030\001 \001(\0132\032.frmpub"
".protocc.ServerInfo\"\'\n\025register_game_wor"
"ld_s\022\016\n\006result\030\001 \001(\005b\006proto3"
;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const descriptor_table_game_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto = {
  false, false, 268, descriptor_table_protodef_game_2eproto, "game.proto",
  &descriptor_table_game_2eproto_once, descriptor_table_game_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_game_2eproto::offsets,
  file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto, file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_game_2eproto_metadata_getter(int index) {
	::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
	return descriptor_table_game_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
namespace frmpub {
	namespace protocc {

		// ===================================================================

		class register_game_dbvisit_c::_Internal {
		public:
			static const ::frmpub::protocc::ServerInfo& sif(const register_game_dbvisit_c* msg);
		};

		const ::frmpub::protocc::ServerInfo&
			register_game_dbvisit_c::_Internal::sif(const register_game_dbvisit_c* msg) {
			return *msg->sif_;
		}
		void register_game_dbvisit_c::clear_sif() {
			if (GetArena() == nullptr && sif_ != nullptr) {
				delete sif_;
			}
			sif_ = nullptr;
		}
		register_game_dbvisit_c::register_game_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
			: ::PROTOBUF_NAMESPACE_ID::Message(arena) {
			SharedCtor();
			RegisterArenaDtor(arena);
			// @@protoc_insertion_point(arena_constructor:frmpub.protocc.register_game_dbvisit_c)
		}
		register_game_dbvisit_c::register_game_dbvisit_c(const register_game_dbvisit_c& from)
			: ::PROTOBUF_NAMESPACE_ID::Message() {
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			if (from._internal_has_sif()) {
				sif_ = new ::frmpub::protocc::ServerInfo(*from.sif_);
			}
			else {
				sif_ = nullptr;
			}
			// @@protoc_insertion_point(copy_constructor:frmpub.protocc.register_game_dbvisit_c)
		}

		void register_game_dbvisit_c::SharedCtor() {
			sif_ = nullptr;
		}

		register_game_dbvisit_c::~register_game_dbvisit_c() {
			// @@protoc_insertion_point(destructor:frmpub.protocc.register_game_dbvisit_c)
			SharedDtor();
			_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		void register_game_dbvisit_c::SharedDtor() {
			GOOGLE_DCHECK(GetArena() == nullptr);
			if (this != internal_default_instance()) delete sif_;
		}

		void register_game_dbvisit_c::ArenaDtor(void* object) {
			register_game_dbvisit_c* _this = reinterpret_cast<register_game_dbvisit_c*>(object);
			(void)_this;
		}
		void register_game_dbvisit_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
		}
		void register_game_dbvisit_c::SetCachedSize(int size) const {
			_cached_size_.Set(size);
		}

		void register_game_dbvisit_c::Clear() {
			// @@protoc_insertion_point(message_clear_start:frmpub.protocc.register_game_dbvisit_c)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			if (GetArena() == nullptr && sif_ != nullptr) {
				delete sif_;
			}
			sif_ = nullptr;
			_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		const char* register_game_dbvisit_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
			while (!ctx->Done(&ptr)) {
				::PROTOBUF_NAMESPACE_ID::uint32 tag;
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
				CHK_(ptr);
				switch (tag >> 3) {
					// .frmpub.protocc.ServerInfo sif = 1;
				case 1:
					if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
						ptr = ctx->ParseMessage(_internal_mutable_sif(), ptr);
						CHK_(ptr);
					}
					else goto handle_unusual;
					continue;
				default:
				{
				handle_unusual:
					if ((tag & 7) == 4 || tag == 0) {
						ctx->SetLastTag(tag);
						goto success;
					}
					ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
					CHK_(ptr != nullptr);
					continue;
				}
				}  // switch
			}  // while
		success:
			return ptr;
		failure:
			ptr = nullptr;
			goto success;
#undef CHK_
		}

		::PROTOBUF_NAMESPACE_ID::uint8* register_game_dbvisit_c::_InternalSerialize(
			::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
			// @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.register_game_dbvisit_c)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			// .frmpub.protocc.ServerInfo sif = 1;
			if (this->has_sif()) {
				target = stream->EnsureSpace(target);
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
					InternalWriteMessage(
						1, _Internal::sif(this), target, stream);
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
					_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
			}
			// @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.register_game_dbvisit_c)
			return target;
		}

		size_t register_game_dbvisit_c::ByteSizeLong() const {
			// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.register_game_dbvisit_c)
			size_t total_size = 0;

			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			// .frmpub.protocc.ServerInfo sif = 1;
			if (this->has_sif()) {
				total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*sif_);
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
					_internal_metadata_, total_size, &_cached_size_);
			}
			int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
			SetCachedSize(cached_size);
			return total_size;
		}

		void register_game_dbvisit_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.register_game_dbvisit_c)
			GOOGLE_DCHECK_NE(&from, this);
			const register_game_dbvisit_c* source =
				::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_game_dbvisit_c>(
					&from);
			if (source == nullptr) {
				// @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.register_game_dbvisit_c)
				::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
			}
			else {
				// @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.register_game_dbvisit_c)
				MergeFrom(*source);
			}
		}

		void register_game_dbvisit_c::MergeFrom(const register_game_dbvisit_c& from) {
			// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.register_game_dbvisit_c)
			GOOGLE_DCHECK_NE(&from, this);
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			if (from.has_sif()) {
				_internal_mutable_sif()->::frmpub::protocc::ServerInfo::MergeFrom(from._internal_sif());
			}
		}

		void register_game_dbvisit_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.register_game_dbvisit_c)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		void register_game_dbvisit_c::CopyFrom(const register_game_dbvisit_c& from) {
			// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.register_game_dbvisit_c)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		bool register_game_dbvisit_c::IsInitialized() const {
			return true;
		}

		void register_game_dbvisit_c::InternalSwap(register_game_dbvisit_c* other) {
			using std::swap;
			_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
			swap(sif_, other->sif_);
		}

		::PROTOBUF_NAMESPACE_ID::Metadata register_game_dbvisit_c::GetMetadata() const {
			return GetMetadataStatic();
		}


		// ===================================================================

		class register_game_dbvisit_s::_Internal {
		public:
		};

		register_game_dbvisit_s::register_game_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
			: ::PROTOBUF_NAMESPACE_ID::Message(arena) {
			SharedCtor();
			RegisterArenaDtor(arena);
			// @@protoc_insertion_point(arena_constructor:frmpub.protocc.register_game_dbvisit_s)
		}
		register_game_dbvisit_s::register_game_dbvisit_s(const register_game_dbvisit_s& from)
			: ::PROTOBUF_NAMESPACE_ID::Message() {
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			result_ = from.result_;
			// @@protoc_insertion_point(copy_constructor:frmpub.protocc.register_game_dbvisit_s)
		}

		void register_game_dbvisit_s::SharedCtor() {
			result_ = 0;
		}

		register_game_dbvisit_s::~register_game_dbvisit_s() {
			// @@protoc_insertion_point(destructor:frmpub.protocc.register_game_dbvisit_s)
			SharedDtor();
			_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		void register_game_dbvisit_s::SharedDtor() {
			GOOGLE_DCHECK(GetArena() == nullptr);
		}

		void register_game_dbvisit_s::ArenaDtor(void* object) {
			register_game_dbvisit_s* _this = reinterpret_cast<register_game_dbvisit_s*>(object);
			(void)_this;
		}
		void register_game_dbvisit_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
		}
		void register_game_dbvisit_s::SetCachedSize(int size) const {
			_cached_size_.Set(size);
		}

		void register_game_dbvisit_s::Clear() {
			// @@protoc_insertion_point(message_clear_start:frmpub.protocc.register_game_dbvisit_s)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			result_ = 0;
			_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		const char* register_game_dbvisit_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
			while (!ctx->Done(&ptr)) {
				::PROTOBUF_NAMESPACE_ID::uint32 tag;
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
				CHK_(ptr);
				switch (tag >> 3) {
					// int32 result = 1;
				case 1:
					if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
						result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
						CHK_(ptr);
					}
					else goto handle_unusual;
					continue;
				default:
				{
				handle_unusual:
					if ((tag & 7) == 4 || tag == 0) {
						ctx->SetLastTag(tag);
						goto success;
					}
					ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
					CHK_(ptr != nullptr);
					continue;
				}
				}  // switch
			}  // while
		success:
			return ptr;
		failure:
			ptr = nullptr;
			goto success;
#undef CHK_
		}

		::PROTOBUF_NAMESPACE_ID::uint8* register_game_dbvisit_s::_InternalSerialize(
			::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
			// @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.register_game_dbvisit_s)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			// int32 result = 1;
			if (this->result() != 0) {
				target = stream->EnsureSpace(target);
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
					_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
			}
			// @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.register_game_dbvisit_s)
			return target;
		}

		size_t register_game_dbvisit_s::ByteSizeLong() const {
			// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.register_game_dbvisit_s)
			size_t total_size = 0;

			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			// int32 result = 1;
			if (this->result() != 0) {
				total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_result());
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
					_internal_metadata_, total_size, &_cached_size_);
			}
			int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
			SetCachedSize(cached_size);
			return total_size;
		}

		void register_game_dbvisit_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.register_game_dbvisit_s)
			GOOGLE_DCHECK_NE(&from, this);
			const register_game_dbvisit_s* source =
				::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_game_dbvisit_s>(
					&from);
			if (source == nullptr) {
				// @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.register_game_dbvisit_s)
				::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
			}
			else {
				// @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.register_game_dbvisit_s)
				MergeFrom(*source);
			}
		}

		void register_game_dbvisit_s::MergeFrom(const register_game_dbvisit_s& from) {
			// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.register_game_dbvisit_s)
			GOOGLE_DCHECK_NE(&from, this);
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			if (from.result() != 0) {
				_internal_set_result(from._internal_result());
			}
		}

		void register_game_dbvisit_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.register_game_dbvisit_s)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		void register_game_dbvisit_s::CopyFrom(const register_game_dbvisit_s& from) {
			// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.register_game_dbvisit_s)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		bool register_game_dbvisit_s::IsInitialized() const {
			return true;
		}

		void register_game_dbvisit_s::InternalSwap(register_game_dbvisit_s* other) {
			using std::swap;
			_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
			swap(result_, other->result_);
		}

		::PROTOBUF_NAMESPACE_ID::Metadata register_game_dbvisit_s::GetMetadata() const {
			return GetMetadataStatic();
		}


		// ===================================================================

		class register_game_world_c::_Internal {
		public:
			static const ::frmpub::protocc::ServerInfo& sif(const register_game_world_c* msg);
		};

		const ::frmpub::protocc::ServerInfo&
			register_game_world_c::_Internal::sif(const register_game_world_c* msg) {
			return *msg->sif_;
		}
		void register_game_world_c::clear_sif() {
			if (GetArena() == nullptr && sif_ != nullptr) {
				delete sif_;
			}
			sif_ = nullptr;
		}
		register_game_world_c::register_game_world_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
			: ::PROTOBUF_NAMESPACE_ID::Message(arena) {
			SharedCtor();
			RegisterArenaDtor(arena);
			// @@protoc_insertion_point(arena_constructor:frmpub.protocc.register_game_world_c)
		}
		register_game_world_c::register_game_world_c(const register_game_world_c& from)
			: ::PROTOBUF_NAMESPACE_ID::Message() {
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			if (from._internal_has_sif()) {
				sif_ = new ::frmpub::protocc::ServerInfo(*from.sif_);
			}
			else {
				sif_ = nullptr;
			}
			// @@protoc_insertion_point(copy_constructor:frmpub.protocc.register_game_world_c)
		}

		void register_game_world_c::SharedCtor() {
			sif_ = nullptr;
		}

		register_game_world_c::~register_game_world_c() {
			// @@protoc_insertion_point(destructor:frmpub.protocc.register_game_world_c)
			SharedDtor();
			_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		void register_game_world_c::SharedDtor() {
			GOOGLE_DCHECK(GetArena() == nullptr);
			if (this != internal_default_instance()) delete sif_;
		}

		void register_game_world_c::ArenaDtor(void* object) {
			register_game_world_c* _this = reinterpret_cast<register_game_world_c*>(object);
			(void)_this;
		}
		void register_game_world_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
		}
		void register_game_world_c::SetCachedSize(int size) const {
			_cached_size_.Set(size);
		}

		void register_game_world_c::Clear() {
			// @@protoc_insertion_point(message_clear_start:frmpub.protocc.register_game_world_c)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			if (GetArena() == nullptr && sif_ != nullptr) {
				delete sif_;
			}
			sif_ = nullptr;
			_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		const char* register_game_world_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
			while (!ctx->Done(&ptr)) {
				::PROTOBUF_NAMESPACE_ID::uint32 tag;
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
				CHK_(ptr);
				switch (tag >> 3) {
					// .frmpub.protocc.ServerInfo sif = 1;
				case 1:
					if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
						ptr = ctx->ParseMessage(_internal_mutable_sif(), ptr);
						CHK_(ptr);
					}
					else goto handle_unusual;
					continue;
				default:
				{
				handle_unusual:
					if ((tag & 7) == 4 || tag == 0) {
						ctx->SetLastTag(tag);
						goto success;
					}
					ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
					CHK_(ptr != nullptr);
					continue;
				}
				}  // switch
			}  // while
		success:
			return ptr;
		failure:
			ptr = nullptr;
			goto success;
#undef CHK_
		}

		::PROTOBUF_NAMESPACE_ID::uint8* register_game_world_c::_InternalSerialize(
			::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
			// @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.register_game_world_c)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			// .frmpub.protocc.ServerInfo sif = 1;
			if (this->has_sif()) {
				target = stream->EnsureSpace(target);
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
					InternalWriteMessage(
						1, _Internal::sif(this), target, stream);
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
					_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
			}
			// @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.register_game_world_c)
			return target;
		}

		size_t register_game_world_c::ByteSizeLong() const {
			// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.register_game_world_c)
			size_t total_size = 0;

			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			// .frmpub.protocc.ServerInfo sif = 1;
			if (this->has_sif()) {
				total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*sif_);
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
					_internal_metadata_, total_size, &_cached_size_);
			}
			int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
			SetCachedSize(cached_size);
			return total_size;
		}

		void register_game_world_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.register_game_world_c)
			GOOGLE_DCHECK_NE(&from, this);
			const register_game_world_c* source =
				::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_game_world_c>(
					&from);
			if (source == nullptr) {
				// @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.register_game_world_c)
				::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
			}
			else {
				// @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.register_game_world_c)
				MergeFrom(*source);
			}
		}

		void register_game_world_c::MergeFrom(const register_game_world_c& from) {
			// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.register_game_world_c)
			GOOGLE_DCHECK_NE(&from, this);
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			if (from.has_sif()) {
				_internal_mutable_sif()->::frmpub::protocc::ServerInfo::MergeFrom(from._internal_sif());
			}
		}

		void register_game_world_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.register_game_world_c)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		void register_game_world_c::CopyFrom(const register_game_world_c& from) {
			// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.register_game_world_c)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		bool register_game_world_c::IsInitialized() const {
			return true;
		}

		void register_game_world_c::InternalSwap(register_game_world_c* other) {
			using std::swap;
			_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
			swap(sif_, other->sif_);
		}

		::PROTOBUF_NAMESPACE_ID::Metadata register_game_world_c::GetMetadata() const {
			return GetMetadataStatic();
		}


		// ===================================================================

		class register_game_world_s::_Internal {
		public:
		};

		register_game_world_s::register_game_world_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
			: ::PROTOBUF_NAMESPACE_ID::Message(arena) {
			SharedCtor();
			RegisterArenaDtor(arena);
			// @@protoc_insertion_point(arena_constructor:frmpub.protocc.register_game_world_s)
		}
		register_game_world_s::register_game_world_s(const register_game_world_s& from)
			: ::PROTOBUF_NAMESPACE_ID::Message() {
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			result_ = from.result_;
			// @@protoc_insertion_point(copy_constructor:frmpub.protocc.register_game_world_s)
		}

		void register_game_world_s::SharedCtor() {
			result_ = 0;
		}

		register_game_world_s::~register_game_world_s() {
			// @@protoc_insertion_point(destructor:frmpub.protocc.register_game_world_s)
			SharedDtor();
			_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		void register_game_world_s::SharedDtor() {
			GOOGLE_DCHECK(GetArena() == nullptr);
		}

		void register_game_world_s::ArenaDtor(void* object) {
			register_game_world_s* _this = reinterpret_cast<register_game_world_s*>(object);
			(void)_this;
		}
		void register_game_world_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
		}
		void register_game_world_s::SetCachedSize(int size) const {
			_cached_size_.Set(size);
		}

		void register_game_world_s::Clear() {
			// @@protoc_insertion_point(message_clear_start:frmpub.protocc.register_game_world_s)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			result_ = 0;
			_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
		}

		const char* register_game_world_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
			while (!ctx->Done(&ptr)) {
				::PROTOBUF_NAMESPACE_ID::uint32 tag;
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
				CHK_(ptr);
				switch (tag >> 3) {
					// int32 result = 1;
				case 1:
					if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
						result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
						CHK_(ptr);
					}
					else goto handle_unusual;
					continue;
				default:
				{
				handle_unusual:
					if ((tag & 7) == 4 || tag == 0) {
						ctx->SetLastTag(tag);
						goto success;
					}
					ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
					CHK_(ptr != nullptr);
					continue;
				}
				}  // switch
			}  // while
		success:
			return ptr;
		failure:
			ptr = nullptr;
			goto success;
#undef CHK_
		}

		::PROTOBUF_NAMESPACE_ID::uint8* register_game_world_s::_InternalSerialize(
			::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
			// @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.register_game_world_s)
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			// int32 result = 1;
			if (this->result() != 0) {
				target = stream->EnsureSpace(target);
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
					_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
			}
			// @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.register_game_world_s)
			return target;
		}

		size_t register_game_world_s::ByteSizeLong() const {
			// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.register_game_world_s)
			size_t total_size = 0;

			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			// Prevent compiler warnings about cached_has_bits being unused
			(void)cached_has_bits;

			// int32 result = 1;
			if (this->result() != 0) {
				total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_result());
			}

			if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
				return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
					_internal_metadata_, total_size, &_cached_size_);
			}
			int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
			SetCachedSize(cached_size);
			return total_size;
		}

		void register_game_world_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.register_game_world_s)
			GOOGLE_DCHECK_NE(&from, this);
			const register_game_world_s* source =
				::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_game_world_s>(
					&from);
			if (source == nullptr) {
				// @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.register_game_world_s)
				::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
			}
			else {
				// @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.register_game_world_s)
				MergeFrom(*source);
			}
		}

		void register_game_world_s::MergeFrom(const register_game_world_s& from) {
			// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.register_game_world_s)
			GOOGLE_DCHECK_NE(&from, this);
			_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
			::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
			(void)cached_has_bits;

			if (from.result() != 0) {
				_internal_set_result(from._internal_result());
			}
		}

		void register_game_world_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
			// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.register_game_world_s)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		void register_game_world_s::CopyFrom(const register_game_world_s& from) {
			// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.register_game_world_s)
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		bool register_game_world_s::IsInitialized() const {
			return true;
		}

		void register_game_world_s::InternalSwap(register_game_world_s* other) {
			using std::swap;
			_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
			swap(result_, other->result_);
		}

		::PROTOBUF_NAMESPACE_ID::Metadata register_game_world_s::GetMetadata() const {
			return GetMetadataStatic();
		}


		// @@protoc_insertion_point(namespace_scope)
	}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE::frmpub::protocc::register_game_dbvisit_c* Arena::CreateMaybeMessage< ::frmpub::protocc::register_game_dbvisit_c >(Arena* arena) {
	return Arena::CreateMessageInternal< ::frmpub::protocc::register_game_dbvisit_c >(arena);
}
template<> PROTOBUF_NOINLINE::frmpub::protocc::register_game_dbvisit_s* Arena::CreateMaybeMessage< ::frmpub::protocc::register_game_dbvisit_s >(Arena* arena) {
	return Arena::CreateMessageInternal< ::frmpub::protocc::register_game_dbvisit_s >(arena);
}
template<> PROTOBUF_NOINLINE::frmpub::protocc::register_game_world_c* Arena::CreateMaybeMessage< ::frmpub::protocc::register_game_world_c >(Arena* arena) {
	return Arena::CreateMessageInternal< ::frmpub::protocc::register_game_world_c >(arena);
}
template<> PROTOBUF_NOINLINE::frmpub::protocc::register_game_world_s* Arena::CreateMaybeMessage< ::frmpub::protocc::register_game_world_s >(Arena* arena) {
	return Arena::CreateMessageInternal< ::frmpub::protocc::register_game_world_s >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
