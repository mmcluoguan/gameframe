// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace frmpub {
namespace protocc {
constexpr writelog_to_log_c::writelog_to_log_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dirname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct writelog_to_log_cDefaultTypeInternal {
  constexpr writelog_to_log_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~writelog_to_log_cDefaultTypeInternal() {}
  union {
    writelog_to_log_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT writelog_to_log_cDefaultTypeInternal _writelog_to_log_c_default_instance_;
constexpr writelog_to_log_s::writelog_to_log_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct writelog_to_log_sDefaultTypeInternal {
  constexpr writelog_to_log_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~writelog_to_log_sDefaultTypeInternal() {}
  union {
    writelog_to_log_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT writelog_to_log_sDefaultTypeInternal _writelog_to_log_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_log_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_log_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_log_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_log_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::writelog_to_log_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::writelog_to_log_c, dirname_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::writelog_to_log_c, logname_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::writelog_to_log_c, logdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::writelog_to_log_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::writelog_to_log_s, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frmpub::protocc::writelog_to_log_c)},
  { 8, -1, sizeof(::frmpub::protocc::writelog_to_log_s)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_writelog_to_log_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_writelog_to_log_s_default_instance_),
};

const char descriptor_table_protodef_log_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tlog.proto\022\016frmpub.protocc\"F\n\021writelog_"
  "to_log_c\022\017\n\007dirname\030\001 \001(\t\022\017\n\007logname\030\002 \001"
  "(\t\022\017\n\007logdata\030\003 \001(\014\"#\n\021writelog_to_log_s"
  "\022\016\n\006result\030\001 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_log_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_2eproto = {
  false, false, 144, descriptor_table_protodef_log_2eproto, "log.proto", 
  &descriptor_table_log_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_log_2eproto::offsets,
  file_level_metadata_log_2eproto, file_level_enum_descriptors_log_2eproto, file_level_service_descriptors_log_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_log_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_log_2eproto);
  return descriptor_table_log_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_log_2eproto(&descriptor_table_log_2eproto);
namespace frmpub {
namespace protocc {

// ===================================================================

class writelog_to_log_c::_Internal {
 public:
};

writelog_to_log_c::writelog_to_log_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.writelog_to_log_c)
}
writelog_to_log_c::writelog_to_log_c(const writelog_to_log_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dirname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dirname().empty()) {
    dirname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dirname(), 
      GetArena());
  }
  logname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logname().empty()) {
    logname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logname(), 
      GetArena());
  }
  logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logdata().empty()) {
    logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logdata(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.writelog_to_log_c)
}

void writelog_to_log_c::SharedCtor() {
dirname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

writelog_to_log_c::~writelog_to_log_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.writelog_to_log_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void writelog_to_log_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dirname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void writelog_to_log_c::ArenaDtor(void* object) {
  writelog_to_log_c* _this = reinterpret_cast< writelog_to_log_c* >(object);
  (void)_this;
}
void writelog_to_log_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void writelog_to_log_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void writelog_to_log_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.writelog_to_log_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirname_.ClearToEmpty();
  logname_.ClearToEmpty();
  logdata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* writelog_to_log_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dirname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dirname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.writelog_to_log_c.dirname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_logname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.writelog_to_log_c.logname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes logdata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_logdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* writelog_to_log_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.writelog_to_log_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirname = 1;
  if (this->dirname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dirname().data(), static_cast<int>(this->_internal_dirname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.writelog_to_log_c.dirname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dirname(), target);
  }

  // string logname = 2;
  if (this->logname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logname().data(), static_cast<int>(this->_internal_logname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.writelog_to_log_c.logname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logname(), target);
  }

  // bytes logdata = 3;
  if (this->logdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_logdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.writelog_to_log_c)
  return target;
}

size_t writelog_to_log_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.writelog_to_log_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dirname = 1;
  if (this->dirname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dirname());
  }

  // string logname = 2;
  if (this->logname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logname());
  }

  // bytes logdata = 3;
  if (this->logdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_logdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void writelog_to_log_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.writelog_to_log_c)
  GOOGLE_DCHECK_NE(&from, this);
  const writelog_to_log_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<writelog_to_log_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.writelog_to_log_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.writelog_to_log_c)
    MergeFrom(*source);
  }
}

void writelog_to_log_c::MergeFrom(const writelog_to_log_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.writelog_to_log_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dirname().size() > 0) {
    _internal_set_dirname(from._internal_dirname());
  }
  if (from.logname().size() > 0) {
    _internal_set_logname(from._internal_logname());
  }
  if (from.logdata().size() > 0) {
    _internal_set_logdata(from._internal_logdata());
  }
}

void writelog_to_log_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.writelog_to_log_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void writelog_to_log_c::CopyFrom(const writelog_to_log_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.writelog_to_log_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool writelog_to_log_c::IsInitialized() const {
  return true;
}

void writelog_to_log_c::InternalSwap(writelog_to_log_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dirname_.Swap(&other->dirname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logname_.Swap(&other->logname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logdata_.Swap(&other->logdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata writelog_to_log_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class writelog_to_log_s::_Internal {
 public:
};

writelog_to_log_s::writelog_to_log_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.writelog_to_log_s)
}
writelog_to_log_s::writelog_to_log_s(const writelog_to_log_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.writelog_to_log_s)
}

void writelog_to_log_s::SharedCtor() {
result_ = 0;
}

writelog_to_log_s::~writelog_to_log_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.writelog_to_log_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void writelog_to_log_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void writelog_to_log_s::ArenaDtor(void* object) {
  writelog_to_log_s* _this = reinterpret_cast< writelog_to_log_s* >(object);
  (void)_this;
}
void writelog_to_log_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void writelog_to_log_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void writelog_to_log_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.writelog_to_log_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* writelog_to_log_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* writelog_to_log_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.writelog_to_log_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.writelog_to_log_s)
  return target;
}

size_t writelog_to_log_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.writelog_to_log_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void writelog_to_log_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.writelog_to_log_s)
  GOOGLE_DCHECK_NE(&from, this);
  const writelog_to_log_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<writelog_to_log_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.writelog_to_log_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.writelog_to_log_s)
    MergeFrom(*source);
  }
}

void writelog_to_log_s::MergeFrom(const writelog_to_log_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.writelog_to_log_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void writelog_to_log_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.writelog_to_log_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void writelog_to_log_s::CopyFrom(const writelog_to_log_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.writelog_to_log_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool writelog_to_log_s::IsInitialized() const {
  return true;
}

void writelog_to_log_s::InternalSwap(writelog_to_log_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata writelog_to_log_s::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frmpub::protocc::writelog_to_log_c* Arena::CreateMaybeMessage< ::frmpub::protocc::writelog_to_log_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::writelog_to_log_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::writelog_to_log_s* Arena::CreateMaybeMessage< ::frmpub::protocc::writelog_to_log_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::writelog_to_log_s >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
