// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_log_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_log_2eproto_metadata_getter(int index);
namespace frmpub {
namespace protocc {
class writelog_to_log_c;
struct writelog_to_log_cDefaultTypeInternal;
extern writelog_to_log_cDefaultTypeInternal _writelog_to_log_c_default_instance_;
class writelog_to_log_s;
struct writelog_to_log_sDefaultTypeInternal;
extern writelog_to_log_sDefaultTypeInternal _writelog_to_log_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> ::frmpub::protocc::writelog_to_log_c* Arena::CreateMaybeMessage<::frmpub::protocc::writelog_to_log_c>(Arena*);
template<> ::frmpub::protocc::writelog_to_log_s* Arena::CreateMaybeMessage<::frmpub::protocc::writelog_to_log_s>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frmpub {
namespace protocc {

// ===================================================================

class writelog_to_log_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.writelog_to_log_c) */ {
 public:
  inline writelog_to_log_c() : writelog_to_log_c(nullptr) {}
  virtual ~writelog_to_log_c();
  explicit constexpr writelog_to_log_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  writelog_to_log_c(const writelog_to_log_c& from);
  writelog_to_log_c(writelog_to_log_c&& from) noexcept
    : writelog_to_log_c() {
    *this = ::std::move(from);
  }

  inline writelog_to_log_c& operator=(const writelog_to_log_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline writelog_to_log_c& operator=(writelog_to_log_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const writelog_to_log_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const writelog_to_log_c* internal_default_instance() {
    return reinterpret_cast<const writelog_to_log_c*>(
               &_writelog_to_log_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(writelog_to_log_c& a, writelog_to_log_c& b) {
    a.Swap(&b);
  }
  inline void Swap(writelog_to_log_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(writelog_to_log_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline writelog_to_log_c* New() const final {
    return CreateMaybeMessage<writelog_to_log_c>(nullptr);
  }

  writelog_to_log_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<writelog_to_log_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const writelog_to_log_c& from);
  void MergeFrom(const writelog_to_log_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(writelog_to_log_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.writelog_to_log_c";
  }
  protected:
  explicit writelog_to_log_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_log_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirnameFieldNumber = 1,
    kLognameFieldNumber = 2,
    kLogdataFieldNumber = 3,
  };
  // string dirname = 1;
  void clear_dirname();
  const std::string& dirname() const;
  void set_dirname(const std::string& value);
  void set_dirname(std::string&& value);
  void set_dirname(const char* value);
  void set_dirname(const char* value, size_t size);
  std::string* mutable_dirname();
  std::string* release_dirname();
  void set_allocated_dirname(std::string* dirname);
  private:
  const std::string& _internal_dirname() const;
  void _internal_set_dirname(const std::string& value);
  std::string* _internal_mutable_dirname();
  public:

  // string logname = 2;
  void clear_logname();
  const std::string& logname() const;
  void set_logname(const std::string& value);
  void set_logname(std::string&& value);
  void set_logname(const char* value);
  void set_logname(const char* value, size_t size);
  std::string* mutable_logname();
  std::string* release_logname();
  void set_allocated_logname(std::string* logname);
  private:
  const std::string& _internal_logname() const;
  void _internal_set_logname(const std::string& value);
  std::string* _internal_mutable_logname();
  public:

  // bytes logdata = 3;
  void clear_logdata();
  const std::string& logdata() const;
  void set_logdata(const std::string& value);
  void set_logdata(std::string&& value);
  void set_logdata(const char* value);
  void set_logdata(const void* value, size_t size);
  std::string* mutable_logdata();
  std::string* release_logdata();
  void set_allocated_logdata(std::string* logdata);
  private:
  const std::string& _internal_logdata() const;
  void _internal_set_logdata(const std::string& value);
  std::string* _internal_mutable_logdata();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.writelog_to_log_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dirname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_2eproto;
};
// -------------------------------------------------------------------

class writelog_to_log_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.writelog_to_log_s) */ {
 public:
  inline writelog_to_log_s() : writelog_to_log_s(nullptr) {}
  virtual ~writelog_to_log_s();
  explicit constexpr writelog_to_log_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  writelog_to_log_s(const writelog_to_log_s& from);
  writelog_to_log_s(writelog_to_log_s&& from) noexcept
    : writelog_to_log_s() {
    *this = ::std::move(from);
  }

  inline writelog_to_log_s& operator=(const writelog_to_log_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline writelog_to_log_s& operator=(writelog_to_log_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const writelog_to_log_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const writelog_to_log_s* internal_default_instance() {
    return reinterpret_cast<const writelog_to_log_s*>(
               &_writelog_to_log_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(writelog_to_log_s& a, writelog_to_log_s& b) {
    a.Swap(&b);
  }
  inline void Swap(writelog_to_log_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(writelog_to_log_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline writelog_to_log_s* New() const final {
    return CreateMaybeMessage<writelog_to_log_s>(nullptr);
  }

  writelog_to_log_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<writelog_to_log_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const writelog_to_log_s& from);
  void MergeFrom(const writelog_to_log_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(writelog_to_log_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.writelog_to_log_s";
  }
  protected:
  explicit writelog_to_log_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_log_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.writelog_to_log_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// writelog_to_log_c

// string dirname = 1;
inline void writelog_to_log_c::clear_dirname() {
  dirname_.ClearToEmpty();
}
inline const std::string& writelog_to_log_c::dirname() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.writelog_to_log_c.dirname)
  return _internal_dirname();
}
inline void writelog_to_log_c::set_dirname(const std::string& value) {
  _internal_set_dirname(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.writelog_to_log_c.dirname)
}
inline std::string* writelog_to_log_c::mutable_dirname() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.writelog_to_log_c.dirname)
  return _internal_mutable_dirname();
}
inline const std::string& writelog_to_log_c::_internal_dirname() const {
  return dirname_.Get();
}
inline void writelog_to_log_c::_internal_set_dirname(const std::string& value) {
  
  dirname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void writelog_to_log_c::set_dirname(std::string&& value) {
  
  dirname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.writelog_to_log_c.dirname)
}
inline void writelog_to_log_c::set_dirname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dirname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.writelog_to_log_c.dirname)
}
inline void writelog_to_log_c::set_dirname(const char* value,
    size_t size) {
  
  dirname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.writelog_to_log_c.dirname)
}
inline std::string* writelog_to_log_c::_internal_mutable_dirname() {
  
  return dirname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* writelog_to_log_c::release_dirname() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.writelog_to_log_c.dirname)
  return dirname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void writelog_to_log_c::set_allocated_dirname(std::string* dirname) {
  if (dirname != nullptr) {
    
  } else {
    
  }
  dirname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dirname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.writelog_to_log_c.dirname)
}

// string logname = 2;
inline void writelog_to_log_c::clear_logname() {
  logname_.ClearToEmpty();
}
inline const std::string& writelog_to_log_c::logname() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.writelog_to_log_c.logname)
  return _internal_logname();
}
inline void writelog_to_log_c::set_logname(const std::string& value) {
  _internal_set_logname(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.writelog_to_log_c.logname)
}
inline std::string* writelog_to_log_c::mutable_logname() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.writelog_to_log_c.logname)
  return _internal_mutable_logname();
}
inline const std::string& writelog_to_log_c::_internal_logname() const {
  return logname_.Get();
}
inline void writelog_to_log_c::_internal_set_logname(const std::string& value) {
  
  logname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void writelog_to_log_c::set_logname(std::string&& value) {
  
  logname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.writelog_to_log_c.logname)
}
inline void writelog_to_log_c::set_logname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.writelog_to_log_c.logname)
}
inline void writelog_to_log_c::set_logname(const char* value,
    size_t size) {
  
  logname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.writelog_to_log_c.logname)
}
inline std::string* writelog_to_log_c::_internal_mutable_logname() {
  
  return logname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* writelog_to_log_c::release_logname() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.writelog_to_log_c.logname)
  return logname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void writelog_to_log_c::set_allocated_logname(std::string* logname) {
  if (logname != nullptr) {
    
  } else {
    
  }
  logname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.writelog_to_log_c.logname)
}

// bytes logdata = 3;
inline void writelog_to_log_c::clear_logdata() {
  logdata_.ClearToEmpty();
}
inline const std::string& writelog_to_log_c::logdata() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.writelog_to_log_c.logdata)
  return _internal_logdata();
}
inline void writelog_to_log_c::set_logdata(const std::string& value) {
  _internal_set_logdata(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.writelog_to_log_c.logdata)
}
inline std::string* writelog_to_log_c::mutable_logdata() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.writelog_to_log_c.logdata)
  return _internal_mutable_logdata();
}
inline const std::string& writelog_to_log_c::_internal_logdata() const {
  return logdata_.Get();
}
inline void writelog_to_log_c::_internal_set_logdata(const std::string& value) {
  
  logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void writelog_to_log_c::set_logdata(std::string&& value) {
  
  logdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.writelog_to_log_c.logdata)
}
inline void writelog_to_log_c::set_logdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.writelog_to_log_c.logdata)
}
inline void writelog_to_log_c::set_logdata(const void* value,
    size_t size) {
  
  logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.writelog_to_log_c.logdata)
}
inline std::string* writelog_to_log_c::_internal_mutable_logdata() {
  
  return logdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* writelog_to_log_c::release_logdata() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.writelog_to_log_c.logdata)
  return logdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void writelog_to_log_c::set_allocated_logdata(std::string* logdata) {
  if (logdata != nullptr) {
    
  } else {
    
  }
  logdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.writelog_to_log_c.logdata)
}

// -------------------------------------------------------------------

// writelog_to_log_s

// int32 result = 1;
inline void writelog_to_log_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 writelog_to_log_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 writelog_to_log_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.writelog_to_log_s.result)
  return _internal_result();
}
inline void writelog_to_log_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void writelog_to_log_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.writelog_to_log_s.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocc
}  // namespace frmpub

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_2eproto
