// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_world_2eproto_metadata_getter(int index);
namespace frmpub {
namespace protocc {
class noticeserver_world_game_g;
struct noticeserver_world_game_gDefaultTypeInternal;
extern noticeserver_world_game_gDefaultTypeInternal _noticeserver_world_game_g_default_instance_;
class register_world_dbvisit_c;
struct register_world_dbvisit_cDefaultTypeInternal;
extern register_world_dbvisit_cDefaultTypeInternal _register_world_dbvisit_c_default_instance_;
class register_world_dbvisit_s;
struct register_world_dbvisit_sDefaultTypeInternal;
extern register_world_dbvisit_sDefaultTypeInternal _register_world_dbvisit_s_default_instance_;
class seronline_world_gate_g;
struct seronline_world_gate_gDefaultTypeInternal;
extern seronline_world_gate_gDefaultTypeInternal _seronline_world_gate_g_default_instance_;
class sysemail_world_game_g;
struct sysemail_world_game_gDefaultTypeInternal;
extern sysemail_world_game_gDefaultTypeInternal _sysemail_world_game_g_default_instance_;
class sysemail_world_game_g_Annex;
struct sysemail_world_game_g_AnnexDefaultTypeInternal;
extern sysemail_world_game_g_AnnexDefaultTypeInternal _sysemail_world_game_g_Annex_default_instance_;
class sysemail_world_game_g_Annex_Goods;
struct sysemail_world_game_g_Annex_GoodsDefaultTypeInternal;
extern sysemail_world_game_g_Annex_GoodsDefaultTypeInternal _sysemail_world_game_g_Annex_Goods_default_instance_;
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> ::frmpub::protocc::noticeserver_world_game_g* Arena::CreateMaybeMessage<::frmpub::protocc::noticeserver_world_game_g>(Arena*);
template<> ::frmpub::protocc::register_world_dbvisit_c* Arena::CreateMaybeMessage<::frmpub::protocc::register_world_dbvisit_c>(Arena*);
template<> ::frmpub::protocc::register_world_dbvisit_s* Arena::CreateMaybeMessage<::frmpub::protocc::register_world_dbvisit_s>(Arena*);
template<> ::frmpub::protocc::seronline_world_gate_g* Arena::CreateMaybeMessage<::frmpub::protocc::seronline_world_gate_g>(Arena*);
template<> ::frmpub::protocc::sysemail_world_game_g* Arena::CreateMaybeMessage<::frmpub::protocc::sysemail_world_game_g>(Arena*);
template<> ::frmpub::protocc::sysemail_world_game_g_Annex* Arena::CreateMaybeMessage<::frmpub::protocc::sysemail_world_game_g_Annex>(Arena*);
template<> ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* Arena::CreateMaybeMessage<::frmpub::protocc::sysemail_world_game_g_Annex_Goods>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frmpub {
namespace protocc {

// ===================================================================

class register_world_dbvisit_c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.register_world_dbvisit_c) */ {
 public:
  inline register_world_dbvisit_c() : register_world_dbvisit_c(nullptr) {}
  virtual ~register_world_dbvisit_c();
  explicit constexpr register_world_dbvisit_c(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_world_dbvisit_c(const register_world_dbvisit_c& from);
  register_world_dbvisit_c(register_world_dbvisit_c&& from) noexcept
    : register_world_dbvisit_c() {
    *this = ::std::move(from);
  }

  inline register_world_dbvisit_c& operator=(const register_world_dbvisit_c& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_world_dbvisit_c& operator=(register_world_dbvisit_c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_world_dbvisit_c& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_world_dbvisit_c* internal_default_instance() {
    return reinterpret_cast<const register_world_dbvisit_c*>(
               &_register_world_dbvisit_c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(register_world_dbvisit_c& a, register_world_dbvisit_c& b) {
    a.Swap(&b);
  }
  inline void Swap(register_world_dbvisit_c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_world_dbvisit_c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_world_dbvisit_c* New() const final {
    return CreateMaybeMessage<register_world_dbvisit_c>(nullptr);
  }

  register_world_dbvisit_c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_world_dbvisit_c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_world_dbvisit_c& from);
  void MergeFrom(const register_world_dbvisit_c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_world_dbvisit_c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.register_world_dbvisit_c";
  }
  protected:
  explicit register_world_dbvisit_c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSifFieldNumber = 1,
  };
  // .frmpub.protocc.ServerInfo sif = 1;
  bool has_sif() const;
  private:
  bool _internal_has_sif() const;
  public:
  void clear_sif();
  const ::frmpub::protocc::ServerInfo& sif() const;
  ::frmpub::protocc::ServerInfo* release_sif();
  ::frmpub::protocc::ServerInfo* mutable_sif();
  void set_allocated_sif(::frmpub::protocc::ServerInfo* sif);
  private:
  const ::frmpub::protocc::ServerInfo& _internal_sif() const;
  ::frmpub::protocc::ServerInfo* _internal_mutable_sif();
  public:
  void unsafe_arena_set_allocated_sif(
      ::frmpub::protocc::ServerInfo* sif);
  ::frmpub::protocc::ServerInfo* unsafe_arena_release_sif();

  // @@protoc_insertion_point(class_scope:frmpub.protocc.register_world_dbvisit_c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::frmpub::protocc::ServerInfo* sif_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class register_world_dbvisit_s PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.register_world_dbvisit_s) */ {
 public:
  inline register_world_dbvisit_s() : register_world_dbvisit_s(nullptr) {}
  virtual ~register_world_dbvisit_s();
  explicit constexpr register_world_dbvisit_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_world_dbvisit_s(const register_world_dbvisit_s& from);
  register_world_dbvisit_s(register_world_dbvisit_s&& from) noexcept
    : register_world_dbvisit_s() {
    *this = ::std::move(from);
  }

  inline register_world_dbvisit_s& operator=(const register_world_dbvisit_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_world_dbvisit_s& operator=(register_world_dbvisit_s&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_world_dbvisit_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_world_dbvisit_s* internal_default_instance() {
    return reinterpret_cast<const register_world_dbvisit_s*>(
               &_register_world_dbvisit_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(register_world_dbvisit_s& a, register_world_dbvisit_s& b) {
    a.Swap(&b);
  }
  inline void Swap(register_world_dbvisit_s* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_world_dbvisit_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_world_dbvisit_s* New() const final {
    return CreateMaybeMessage<register_world_dbvisit_s>(nullptr);
  }

  register_world_dbvisit_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_world_dbvisit_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_world_dbvisit_s& from);
  void MergeFrom(const register_world_dbvisit_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_world_dbvisit_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.register_world_dbvisit_s";
  }
  protected:
  explicit register_world_dbvisit_s(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.register_world_dbvisit_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class seronline_world_gate_g PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.seronline_world_gate_g) */ {
 public:
  inline seronline_world_gate_g() : seronline_world_gate_g(nullptr) {}
  virtual ~seronline_world_gate_g();
  explicit constexpr seronline_world_gate_g(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  seronline_world_gate_g(const seronline_world_gate_g& from);
  seronline_world_gate_g(seronline_world_gate_g&& from) noexcept
    : seronline_world_gate_g() {
    *this = ::std::move(from);
  }

  inline seronline_world_gate_g& operator=(const seronline_world_gate_g& from) {
    CopyFrom(from);
    return *this;
  }
  inline seronline_world_gate_g& operator=(seronline_world_gate_g&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const seronline_world_gate_g& default_instance() {
    return *internal_default_instance();
  }
  static inline const seronline_world_gate_g* internal_default_instance() {
    return reinterpret_cast<const seronline_world_gate_g*>(
               &_seronline_world_gate_g_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(seronline_world_gate_g& a, seronline_world_gate_g& b) {
    a.Swap(&b);
  }
  inline void Swap(seronline_world_gate_g* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(seronline_world_gate_g* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline seronline_world_gate_g* New() const final {
    return CreateMaybeMessage<seronline_world_gate_g>(nullptr);
  }

  seronline_world_gate_g* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<seronline_world_gate_g>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const seronline_world_gate_g& from);
  void MergeFrom(const seronline_world_gate_g& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(seronline_world_gate_g* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.seronline_world_gate_g";
  }
  protected:
  explicit seronline_world_gate_g(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSifFieldNumber = 1,
  };
  // .frmpub.protocc.ServerInfo sif = 1;
  bool has_sif() const;
  private:
  bool _internal_has_sif() const;
  public:
  void clear_sif();
  const ::frmpub::protocc::ServerInfo& sif() const;
  ::frmpub::protocc::ServerInfo* release_sif();
  ::frmpub::protocc::ServerInfo* mutable_sif();
  void set_allocated_sif(::frmpub::protocc::ServerInfo* sif);
  private:
  const ::frmpub::protocc::ServerInfo& _internal_sif() const;
  ::frmpub::protocc::ServerInfo* _internal_mutable_sif();
  public:
  void unsafe_arena_set_allocated_sif(
      ::frmpub::protocc::ServerInfo* sif);
  ::frmpub::protocc::ServerInfo* unsafe_arena_release_sif();

  // @@protoc_insertion_point(class_scope:frmpub.protocc.seronline_world_gate_g)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::frmpub::protocc::ServerInfo* sif_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class noticeserver_world_game_g PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.noticeserver_world_game_g) */ {
 public:
  inline noticeserver_world_game_g() : noticeserver_world_game_g(nullptr) {}
  virtual ~noticeserver_world_game_g();
  explicit constexpr noticeserver_world_game_g(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  noticeserver_world_game_g(const noticeserver_world_game_g& from);
  noticeserver_world_game_g(noticeserver_world_game_g&& from) noexcept
    : noticeserver_world_game_g() {
    *this = ::std::move(from);
  }

  inline noticeserver_world_game_g& operator=(const noticeserver_world_game_g& from) {
    CopyFrom(from);
    return *this;
  }
  inline noticeserver_world_game_g& operator=(noticeserver_world_game_g&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const noticeserver_world_game_g& default_instance() {
    return *internal_default_instance();
  }
  static inline const noticeserver_world_game_g* internal_default_instance() {
    return reinterpret_cast<const noticeserver_world_game_g*>(
               &_noticeserver_world_game_g_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(noticeserver_world_game_g& a, noticeserver_world_game_g& b) {
    a.Swap(&b);
  }
  inline void Swap(noticeserver_world_game_g* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(noticeserver_world_game_g* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline noticeserver_world_game_g* New() const final {
    return CreateMaybeMessage<noticeserver_world_game_g>(nullptr);
  }

  noticeserver_world_game_g* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<noticeserver_world_game_g>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const noticeserver_world_game_g& from);
  void MergeFrom(const noticeserver_world_game_g& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(noticeserver_world_game_g* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.noticeserver_world_game_g";
  }
  protected:
  explicit noticeserver_world_game_g(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // string info = 1;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.noticeserver_world_game_g)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class sysemail_world_game_g_Annex_Goods PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sysemail_world_game_g.Annex.Goods) */ {
 public:
  inline sysemail_world_game_g_Annex_Goods() : sysemail_world_game_g_Annex_Goods(nullptr) {}
  virtual ~sysemail_world_game_g_Annex_Goods();
  explicit constexpr sysemail_world_game_g_Annex_Goods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sysemail_world_game_g_Annex_Goods(const sysemail_world_game_g_Annex_Goods& from);
  sysemail_world_game_g_Annex_Goods(sysemail_world_game_g_Annex_Goods&& from) noexcept
    : sysemail_world_game_g_Annex_Goods() {
    *this = ::std::move(from);
  }

  inline sysemail_world_game_g_Annex_Goods& operator=(const sysemail_world_game_g_Annex_Goods& from) {
    CopyFrom(from);
    return *this;
  }
  inline sysemail_world_game_g_Annex_Goods& operator=(sysemail_world_game_g_Annex_Goods&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sysemail_world_game_g_Annex_Goods& default_instance() {
    return *internal_default_instance();
  }
  static inline const sysemail_world_game_g_Annex_Goods* internal_default_instance() {
    return reinterpret_cast<const sysemail_world_game_g_Annex_Goods*>(
               &_sysemail_world_game_g_Annex_Goods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(sysemail_world_game_g_Annex_Goods& a, sysemail_world_game_g_Annex_Goods& b) {
    a.Swap(&b);
  }
  inline void Swap(sysemail_world_game_g_Annex_Goods* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sysemail_world_game_g_Annex_Goods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sysemail_world_game_g_Annex_Goods* New() const final {
    return CreateMaybeMessage<sysemail_world_game_g_Annex_Goods>(nullptr);
  }

  sysemail_world_game_g_Annex_Goods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sysemail_world_game_g_Annex_Goods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sysemail_world_game_g_Annex_Goods& from);
  void MergeFrom(const sysemail_world_game_g_Annex_Goods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sysemail_world_game_g_Annex_Goods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sysemail_world_game_g.Annex.Goods";
  }
  protected:
  explicit sysemail_world_game_g_Annex_Goods(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgidFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 cfgid = 1;
  void clear_cfgid();
  ::PROTOBUF_NAMESPACE_ID::int32 cfgid() const;
  void set_cfgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cfgid() const;
  void _internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sysemail_world_game_g.Annex.Goods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cfgid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class sysemail_world_game_g_Annex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sysemail_world_game_g.Annex) */ {
 public:
  inline sysemail_world_game_g_Annex() : sysemail_world_game_g_Annex(nullptr) {}
  virtual ~sysemail_world_game_g_Annex();
  explicit constexpr sysemail_world_game_g_Annex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sysemail_world_game_g_Annex(const sysemail_world_game_g_Annex& from);
  sysemail_world_game_g_Annex(sysemail_world_game_g_Annex&& from) noexcept
    : sysemail_world_game_g_Annex() {
    *this = ::std::move(from);
  }

  inline sysemail_world_game_g_Annex& operator=(const sysemail_world_game_g_Annex& from) {
    CopyFrom(from);
    return *this;
  }
  inline sysemail_world_game_g_Annex& operator=(sysemail_world_game_g_Annex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sysemail_world_game_g_Annex& default_instance() {
    return *internal_default_instance();
  }
  static inline const sysemail_world_game_g_Annex* internal_default_instance() {
    return reinterpret_cast<const sysemail_world_game_g_Annex*>(
               &_sysemail_world_game_g_Annex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(sysemail_world_game_g_Annex& a, sysemail_world_game_g_Annex& b) {
    a.Swap(&b);
  }
  inline void Swap(sysemail_world_game_g_Annex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sysemail_world_game_g_Annex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sysemail_world_game_g_Annex* New() const final {
    return CreateMaybeMessage<sysemail_world_game_g_Annex>(nullptr);
  }

  sysemail_world_game_g_Annex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sysemail_world_game_g_Annex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sysemail_world_game_g_Annex& from);
  void MergeFrom(const sysemail_world_game_g_Annex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sysemail_world_game_g_Annex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sysemail_world_game_g.Annex";
  }
  protected:
  explicit sysemail_world_game_g_Annex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef sysemail_world_game_g_Annex_Goods Goods;

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 3,
    kGoldFieldNumber = 1,
    kDiamondFieldNumber = 2,
  };
  // repeated .frmpub.protocc.sysemail_world_game_g.Annex.Goods goods = 3;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::sysemail_world_game_g_Annex_Goods >*
      mutable_goods();
  private:
  const ::frmpub::protocc::sysemail_world_game_g_Annex_Goods& _internal_goods(int index) const;
  ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* _internal_add_goods();
  public:
  const ::frmpub::protocc::sysemail_world_game_g_Annex_Goods& goods(int index) const;
  ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::sysemail_world_game_g_Annex_Goods >&
      goods() const;

  // int32 gold = 1;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 diamond = 2;
  void clear_diamond();
  ::PROTOBUF_NAMESPACE_ID::int32 diamond() const;
  void set_diamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diamond() const;
  void _internal_set_diamond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sysemail_world_game_g.Annex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::sysemail_world_game_g_Annex_Goods > goods_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 diamond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class sysemail_world_game_g PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frmpub.protocc.sysemail_world_game_g) */ {
 public:
  inline sysemail_world_game_g() : sysemail_world_game_g(nullptr) {}
  virtual ~sysemail_world_game_g();
  explicit constexpr sysemail_world_game_g(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sysemail_world_game_g(const sysemail_world_game_g& from);
  sysemail_world_game_g(sysemail_world_game_g&& from) noexcept
    : sysemail_world_game_g() {
    *this = ::std::move(from);
  }

  inline sysemail_world_game_g& operator=(const sysemail_world_game_g& from) {
    CopyFrom(from);
    return *this;
  }
  inline sysemail_world_game_g& operator=(sysemail_world_game_g&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sysemail_world_game_g& default_instance() {
    return *internal_default_instance();
  }
  static inline const sysemail_world_game_g* internal_default_instance() {
    return reinterpret_cast<const sysemail_world_game_g*>(
               &_sysemail_world_game_g_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(sysemail_world_game_g& a, sysemail_world_game_g& b) {
    a.Swap(&b);
  }
  inline void Swap(sysemail_world_game_g* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sysemail_world_game_g* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sysemail_world_game_g* New() const final {
    return CreateMaybeMessage<sysemail_world_game_g>(nullptr);
  }

  sysemail_world_game_g* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sysemail_world_game_g>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sysemail_world_game_g& from);
  void MergeFrom(const sysemail_world_game_g& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sysemail_world_game_g* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frmpub.protocc.sysemail_world_game_g";
  }
  protected:
  explicit sysemail_world_game_g(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_world_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef sysemail_world_game_g_Annex Annex;

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kInfoFieldNumber = 3,
    kAnnexFieldNumber = 7,
    kIdFieldNumber = 1,
    kRidFieldNumber = 5,
    kTypeFieldNumber = 4,
    kTimeFieldNumber = 6,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string info = 3;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .frmpub.protocc.sysemail_world_game_g.Annex annex = 7;
  bool has_annex() const;
  private:
  bool _internal_has_annex() const;
  public:
  void clear_annex();
  const ::frmpub::protocc::sysemail_world_game_g_Annex& annex() const;
  ::frmpub::protocc::sysemail_world_game_g_Annex* release_annex();
  ::frmpub::protocc::sysemail_world_game_g_Annex* mutable_annex();
  void set_allocated_annex(::frmpub::protocc::sysemail_world_game_g_Annex* annex);
  private:
  const ::frmpub::protocc::sysemail_world_game_g_Annex& _internal_annex() const;
  ::frmpub::protocc::sysemail_world_game_g_Annex* _internal_mutable_annex();
  public:
  void unsafe_arena_set_allocated_annex(
      ::frmpub::protocc::sysemail_world_game_g_Annex* annex);
  ::frmpub::protocc::sysemail_world_game_g_Annex* unsafe_arena_release_annex();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rid = 5;
  void clear_rid();
  ::PROTOBUF_NAMESPACE_ID::int64 rid() const;
  void set_rid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rid() const;
  void _internal_set_rid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frmpub.protocc.sysemail_world_game_g)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::frmpub::protocc::sysemail_world_game_g_Annex* annex_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 rid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// register_world_dbvisit_c

// .frmpub.protocc.ServerInfo sif = 1;
inline bool register_world_dbvisit_c::_internal_has_sif() const {
  return this != internal_default_instance() && sif_ != nullptr;
}
inline bool register_world_dbvisit_c::has_sif() const {
  return _internal_has_sif();
}
inline const ::frmpub::protocc::ServerInfo& register_world_dbvisit_c::_internal_sif() const {
  const ::frmpub::protocc::ServerInfo* p = sif_;
  return p != nullptr ? *p : reinterpret_cast<const ::frmpub::protocc::ServerInfo&>(
      ::frmpub::protocc::_ServerInfo_default_instance_);
}
inline const ::frmpub::protocc::ServerInfo& register_world_dbvisit_c::sif() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_world_dbvisit_c.sif)
  return _internal_sif();
}
inline void register_world_dbvisit_c::unsafe_arena_set_allocated_sif(
    ::frmpub::protocc::ServerInfo* sif) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sif_);
  }
  sif_ = sif;
  if (sif) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frmpub.protocc.register_world_dbvisit_c.sif)
}
inline ::frmpub::protocc::ServerInfo* register_world_dbvisit_c::release_sif() {
  
  ::frmpub::protocc::ServerInfo* temp = sif_;
  sif_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::frmpub::protocc::ServerInfo* register_world_dbvisit_c::unsafe_arena_release_sif() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.register_world_dbvisit_c.sif)
  
  ::frmpub::protocc::ServerInfo* temp = sif_;
  sif_ = nullptr;
  return temp;
}
inline ::frmpub::protocc::ServerInfo* register_world_dbvisit_c::_internal_mutable_sif() {
  
  if (sif_ == nullptr) {
    auto* p = CreateMaybeMessage<::frmpub::protocc::ServerInfo>(GetArena());
    sif_ = p;
  }
  return sif_;
}
inline ::frmpub::protocc::ServerInfo* register_world_dbvisit_c::mutable_sif() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.register_world_dbvisit_c.sif)
  return _internal_mutable_sif();
}
inline void register_world_dbvisit_c::set_allocated_sif(::frmpub::protocc::ServerInfo* sif) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sif_);
  }
  if (sif) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sif)->GetArena();
    if (message_arena != submessage_arena) {
      sif = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sif, submessage_arena);
    }
    
  } else {
    
  }
  sif_ = sif;
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.register_world_dbvisit_c.sif)
}

// -------------------------------------------------------------------

// register_world_dbvisit_s

// int32 result = 1;
inline void register_world_dbvisit_s::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_world_dbvisit_s::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 register_world_dbvisit_s::result() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.register_world_dbvisit_s.result)
  return _internal_result();
}
inline void register_world_dbvisit_s::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void register_world_dbvisit_s::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.register_world_dbvisit_s.result)
}

// -------------------------------------------------------------------

// seronline_world_gate_g

// .frmpub.protocc.ServerInfo sif = 1;
inline bool seronline_world_gate_g::_internal_has_sif() const {
  return this != internal_default_instance() && sif_ != nullptr;
}
inline bool seronline_world_gate_g::has_sif() const {
  return _internal_has_sif();
}
inline const ::frmpub::protocc::ServerInfo& seronline_world_gate_g::_internal_sif() const {
  const ::frmpub::protocc::ServerInfo* p = sif_;
  return p != nullptr ? *p : reinterpret_cast<const ::frmpub::protocc::ServerInfo&>(
      ::frmpub::protocc::_ServerInfo_default_instance_);
}
inline const ::frmpub::protocc::ServerInfo& seronline_world_gate_g::sif() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.seronline_world_gate_g.sif)
  return _internal_sif();
}
inline void seronline_world_gate_g::unsafe_arena_set_allocated_sif(
    ::frmpub::protocc::ServerInfo* sif) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sif_);
  }
  sif_ = sif;
  if (sif) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frmpub.protocc.seronline_world_gate_g.sif)
}
inline ::frmpub::protocc::ServerInfo* seronline_world_gate_g::release_sif() {
  
  ::frmpub::protocc::ServerInfo* temp = sif_;
  sif_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::frmpub::protocc::ServerInfo* seronline_world_gate_g::unsafe_arena_release_sif() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.seronline_world_gate_g.sif)
  
  ::frmpub::protocc::ServerInfo* temp = sif_;
  sif_ = nullptr;
  return temp;
}
inline ::frmpub::protocc::ServerInfo* seronline_world_gate_g::_internal_mutable_sif() {
  
  if (sif_ == nullptr) {
    auto* p = CreateMaybeMessage<::frmpub::protocc::ServerInfo>(GetArena());
    sif_ = p;
  }
  return sif_;
}
inline ::frmpub::protocc::ServerInfo* seronline_world_gate_g::mutable_sif() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.seronline_world_gate_g.sif)
  return _internal_mutable_sif();
}
inline void seronline_world_gate_g::set_allocated_sif(::frmpub::protocc::ServerInfo* sif) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sif_);
  }
  if (sif) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sif)->GetArena();
    if (message_arena != submessage_arena) {
      sif = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sif, submessage_arena);
    }
    
  } else {
    
  }
  sif_ = sif;
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.seronline_world_gate_g.sif)
}

// -------------------------------------------------------------------

// noticeserver_world_game_g

// string info = 1;
inline void noticeserver_world_game_g::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& noticeserver_world_game_g::info() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.noticeserver_world_game_g.info)
  return _internal_info();
}
inline void noticeserver_world_game_g::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.noticeserver_world_game_g.info)
}
inline std::string* noticeserver_world_game_g::mutable_info() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.noticeserver_world_game_g.info)
  return _internal_mutable_info();
}
inline const std::string& noticeserver_world_game_g::_internal_info() const {
  return info_.Get();
}
inline void noticeserver_world_game_g::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void noticeserver_world_game_g::set_info(std::string&& value) {
  
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.noticeserver_world_game_g.info)
}
inline void noticeserver_world_game_g::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.noticeserver_world_game_g.info)
}
inline void noticeserver_world_game_g::set_info(const char* value,
    size_t size) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.noticeserver_world_game_g.info)
}
inline std::string* noticeserver_world_game_g::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* noticeserver_world_game_g::release_info() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.noticeserver_world_game_g.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void noticeserver_world_game_g::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.noticeserver_world_game_g.info)
}

// -------------------------------------------------------------------

// sysemail_world_game_g_Annex_Goods

// int32 cfgid = 1;
inline void sysemail_world_game_g_Annex_Goods::clear_cfgid() {
  cfgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex_Goods::_internal_cfgid() const {
  return cfgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex_Goods::cfgid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.Annex.Goods.cfgid)
  return _internal_cfgid();
}
inline void sysemail_world_game_g_Annex_Goods::_internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cfgid_ = value;
}
inline void sysemail_world_game_g_Annex_Goods::set_cfgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cfgid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.Annex.Goods.cfgid)
}

// int32 num = 2;
inline void sysemail_world_game_g_Annex_Goods::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex_Goods::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex_Goods::num() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.Annex.Goods.num)
  return _internal_num();
}
inline void sysemail_world_game_g_Annex_Goods::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void sysemail_world_game_g_Annex_Goods::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.Annex.Goods.num)
}

// -------------------------------------------------------------------

// sysemail_world_game_g_Annex

// int32 gold = 1;
inline void sysemail_world_game_g_Annex::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex::gold() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.Annex.gold)
  return _internal_gold();
}
inline void sysemail_world_game_g_Annex::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
}
inline void sysemail_world_game_g_Annex::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.Annex.gold)
}

// int32 diamond = 2;
inline void sysemail_world_game_g_Annex::clear_diamond() {
  diamond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex::_internal_diamond() const {
  return diamond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g_Annex::diamond() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.Annex.diamond)
  return _internal_diamond();
}
inline void sysemail_world_game_g_Annex::_internal_set_diamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  diamond_ = value;
}
inline void sysemail_world_game_g_Annex::set_diamond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diamond(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.Annex.diamond)
}

// repeated .frmpub.protocc.sysemail_world_game_g.Annex.Goods goods = 3;
inline int sysemail_world_game_g_Annex::_internal_goods_size() const {
  return goods_.size();
}
inline int sysemail_world_game_g_Annex::goods_size() const {
  return _internal_goods_size();
}
inline void sysemail_world_game_g_Annex::clear_goods() {
  goods_.Clear();
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* sysemail_world_game_g_Annex::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sysemail_world_game_g.Annex.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::sysemail_world_game_g_Annex_Goods >*
sysemail_world_game_g_Annex::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:frmpub.protocc.sysemail_world_game_g.Annex.goods)
  return &goods_;
}
inline const ::frmpub::protocc::sysemail_world_game_g_Annex_Goods& sysemail_world_game_g_Annex::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::frmpub::protocc::sysemail_world_game_g_Annex_Goods& sysemail_world_game_g_Annex::goods(int index) const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.Annex.goods)
  return _internal_goods(index);
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* sysemail_world_game_g_Annex::_internal_add_goods() {
  return goods_.Add();
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex_Goods* sysemail_world_game_g_Annex::add_goods() {
  // @@protoc_insertion_point(field_add:frmpub.protocc.sysemail_world_game_g.Annex.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frmpub::protocc::sysemail_world_game_g_Annex_Goods >&
sysemail_world_game_g_Annex::goods() const {
  // @@protoc_insertion_point(field_list:frmpub.protocc.sysemail_world_game_g.Annex.goods)
  return goods_;
}

// -------------------------------------------------------------------

// sysemail_world_game_g

// int64 id = 1;
inline void sysemail_world_game_g::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sysemail_world_game_g::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sysemail_world_game_g::id() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.id)
  return _internal_id();
}
inline void sysemail_world_game_g::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void sysemail_world_game_g::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.id)
}

// string title = 2;
inline void sysemail_world_game_g::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& sysemail_world_game_g::title() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.title)
  return _internal_title();
}
inline void sysemail_world_game_g::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.title)
}
inline std::string* sysemail_world_game_g::mutable_title() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sysemail_world_game_g.title)
  return _internal_mutable_title();
}
inline const std::string& sysemail_world_game_g::_internal_title() const {
  return title_.Get();
}
inline void sysemail_world_game_g::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sysemail_world_game_g::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sysemail_world_game_g.title)
}
inline void sysemail_world_game_g::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sysemail_world_game_g.title)
}
inline void sysemail_world_game_g::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sysemail_world_game_g.title)
}
inline std::string* sysemail_world_game_g::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sysemail_world_game_g::release_title() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sysemail_world_game_g.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sysemail_world_game_g::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sysemail_world_game_g.title)
}

// string info = 3;
inline void sysemail_world_game_g::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& sysemail_world_game_g::info() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.info)
  return _internal_info();
}
inline void sysemail_world_game_g::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.info)
}
inline std::string* sysemail_world_game_g::mutable_info() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sysemail_world_game_g.info)
  return _internal_mutable_info();
}
inline const std::string& sysemail_world_game_g::_internal_info() const {
  return info_.Get();
}
inline void sysemail_world_game_g::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sysemail_world_game_g::set_info(std::string&& value) {
  
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:frmpub.protocc.sysemail_world_game_g.info)
}
inline void sysemail_world_game_g::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:frmpub.protocc.sysemail_world_game_g.info)
}
inline void sysemail_world_game_g::set_info(const char* value,
    size_t size) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:frmpub.protocc.sysemail_world_game_g.info)
}
inline std::string* sysemail_world_game_g::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sysemail_world_game_g::release_info() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sysemail_world_game_g.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sysemail_world_game_g::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sysemail_world_game_g.info)
}

// int32 type = 4;
inline void sysemail_world_game_g::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g::type() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.type)
  return _internal_type();
}
inline void sysemail_world_game_g::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void sysemail_world_game_g::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.type)
}

// int64 rid = 5;
inline void sysemail_world_game_g::clear_rid() {
  rid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sysemail_world_game_g::_internal_rid() const {
  return rid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sysemail_world_game_g::rid() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.rid)
  return _internal_rid();
}
inline void sysemail_world_game_g::_internal_set_rid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rid_ = value;
}
inline void sysemail_world_game_g::set_rid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.rid)
}

// int32 time = 6;
inline void sysemail_world_game_g::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sysemail_world_game_g::time() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.time)
  return _internal_time();
}
inline void sysemail_world_game_g::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void sysemail_world_game_g::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:frmpub.protocc.sysemail_world_game_g.time)
}

// .frmpub.protocc.sysemail_world_game_g.Annex annex = 7;
inline bool sysemail_world_game_g::_internal_has_annex() const {
  return this != internal_default_instance() && annex_ != nullptr;
}
inline bool sysemail_world_game_g::has_annex() const {
  return _internal_has_annex();
}
inline void sysemail_world_game_g::clear_annex() {
  if (GetArena() == nullptr && annex_ != nullptr) {
    delete annex_;
  }
  annex_ = nullptr;
}
inline const ::frmpub::protocc::sysemail_world_game_g_Annex& sysemail_world_game_g::_internal_annex() const {
  const ::frmpub::protocc::sysemail_world_game_g_Annex* p = annex_;
  return p != nullptr ? *p : reinterpret_cast<const ::frmpub::protocc::sysemail_world_game_g_Annex&>(
      ::frmpub::protocc::_sysemail_world_game_g_Annex_default_instance_);
}
inline const ::frmpub::protocc::sysemail_world_game_g_Annex& sysemail_world_game_g::annex() const {
  // @@protoc_insertion_point(field_get:frmpub.protocc.sysemail_world_game_g.annex)
  return _internal_annex();
}
inline void sysemail_world_game_g::unsafe_arena_set_allocated_annex(
    ::frmpub::protocc::sysemail_world_game_g_Annex* annex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annex_);
  }
  annex_ = annex;
  if (annex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frmpub.protocc.sysemail_world_game_g.annex)
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex* sysemail_world_game_g::release_annex() {
  
  ::frmpub::protocc::sysemail_world_game_g_Annex* temp = annex_;
  annex_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex* sysemail_world_game_g::unsafe_arena_release_annex() {
  // @@protoc_insertion_point(field_release:frmpub.protocc.sysemail_world_game_g.annex)
  
  ::frmpub::protocc::sysemail_world_game_g_Annex* temp = annex_;
  annex_ = nullptr;
  return temp;
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex* sysemail_world_game_g::_internal_mutable_annex() {
  
  if (annex_ == nullptr) {
    auto* p = CreateMaybeMessage<::frmpub::protocc::sysemail_world_game_g_Annex>(GetArena());
    annex_ = p;
  }
  return annex_;
}
inline ::frmpub::protocc::sysemail_world_game_g_Annex* sysemail_world_game_g::mutable_annex() {
  // @@protoc_insertion_point(field_mutable:frmpub.protocc.sysemail_world_game_g.annex)
  return _internal_mutable_annex();
}
inline void sysemail_world_game_g::set_allocated_annex(::frmpub::protocc::sysemail_world_game_g_Annex* annex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annex_;
  }
  if (annex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annex);
    if (message_arena != submessage_arena) {
      annex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annex, submessage_arena);
    }
    
  } else {
    
  }
  annex_ = annex;
  // @@protoc_insertion_point(field_set_allocated:frmpub.protocc.sysemail_world_game_g.annex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocc
}  // namespace frmpub

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_2eproto
