// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#include "backend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace frmpub {
namespace protocc {
constexpr login_bk_c::login_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0)){}
struct login_bk_cDefaultTypeInternal {
  constexpr login_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_bk_cDefaultTypeInternal() {}
  union {
    login_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_bk_cDefaultTypeInternal _login_bk_c_default_instance_;
constexpr login_bk_s::login_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct login_bk_sDefaultTypeInternal {
  constexpr login_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_bk_sDefaultTypeInternal() {}
  union {
    login_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_bk_sDefaultTypeInternal _login_bk_s_default_instance_;
constexpr crucial_bk_s::crucial_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_register_num_(0)
  , today_register_num_(0)
  , total_active_num_(0)
  , today_active_num_(0)
  , total_disenable_num_(0)
  , today_disenable_num_(0)
  , total_income_(0){}
struct crucial_bk_sDefaultTypeInternal {
  constexpr crucial_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~crucial_bk_sDefaultTypeInternal() {}
  union {
    crucial_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT crucial_bk_sDefaultTypeInternal _crucial_bk_s_default_instance_;
constexpr maillist_bk_s_item::maillist_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , time_(0){}
struct maillist_bk_s_itemDefaultTypeInternal {
  constexpr maillist_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~maillist_bk_s_itemDefaultTypeInternal() {}
  union {
    maillist_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT maillist_bk_s_itemDefaultTypeInternal _maillist_bk_s_item_default_instance_;
constexpr maillist_bk_s::maillist_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct maillist_bk_sDefaultTypeInternal {
  constexpr maillist_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~maillist_bk_sDefaultTypeInternal() {}
  union {
    maillist_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT maillist_bk_sDefaultTypeInternal _maillist_bk_s_default_instance_;
constexpr addmail_bk_c::addmail_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct addmail_bk_cDefaultTypeInternal {
  constexpr addmail_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addmail_bk_cDefaultTypeInternal() {}
  union {
    addmail_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addmail_bk_cDefaultTypeInternal _addmail_bk_c_default_instance_;
constexpr addmail_bk_s::addmail_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct addmail_bk_sDefaultTypeInternal {
  constexpr addmail_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addmail_bk_sDefaultTypeInternal() {}
  union {
    addmail_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addmail_bk_sDefaultTypeInternal _addmail_bk_s_default_instance_;
constexpr contract_type_list_bk_s_item::contract_type_list_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , cycle_(0)
  , interest_rate_(0)
  , reserve_dispatch_coin_(0)
  , rush_dispathch_coin_(0)
  , rush_begin_time_(0)
  , rush_end_time_(0)
  , state_(0)
  , min_price_(0)
  , max_price_(0){}
struct contract_type_list_bk_s_itemDefaultTypeInternal {
  constexpr contract_type_list_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_type_list_bk_s_itemDefaultTypeInternal() {}
  union {
    contract_type_list_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_type_list_bk_s_itemDefaultTypeInternal _contract_type_list_bk_s_item_default_instance_;
constexpr contract_type_list_bk_s::contract_type_list_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct contract_type_list_bk_sDefaultTypeInternal {
  constexpr contract_type_list_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_type_list_bk_sDefaultTypeInternal() {}
  union {
    contract_type_list_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_type_list_bk_sDefaultTypeInternal _contract_type_list_bk_s_default_instance_;
constexpr update_contract_type_bk_c::update_contract_type_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , cycle_(0)
  , interest_rate_(0)
  , reserve_dispatch_coin_(0)
  , rush_dispathch_coin_(0)
  , rush_begin_time_(0)
  , rush_end_time_(0)
  , state_(0)
  , min_price_(0)
  , max_price_(0){}
struct update_contract_type_bk_cDefaultTypeInternal {
  constexpr update_contract_type_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~update_contract_type_bk_cDefaultTypeInternal() {}
  union {
    update_contract_type_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT update_contract_type_bk_cDefaultTypeInternal _update_contract_type_bk_c_default_instance_;
constexpr update_contract_type_bk_s::update_contract_type_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct update_contract_type_bk_sDefaultTypeInternal {
  constexpr update_contract_type_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~update_contract_type_bk_sDefaultTypeInternal() {}
  union {
    update_contract_type_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT update_contract_type_bk_sDefaultTypeInternal _update_contract_type_bk_s_default_instance_;
constexpr add_contract_bk_c::add_contract_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , type_(0)
  , price_(0)
  , num_(0){}
struct add_contract_bk_cDefaultTypeInternal {
  constexpr add_contract_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~add_contract_bk_cDefaultTypeInternal() {}
  union {
    add_contract_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT add_contract_bk_cDefaultTypeInternal _add_contract_bk_c_default_instance_;
constexpr add_contract_bk_s::add_contract_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct add_contract_bk_sDefaultTypeInternal {
  constexpr add_contract_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~add_contract_bk_sDefaultTypeInternal() {}
  union {
    add_contract_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT add_contract_bk_sDefaultTypeInternal _add_contract_bk_s_default_instance_;
constexpr booking_count_bk_s_item::booking_count_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_type_(0)
  , num_(0){}
struct booking_count_bk_s_itemDefaultTypeInternal {
  constexpr booking_count_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_count_bk_s_itemDefaultTypeInternal() {}
  union {
    booking_count_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_count_bk_s_itemDefaultTypeInternal _booking_count_bk_s_item_default_instance_;
constexpr booking_count_bk_s::booking_count_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct booking_count_bk_sDefaultTypeInternal {
  constexpr booking_count_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_count_bk_sDefaultTypeInternal() {}
  union {
    booking_count_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_count_bk_sDefaultTypeInternal _booking_count_bk_s_default_instance_;
constexpr booking_bk_c::booking_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , type_(0)
  , curr_page_(0){}
struct booking_bk_cDefaultTypeInternal {
  constexpr booking_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_bk_cDefaultTypeInternal() {}
  union {
    booking_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_bk_cDefaultTypeInternal _booking_bk_c_default_instance_;
constexpr booking_bk_s_item::booking_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , contract_type_(0)
  , time_(0)
  , rob_(0)
  , robed_(0){}
struct booking_bk_s_itemDefaultTypeInternal {
  constexpr booking_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_bk_s_itemDefaultTypeInternal() {}
  union {
    booking_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_bk_s_itemDefaultTypeInternal _booking_bk_s_item_default_instance_;
constexpr booking_bk_s::booking_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0){}
struct booking_bk_sDefaultTypeInternal {
  constexpr booking_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~booking_bk_sDefaultTypeInternal() {}
  union {
    booking_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT booking_bk_sDefaultTypeInternal _booking_bk_s_default_instance_;
constexpr ripe_count_bk_s_item::ripe_count_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_type_(0)
  , num_(0){}
struct ripe_count_bk_s_itemDefaultTypeInternal {
  constexpr ripe_count_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ripe_count_bk_s_itemDefaultTypeInternal() {}
  union {
    ripe_count_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ripe_count_bk_s_itemDefaultTypeInternal _ripe_count_bk_s_item_default_instance_;
constexpr ripe_count_bk_s::ripe_count_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct ripe_count_bk_sDefaultTypeInternal {
  constexpr ripe_count_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ripe_count_bk_sDefaultTypeInternal() {}
  union {
    ripe_count_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ripe_count_bk_sDefaultTypeInternal _ripe_count_bk_s_default_instance_;
constexpr ripe_bk_c::ripe_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , type_(0)
  , curr_page_(0){}
struct ripe_bk_cDefaultTypeInternal {
  constexpr ripe_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ripe_bk_cDefaultTypeInternal() {}
  union {
    ripe_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ripe_bk_cDefaultTypeInternal _ripe_bk_c_default_instance_;
constexpr ripe_bk_s_item::ripe_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , contract_type_(0)
  , price_(0)
  , time_(0){}
struct ripe_bk_s_itemDefaultTypeInternal {
  constexpr ripe_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ripe_bk_s_itemDefaultTypeInternal() {}
  union {
    ripe_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ripe_bk_s_itemDefaultTypeInternal _ripe_bk_s_item_default_instance_;
constexpr ripe_bk_s::ripe_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0){}
struct ripe_bk_sDefaultTypeInternal {
  constexpr ripe_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ripe_bk_sDefaultTypeInternal() {}
  union {
    ripe_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ripe_bk_sDefaultTypeInternal _ripe_bk_s_default_instance_;
constexpr order_list_bk_c::order_list_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buy_phone_(PROTOBUF_LONGLONG(0))
  , sell_phone_(PROTOBUF_LONGLONG(0))
  , type_(0)
  , state_(0)
  , id_(PROTOBUF_LONGLONG(0))
  , curr_page_(0){}
struct order_list_bk_cDefaultTypeInternal {
  constexpr order_list_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_list_bk_cDefaultTypeInternal() {}
  union {
    order_list_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_list_bk_cDefaultTypeInternal _order_list_bk_c_default_instance_;
constexpr order_list_bk_s_item::order_list_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_type_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payicon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_LONGLONG(0))
  , buy_phone_(PROTOBUF_LONGLONG(0))
  , sell_phone_(PROTOBUF_LONGLONG(0))
  , price_(0)
  , rush_time_(0)
  , pay_time_(0)
  , sell_confirm_time_(0)
  , state_(0){}
struct order_list_bk_s_itemDefaultTypeInternal {
  constexpr order_list_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_list_bk_s_itemDefaultTypeInternal() {}
  union {
    order_list_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_list_bk_s_itemDefaultTypeInternal _order_list_bk_s_item_default_instance_;
constexpr order_list_bk_s::order_list_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0){}
struct order_list_bk_sDefaultTypeInternal {
  constexpr order_list_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_list_bk_sDefaultTypeInternal() {}
  union {
    order_list_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_list_bk_sDefaultTypeInternal _order_list_bk_s_default_instance_;
constexpr order_bk_c::order_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(PROTOBUF_LONGLONG(0))
  , oper_(0){}
struct order_bk_cDefaultTypeInternal {
  constexpr order_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_bk_cDefaultTypeInternal() {}
  union {
    order_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_bk_cDefaultTypeInternal _order_bk_c_default_instance_;
constexpr order_bk_s::order_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct order_bk_sDefaultTypeInternal {
  constexpr order_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~order_bk_sDefaultTypeInternal() {}
  union {
    order_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT order_bk_sDefaultTypeInternal _order_bk_s_default_instance_;
constexpr recharge_bk_c::recharge_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , enable_(0)
  , operator__(0)
  , type_(0)
  , curr_page_(0){}
struct recharge_bk_cDefaultTypeInternal {
  constexpr recharge_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_bk_cDefaultTypeInternal() {}
  union {
    recharge_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_bk_cDefaultTypeInternal _recharge_bk_c_default_instance_;
constexpr recharge_bk_s_item::recharge_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paycert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , id_(0)
  , num_(0)
  , rmb_(0)
  , time_(0)
  , enable_(0)
  , operator__(0){}
struct recharge_bk_s_itemDefaultTypeInternal {
  constexpr recharge_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_bk_s_itemDefaultTypeInternal() {}
  union {
    recharge_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_bk_s_itemDefaultTypeInternal _recharge_bk_s_item_default_instance_;
constexpr recharge_bk_s::recharge_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0)
  , type_(0){}
struct recharge_bk_sDefaultTypeInternal {
  constexpr recharge_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_bk_sDefaultTypeInternal() {}
  union {
    recharge_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_bk_sDefaultTypeInternal _recharge_bk_s_default_instance_;
constexpr recharge_oper_bk_c::recharge_oper_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , enable_(0)
  , type_(0){}
struct recharge_oper_bk_cDefaultTypeInternal {
  constexpr recharge_oper_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_oper_bk_cDefaultTypeInternal() {}
  union {
    recharge_oper_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_oper_bk_cDefaultTypeInternal _recharge_oper_bk_c_default_instance_;
constexpr recharge_oper_bk_s::recharge_oper_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct recharge_oper_bk_sDefaultTypeInternal {
  constexpr recharge_oper_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_oper_bk_sDefaultTypeInternal() {}
  union {
    recharge_oper_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_oper_bk_sDefaultTypeInternal _recharge_oper_bk_s_default_instance_;
constexpr user_list_bk_c::user_list_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , enable_(0)
  , curr_page_(0){}
struct user_list_bk_cDefaultTypeInternal {
  constexpr user_list_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_list_bk_cDefaultTypeInternal() {}
  union {
    user_list_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_list_bk_cDefaultTypeInternal _user_list_bk_c_default_instance_;
constexpr user_list_bk_s_item::user_list_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , dispatch_coin_(0)
  , activated_coin_(0)
  , total_income_(0)
  , static_income_(0)
  , promote_current_income_(0)
  , team_current_income_(0)
  , activated_(0)
  , enable_(0)
  , parent_phone_(PROTOBUF_LONGLONG(0))
  , trade_(0){}
struct user_list_bk_s_itemDefaultTypeInternal {
  constexpr user_list_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_list_bk_s_itemDefaultTypeInternal() {}
  union {
    user_list_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_list_bk_s_itemDefaultTypeInternal _user_list_bk_s_item_default_instance_;
constexpr user_list_bk_s::user_list_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0){}
struct user_list_bk_sDefaultTypeInternal {
  constexpr user_list_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_list_bk_sDefaultTypeInternal() {}
  union {
    user_list_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_list_bk_sDefaultTypeInternal _user_list_bk_s_default_instance_;
constexpr update_user_bk_c::update_user_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dispatch_coin_(0)
  , activated_coin_(0)
  , promote_current_income_(0)
  , team_current_income_(0)
  , parent_phone_(PROTOBUF_LONGLONG(0))
  , phone_(PROTOBUF_LONGLONG(0))
  , trade_(0){}
struct update_user_bk_cDefaultTypeInternal {
  constexpr update_user_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~update_user_bk_cDefaultTypeInternal() {}
  union {
    update_user_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT update_user_bk_cDefaultTypeInternal _update_user_bk_c_default_instance_;
constexpr update_user_bk_s::update_user_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct update_user_bk_sDefaultTypeInternal {
  constexpr update_user_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~update_user_bk_sDefaultTypeInternal() {}
  union {
    update_user_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT update_user_bk_sDefaultTypeInternal _update_user_bk_s_default_instance_;
constexpr user_contract_list_bk_c::user_contract_list_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0)){}
struct user_contract_list_bk_cDefaultTypeInternal {
  constexpr user_contract_list_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_contract_list_bk_cDefaultTypeInternal() {}
  union {
    user_contract_list_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_contract_list_bk_cDefaultTypeInternal _user_contract_list_bk_c_default_instance_;
constexpr user_contract_list_bk_s_item::user_contract_list_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , contract_type_(0)
  , price_(0)
  , time_(0){}
struct user_contract_list_bk_s_itemDefaultTypeInternal {
  constexpr user_contract_list_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_contract_list_bk_s_itemDefaultTypeInternal() {}
  union {
    user_contract_list_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_contract_list_bk_s_itemDefaultTypeInternal _user_contract_list_bk_s_item_default_instance_;
constexpr user_contract_list_bk_s::user_contract_list_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_(){}
struct user_contract_list_bk_sDefaultTypeInternal {
  constexpr user_contract_list_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_contract_list_bk_sDefaultTypeInternal() {}
  union {
    user_contract_list_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_contract_list_bk_sDefaultTypeInternal _user_contract_list_bk_s_default_instance_;
constexpr del_user_contract_bk_c::del_user_contract_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct del_user_contract_bk_cDefaultTypeInternal {
  constexpr del_user_contract_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~del_user_contract_bk_cDefaultTypeInternal() {}
  union {
    del_user_contract_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT del_user_contract_bk_cDefaultTypeInternal _del_user_contract_bk_c_default_instance_;
constexpr del_user_contract_bk_s::del_user_contract_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct del_user_contract_bk_sDefaultTypeInternal {
  constexpr del_user_contract_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~del_user_contract_bk_sDefaultTypeInternal() {}
  union {
    del_user_contract_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT del_user_contract_bk_sDefaultTypeInternal _del_user_contract_bk_s_default_instance_;
constexpr name_verifie_list_bk_c::name_verifie_list_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curr_page_(0){}
struct name_verifie_list_bk_cDefaultTypeInternal {
  constexpr name_verifie_list_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_verifie_list_bk_cDefaultTypeInternal() {}
  union {
    name_verifie_list_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_verifie_list_bk_cDefaultTypeInternal _name_verifie_list_bk_c_default_instance_;
constexpr name_verifie_list_bk_s_item::name_verifie_list_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , activated_(0)
  , name_verifie_(0){}
struct name_verifie_list_bk_s_itemDefaultTypeInternal {
  constexpr name_verifie_list_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_verifie_list_bk_s_itemDefaultTypeInternal() {}
  union {
    name_verifie_list_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_verifie_list_bk_s_itemDefaultTypeInternal _name_verifie_list_bk_s_item_default_instance_;
constexpr name_verifie_list_bk_s::name_verifie_list_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0){}
struct name_verifie_list_bk_sDefaultTypeInternal {
  constexpr name_verifie_list_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_verifie_list_bk_sDefaultTypeInternal() {}
  union {
    name_verifie_list_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_verifie_list_bk_sDefaultTypeInternal _name_verifie_list_bk_s_default_instance_;
constexpr name_verifie_oper_bk_c::name_verifie_oper_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , type_(0){}
struct name_verifie_oper_bk_cDefaultTypeInternal {
  constexpr name_verifie_oper_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_verifie_oper_bk_cDefaultTypeInternal() {}
  union {
    name_verifie_oper_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_verifie_oper_bk_cDefaultTypeInternal _name_verifie_oper_bk_c_default_instance_;
constexpr name_verifie_oper_bk_s::name_verifie_oper_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct name_verifie_oper_bk_sDefaultTypeInternal {
  constexpr name_verifie_oper_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_verifie_oper_bk_sDefaultTypeInternal() {}
  union {
    name_verifie_oper_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_verifie_oper_bk_sDefaultTypeInternal _name_verifie_oper_bk_s_default_instance_;
constexpr pay_verifie_list_bk_c::pay_verifie_list_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curr_page_(0){}
struct pay_verifie_list_bk_cDefaultTypeInternal {
  constexpr pay_verifie_list_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_verifie_list_bk_cDefaultTypeInternal() {}
  union {
    pay_verifie_list_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_verifie_list_bk_cDefaultTypeInternal _pay_verifie_list_bk_c_default_instance_;
constexpr pay_verifie_list_bk_s_item::pay_verifie_list_bk_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_cardid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bank_user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ailpay_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alipay_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webchat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , activated_(0)
  , pay_verifie_(0){}
struct pay_verifie_list_bk_s_itemDefaultTypeInternal {
  constexpr pay_verifie_list_bk_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_verifie_list_bk_s_itemDefaultTypeInternal() {}
  union {
    pay_verifie_list_bk_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_verifie_list_bk_s_itemDefaultTypeInternal _pay_verifie_list_bk_s_item_default_instance_;
constexpr pay_verifie_list_bk_s::pay_verifie_list_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , total_page_(0){}
struct pay_verifie_list_bk_sDefaultTypeInternal {
  constexpr pay_verifie_list_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_verifie_list_bk_sDefaultTypeInternal() {}
  union {
    pay_verifie_list_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_verifie_list_bk_sDefaultTypeInternal _pay_verifie_list_bk_s_default_instance_;
constexpr pay_verifie_oper_bk_c::pay_verifie_oper_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0))
  , type_(0){}
struct pay_verifie_oper_bk_cDefaultTypeInternal {
  constexpr pay_verifie_oper_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_verifie_oper_bk_cDefaultTypeInternal() {}
  union {
    pay_verifie_oper_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_verifie_oper_bk_cDefaultTypeInternal _pay_verifie_oper_bk_c_default_instance_;
constexpr pay_verifie_oper_bk_s::pay_verifie_oper_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct pay_verifie_oper_bk_sDefaultTypeInternal {
  constexpr pay_verifie_oper_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pay_verifie_oper_bk_sDefaultTypeInternal() {}
  union {
    pay_verifie_oper_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pay_verifie_oper_bk_sDefaultTypeInternal _pay_verifie_oper_bk_s_default_instance_;
constexpr create_user_bk_c::create_user_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , trade_(0){}
struct create_user_bk_cDefaultTypeInternal {
  constexpr create_user_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~create_user_bk_cDefaultTypeInternal() {}
  union {
    create_user_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT create_user_bk_cDefaultTypeInternal _create_user_bk_c_default_instance_;
constexpr create_user_bk_s::create_user_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct create_user_bk_sDefaultTypeInternal {
  constexpr create_user_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~create_user_bk_sDefaultTypeInternal() {}
  union {
    create_user_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT create_user_bk_sDefaultTypeInternal _create_user_bk_s_default_instance_;
constexpr user_proxy_bk_c::user_proxy_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0)){}
struct user_proxy_bk_cDefaultTypeInternal {
  constexpr user_proxy_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_proxy_bk_cDefaultTypeInternal() {}
  union {
    user_proxy_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_proxy_bk_cDefaultTypeInternal _user_proxy_bk_c_default_instance_;
constexpr user_proxy_bk_s::user_proxy_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(PROTOBUF_LONGLONG(0))
  , parent_phone_(PROTOBUF_LONGLONG(0))
  , sum_1_activated_(0)
  , count_1_phone_(0)
  , sum_2_activated_(0)
  , count_2_phone_(0)
  , sum_3_activated_(0)
  , count_3_phone_(0)
  , sum_99_activated_(0)
  , count_99_phone_(0)
  , team_total_income_(0){}
struct user_proxy_bk_sDefaultTypeInternal {
  constexpr user_proxy_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~user_proxy_bk_sDefaultTypeInternal() {}
  union {
    user_proxy_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT user_proxy_bk_sDefaultTypeInternal _user_proxy_bk_s_default_instance_;
constexpr close_user_bk_c::close_user_bk_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_(PROTOBUF_LONGLONG(0)){}
struct close_user_bk_cDefaultTypeInternal {
  constexpr close_user_bk_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~close_user_bk_cDefaultTypeInternal() {}
  union {
    close_user_bk_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT close_user_bk_cDefaultTypeInternal _close_user_bk_c_default_instance_;
constexpr close_user_bk_s::close_user_bk_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct close_user_bk_sDefaultTypeInternal {
  constexpr close_user_bk_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~close_user_bk_sDefaultTypeInternal() {}
  union {
    close_user_bk_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT close_user_bk_sDefaultTypeInternal _close_user_bk_s_default_instance_;
constexpr new_recharge_s::new_recharge_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct new_recharge_sDefaultTypeInternal {
  constexpr new_recharge_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~new_recharge_sDefaultTypeInternal() {}
  union {
    new_recharge_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT new_recharge_sDefaultTypeInternal _new_recharge_s_default_instance_;
constexpr contract_oper_list_c::contract_oper_list_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct contract_oper_list_cDefaultTypeInternal {
  constexpr contract_oper_list_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_oper_list_cDefaultTypeInternal() {}
  union {
    contract_oper_list_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_oper_list_cDefaultTypeInternal _contract_oper_list_c_default_instance_;
constexpr contract_oper_list_s_item::contract_oper_list_s_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nichen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contract_type_(0)
  , price_(0)
  , phone_(PROTOBUF_LONGLONG(0)){}
struct contract_oper_list_s_itemDefaultTypeInternal {
  constexpr contract_oper_list_s_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_oper_list_s_itemDefaultTypeInternal() {}
  union {
    contract_oper_list_s_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_oper_list_s_itemDefaultTypeInternal _contract_oper_list_s_item_default_instance_;
constexpr contract_oper_list_s::contract_oper_list_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : its_()
  , type_(0){}
struct contract_oper_list_sDefaultTypeInternal {
  constexpr contract_oper_list_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_oper_list_sDefaultTypeInternal() {}
  union {
    contract_oper_list_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_oper_list_sDefaultTypeInternal _contract_oper_list_s_default_instance_;
constexpr contract_oper_c::contract_oper_c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct contract_oper_cDefaultTypeInternal {
  constexpr contract_oper_cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_oper_cDefaultTypeInternal() {}
  union {
    contract_oper_c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_oper_cDefaultTypeInternal _contract_oper_c_default_instance_;
constexpr contract_oper_s::contract_oper_s(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , result_(0){}
struct contract_oper_sDefaultTypeInternal {
  constexpr contract_oper_sDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_oper_sDefaultTypeInternal() {}
  union {
    contract_oper_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_oper_sDefaultTypeInternal _contract_oper_s_default_instance_;
}  // namespace protocc
}  // namespace frmpub
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_backend_2eproto[65];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_backend_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_backend_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_backend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_bk_c, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::login_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, total_register_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, today_register_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, total_active_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, today_active_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, total_disenable_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, today_disenable_num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::crucial_bk_s, total_income_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s_item, topic_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s_item, info_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s_item, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::maillist_bk_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::addmail_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::addmail_bk_c, topic_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::addmail_bk_c, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::addmail_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::addmail_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, cycle_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, interest_rate_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, reserve_dispatch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, rush_dispathch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, rush_begin_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, rush_end_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, state_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, min_price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s_item, max_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_type_list_bk_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, cycle_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, interest_rate_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, reserve_dispatch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, rush_dispathch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, rush_begin_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, rush_end_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, state_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, min_price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_c, max_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_contract_type_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_c, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_c, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::add_contract_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_count_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_count_bk_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_count_bk_s_item, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_count_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_count_bk_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_c, begin_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_c, end_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, rob_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s_item, robed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::booking_bk_s, total_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_count_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_count_bk_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_count_bk_s_item, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_count_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_count_bk_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s_item, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s_item, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s_item, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::ripe_bk_s, total_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, buy_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, sell_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, state_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, buy_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, sell_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, contract_type_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, payicon_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, rush_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, pay_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, sell_confirm_time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s_item, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_list_bk_s, total_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_bk_c, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_bk_c, oper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::order_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_c, enable_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_c, operator__),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_c, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, num_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, rmb_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, paycert_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, time_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, enable_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, operator__),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s_item, nichen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s, total_page_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_bk_s, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_oper_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_oper_bk_c, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_oper_bk_c, enable_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_oper_bk_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_oper_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::recharge_oper_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_c, enable_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, dispatch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, activated_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, total_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, static_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, promote_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, team_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, enable_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, pwd_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, trade_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s_item, parent_phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_list_bk_s, total_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, dispatch_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, activated_coin_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, promote_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, team_current_income_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, pwd_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, trade_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, parent_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::update_user_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s_item, id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s_item, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s_item, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_contract_list_bk_s, its_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::del_user_contract_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::del_user_contract_bk_c, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::del_user_contract_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::del_user_contract_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, idcard_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s_item, name_verifie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_list_bk_s, total_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_oper_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_oper_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_oper_bk_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_oper_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::name_verifie_oper_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_c, curr_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, bank_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, bank_cardid_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, bank_user_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, ailpay_id_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, alipay_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, webchat_name_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s_item, pay_verifie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_list_bk_s, total_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_oper_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_oper_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_oper_bk_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_oper_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::pay_verifie_oper_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_c, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_c, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_c, pwd_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_c, trade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::create_user_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, parent_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, parent_nichen_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, sum_1_activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, count_1_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, sum_2_activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, count_2_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, sum_3_activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, count_3_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, sum_99_activated_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, count_99_phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::user_proxy_bk_s, team_total_income_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::close_user_bk_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::close_user_bk_c, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::close_user_bk_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::close_user_bk_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::new_recharge_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::new_recharge_s, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s_item, contract_type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s_item, price_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s_item, phone_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s_item, nichen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s, its_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_list_s, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_c, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_s, type_),
  PROTOBUF_FIELD_OFFSET(::frmpub::protocc::contract_oper_s, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frmpub::protocc::login_bk_c)},
  { 7, -1, sizeof(::frmpub::protocc::login_bk_s)},
  { 13, -1, sizeof(::frmpub::protocc::crucial_bk_s)},
  { 25, -1, sizeof(::frmpub::protocc::maillist_bk_s_item)},
  { 34, -1, sizeof(::frmpub::protocc::maillist_bk_s)},
  { 40, -1, sizeof(::frmpub::protocc::addmail_bk_c)},
  { 47, -1, sizeof(::frmpub::protocc::addmail_bk_s)},
  { 53, -1, sizeof(::frmpub::protocc::contract_type_list_bk_s_item)},
  { 69, -1, sizeof(::frmpub::protocc::contract_type_list_bk_s)},
  { 75, -1, sizeof(::frmpub::protocc::update_contract_type_bk_c)},
  { 91, -1, sizeof(::frmpub::protocc::update_contract_type_bk_s)},
  { 97, -1, sizeof(::frmpub::protocc::add_contract_bk_c)},
  { 106, -1, sizeof(::frmpub::protocc::add_contract_bk_s)},
  { 112, -1, sizeof(::frmpub::protocc::booking_count_bk_s_item)},
  { 119, -1, sizeof(::frmpub::protocc::booking_count_bk_s)},
  { 125, -1, sizeof(::frmpub::protocc::booking_bk_c)},
  { 135, -1, sizeof(::frmpub::protocc::booking_bk_s_item)},
  { 146, -1, sizeof(::frmpub::protocc::booking_bk_s)},
  { 153, -1, sizeof(::frmpub::protocc::ripe_count_bk_s_item)},
  { 160, -1, sizeof(::frmpub::protocc::ripe_count_bk_s)},
  { 166, -1, sizeof(::frmpub::protocc::ripe_bk_c)},
  { 174, -1, sizeof(::frmpub::protocc::ripe_bk_s_item)},
  { 184, -1, sizeof(::frmpub::protocc::ripe_bk_s)},
  { 191, -1, sizeof(::frmpub::protocc::order_list_bk_c)},
  { 202, -1, sizeof(::frmpub::protocc::order_list_bk_s_item)},
  { 217, -1, sizeof(::frmpub::protocc::order_list_bk_s)},
  { 224, -1, sizeof(::frmpub::protocc::order_bk_c)},
  { 231, -1, sizeof(::frmpub::protocc::order_bk_s)},
  { 237, -1, sizeof(::frmpub::protocc::recharge_bk_c)},
  { 247, -1, sizeof(::frmpub::protocc::recharge_bk_s_item)},
  { 261, -1, sizeof(::frmpub::protocc::recharge_bk_s)},
  { 269, -1, sizeof(::frmpub::protocc::recharge_oper_bk_c)},
  { 277, -1, sizeof(::frmpub::protocc::recharge_oper_bk_s)},
  { 283, -1, sizeof(::frmpub::protocc::user_list_bk_c)},
  { 291, -1, sizeof(::frmpub::protocc::user_list_bk_s_item)},
  { 309, -1, sizeof(::frmpub::protocc::user_list_bk_s)},
  { 316, -1, sizeof(::frmpub::protocc::update_user_bk_c)},
  { 329, -1, sizeof(::frmpub::protocc::update_user_bk_s)},
  { 335, -1, sizeof(::frmpub::protocc::user_contract_list_bk_c)},
  { 341, -1, sizeof(::frmpub::protocc::user_contract_list_bk_s_item)},
  { 350, -1, sizeof(::frmpub::protocc::user_contract_list_bk_s)},
  { 356, -1, sizeof(::frmpub::protocc::del_user_contract_bk_c)},
  { 362, -1, sizeof(::frmpub::protocc::del_user_contract_bk_s)},
  { 368, -1, sizeof(::frmpub::protocc::name_verifie_list_bk_c)},
  { 374, -1, sizeof(::frmpub::protocc::name_verifie_list_bk_s_item)},
  { 385, -1, sizeof(::frmpub::protocc::name_verifie_list_bk_s)},
  { 392, -1, sizeof(::frmpub::protocc::name_verifie_oper_bk_c)},
  { 399, -1, sizeof(::frmpub::protocc::name_verifie_oper_bk_s)},
  { 405, -1, sizeof(::frmpub::protocc::pay_verifie_list_bk_c)},
  { 411, -1, sizeof(::frmpub::protocc::pay_verifie_list_bk_s_item)},
  { 426, -1, sizeof(::frmpub::protocc::pay_verifie_list_bk_s)},
  { 433, -1, sizeof(::frmpub::protocc::pay_verifie_oper_bk_c)},
  { 440, -1, sizeof(::frmpub::protocc::pay_verifie_oper_bk_s)},
  { 446, -1, sizeof(::frmpub::protocc::create_user_bk_c)},
  { 455, -1, sizeof(::frmpub::protocc::create_user_bk_s)},
  { 461, -1, sizeof(::frmpub::protocc::user_proxy_bk_c)},
  { 467, -1, sizeof(::frmpub::protocc::user_proxy_bk_s)},
  { 485, -1, sizeof(::frmpub::protocc::close_user_bk_c)},
  { 491, -1, sizeof(::frmpub::protocc::close_user_bk_s)},
  { 497, -1, sizeof(::frmpub::protocc::new_recharge_s)},
  { 503, -1, sizeof(::frmpub::protocc::contract_oper_list_c)},
  { 509, -1, sizeof(::frmpub::protocc::contract_oper_list_s_item)},
  { 518, -1, sizeof(::frmpub::protocc::contract_oper_list_s)},
  { 525, -1, sizeof(::frmpub::protocc::contract_oper_c)},
  { 531, -1, sizeof(::frmpub::protocc::contract_oper_s)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_login_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_login_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_crucial_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_maillist_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_maillist_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_addmail_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_addmail_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_type_list_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_type_list_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_update_contract_type_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_update_contract_type_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_add_contract_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_add_contract_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_count_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_count_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_booking_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_ripe_count_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_ripe_count_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_ripe_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_ripe_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_ripe_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_list_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_list_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_list_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_order_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_oper_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_recharge_oper_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_list_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_list_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_list_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_update_user_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_update_user_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_contract_list_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_contract_list_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_contract_list_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_del_user_contract_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_del_user_contract_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_name_verifie_list_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_name_verifie_list_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_name_verifie_list_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_name_verifie_oper_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_name_verifie_oper_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_verifie_list_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_verifie_list_bk_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_verifie_list_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_verifie_oper_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_pay_verifie_oper_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_create_user_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_create_user_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_proxy_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_user_proxy_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_close_user_bk_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_close_user_bk_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_new_recharge_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_oper_list_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_oper_list_s_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_oper_list_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_oper_c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frmpub::protocc::_contract_oper_s_default_instance_),
};

const char descriptor_table_protodef_backend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rbackend.proto\022\016frmpub.protocc\"(\n\nlogin"
  "_bk_c\022\r\n\005phone\030\001 \001(\003\022\013\n\003pwd\030\002 \001(\t\"\034\n\nlog"
  "in_bk_s\022\016\n\006result\030\001 \001(\005\"\312\001\n\014crucial_bk_s"
  "\022\032\n\022total_register_num\030\001 \001(\005\022\032\n\022today_re"
  "gister_num\030\002 \001(\005\022\030\n\020total_active_num\030\003 \001"
  "(\005\022\030\n\020today_active_num\030\004 \001(\005\022\033\n\023total_di"
  "senable_num\030\005 \001(\005\022\033\n\023today_disenable_num"
  "\030\006 \001(\005\022\024\n\014total_income\030\007 \001(\002\"\177\n\rmaillist"
  "_bk_s\022/\n\003its\030\001 \003(\0132\".frmpub.protocc.mail"
  "list_bk_s.item\032=\n\004item\022\n\n\002id\030\001 \001(\005\022\r\n\005to"
  "pic\030\002 \001(\t\022\014\n\004info\030\003 \001(\t\022\014\n\004time\030\004 \001(\005\"+\n"
  "\014addmail_bk_c\022\r\n\005topic\030\002 \001(\t\022\014\n\004info\030\003 \001"
  "(\t\"\036\n\014addmail_bk_s\022\016\n\006result\030\001 \001(\005\"\276\002\n\027c"
  "ontract_type_list_bk_s\0229\n\003its\030\001 \003(\0132,.fr"
  "mpub.protocc.contract_type_list_bk_s.ite"
  "m\032\347\001\n\004item\022\n\n\002id\030\001 \001(\005\022\r\n\005cycle\030\002 \001(\005\022\025\n"
  "\rinterest_rate\030\003 \001(\002\022\035\n\025reserve_dispatch"
  "_coin\030\004 \001(\005\022\033\n\023rush_dispathch_coin\030\005 \001(\005"
  "\022\027\n\017rush_begin_time\030\006 \001(\005\022\025\n\rrush_end_ti"
  "me\030\007 \001(\005\022\r\n\005state\030\010 \001(\005\022\014\n\004name\030\t \001(\t\022\021\n"
  "\tmin_price\030\n \001(\005\022\021\n\tmax_price\030\013 \001(\005\"\374\001\n\031"
  "update_contract_type_bk_c\022\n\n\002id\030\001 \001(\005\022\r\n"
  "\005cycle\030\002 \001(\005\022\025\n\rinterest_rate\030\003 \001(\002\022\035\n\025r"
  "eserve_dispatch_coin\030\004 \001(\005\022\033\n\023rush_dispa"
  "thch_coin\030\005 \001(\005\022\027\n\017rush_begin_time\030\006 \001(\005"
  "\022\025\n\rrush_end_time\030\007 \001(\005\022\r\n\005state\030\010 \001(\005\022\014"
  "\n\004name\030\t \001(\t\022\021\n\tmin_price\030\n \001(\005\022\021\n\tmax_p"
  "rice\030\013 \001(\005\"+\n\031update_contract_type_bk_s\022"
  "\016\n\006result\030\001 \001(\005\"L\n\021add_contract_bk_c\022\r\n\005"
  "phone\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\r\n\005price\030\003 \001(\002"
  "\022\013\n\003num\030\004 \001(\005\"#\n\021add_contract_bk_s\022\016\n\006re"
  "sult\030\001 \001(\005\"v\n\022booking_count_bk_s\0224\n\003its\030"
  "\001 \003(\0132\'.frmpub.protocc.booking_count_bk_"
  "s.item\032*\n\004item\022\025\n\rcontract_type\030\001 \001(\005\022\013\n"
  "\003num\030\002 \001(\005\"d\n\014booking_bk_c\022\r\n\005phone\030\001 \001("
  "\003\022\014\n\004type\030\002 \001(\005\022\022\n\nbegin_time\030\003 \001(\t\022\020\n\010e"
  "nd_time\030\004 \001(\t\022\021\n\tcurr_page\030\005 \001(\005\"\272\001\n\014boo"
  "king_bk_s\022.\n\003its\030\001 \003(\0132!.frmpub.protocc."
  "booking_bk_s.item\022\022\n\ntotal_page\030\002 \001(\005\032f\n"
  "\004item\022\r\n\005phone\030\001 \001(\003\022\016\n\006nichen\030\002 \001(\t\022\025\n\r"
  "contract_type\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\013\n\003rob"
  "\030\005 \001(\005\022\r\n\005robed\030\006 \001(\005\"p\n\017ripe_count_bk_s"
  "\0221\n\003its\030\001 \003(\0132$.frmpub.protocc.ripe_coun"
  "t_bk_s.item\032*\n\004item\022\025\n\rcontract_type\030\001 \001"
  "(\005\022\013\n\003num\030\002 \001(\005\";\n\tripe_bk_c\022\r\n\005phone\030\001 "
  "\001(\003\022\014\n\004type\030\002 \001(\005\022\021\n\tcurr_page\030\003 \001(\005\"\247\001\n"
  "\tripe_bk_s\022+\n\003its\030\001 \003(\0132\036.frmpub.protocc"
  ".ripe_bk_s.item\022\022\n\ntotal_page\030\002 \001(\005\032Y\n\004i"
  "tem\022\r\n\005phone\030\001 \001(\003\022\016\n\006nichen\030\002 \001(\t\022\025\n\rco"
  "ntract_type\030\003 \001(\005\022\r\n\005price\030\004 \001(\002\022\014\n\004time"
  "\030\005 \001(\005\"t\n\017order_list_bk_c\022\021\n\tbuy_phone\030\001"
  " \001(\003\022\014\n\004type\030\002 \001(\005\022\022\n\nsell_phone\030\003 \001(\003\022\r"
  "\n\005state\030\004 \001(\005\022\n\n\002id\030\005 \001(\003\022\021\n\tcurr_page\030\006"
  " \001(\005\"\237\002\n\017order_list_bk_s\0221\n\003its\030\001 \003(\0132$."
  "frmpub.protocc.order_list_bk_s.item\022\022\n\nt"
  "otal_page\030\002 \001(\005\032\304\001\n\004item\022\n\n\002id\030\001 \001(\003\022\021\n\t"
  "buy_phone\030\002 \001(\003\022\022\n\nsell_phone\030\003 \001(\003\022\032\n\022c"
  "ontract_type_name\030\004 \001(\t\022\r\n\005price\030\005 \001(\002\022\017"
  "\n\007payicon\030\006 \001(\t\022\021\n\trush_time\030\007 \001(\005\022\020\n\010pa"
  "y_time\030\010 \001(\005\022\031\n\021sell_confirm_time\030\t \001(\005\022"
  "\r\n\005state\030\n \001(\005\"&\n\norder_bk_c\022\n\n\002id\030\001 \001(\003"
  "\022\014\n\004oper\030\002 \001(\005\"\034\n\norder_bk_s\022\016\n\006result\030\001"
  " \001(\005\"a\n\rrecharge_bk_c\022\r\n\005phone\030\001 \001(\003\022\016\n\006"
  "enable\030\002 \001(\005\022\020\n\010operator\030\003 \001(\005\022\014\n\004type\030\004"
  " \001(\005\022\021\n\tcurr_page\030\005 \001(\005\"\361\001\n\rrecharge_bk_"
  "s\022/\n\003its\030\001 \003(\0132\".frmpub.protocc.recharge"
  "_bk_s.item\022\022\n\ntotal_page\030\002 \001(\005\022\014\n\004type\030\003"
  " \001(\005\032\214\001\n\004item\022\n\n\002id\030\001 \001(\005\022\r\n\005phone\030\002 \001(\003"
  "\022\013\n\003num\030\003 \001(\005\022\013\n\003rmb\030\004 \001(\002\022\017\n\007paycert\030\005 "
  "\001(\t\022\014\n\004time\030\006 \001(\005\022\016\n\006enable\030\007 \001(\005\022\020\n\010ope"
  "rator\030\010 \001(\005\022\016\n\006nichen\030\t \001(\t\">\n\022recharge_"
  "oper_bk_c\022\n\n\002id\030\001 \001(\005\022\016\n\006enable\030\002 \001(\005\022\014\n"
  "\004type\030\003 \001(\005\"$\n\022recharge_oper_bk_s\022\016\n\006res"
  "ult\030\001 \001(\005\"B\n\016user_list_bk_c\022\r\n\005phone\030\001 \001"
  "(\003\022\016\n\006enable\030\002 \001(\005\022\021\n\tcurr_page\030\003 \001(\005\"\354\002"
  "\n\016user_list_bk_s\0220\n\003its\030\001 \003(\0132#.frmpub.p"
  "rotocc.user_list_bk_s.item\022\022\n\ntotal_page"
  "\030\002 \001(\005\032\223\002\n\004item\022\r\n\005phone\030\001 \001(\003\022\016\n\006nichen"
  "\030\002 \001(\t\022\025\n\rdispatch_coin\030\003 \001(\005\022\026\n\016activat"
  "ed_coin\030\004 \001(\005\022\024\n\014total_income\030\005 \001(\002\022\025\n\rs"
  "tatic_income\030\006 \001(\002\022\036\n\026promote_current_in"
  "come\030\007 \001(\002\022\033\n\023team_current_income\030\010 \001(\002\022"
  "\021\n\tactivated\030\t \001(\005\022\016\n\006enable\030\n \001(\005\022\013\n\003pw"
  "d\030\013 \001(\t\022\r\n\005trade\030\014 \001(\005\022\024\n\014parent_phone\030\r"
  " \001(\003\"\277\001\n\020update_user_bk_c\022\025\n\rdispatch_co"
  "in\030\001 \001(\005\022\026\n\016activated_coin\030\002 \001(\005\022\036\n\026prom"
  "ote_current_income\030\003 \001(\005\022\033\n\023team_current"
  "_income\030\004 \001(\005\022\013\n\003pwd\030\005 \001(\t\022\r\n\005trade\030\006 \001("
  "\005\022\024\n\014parent_phone\030\007 \001(\003\022\r\n\005phone\030\010 \001(\003\"\""
  "\n\020update_user_bk_s\022\016\n\006result\030\001 \001(\005\"(\n\027us"
  "er_contract_list_bk_c\022\r\n\005phone\030\010 \001(\003\"\234\001\n"
  "\027user_contract_list_bk_s\0229\n\003its\030\001 \003(\0132,."
  "frmpub.protocc.user_contract_list_bk_s.i"
  "tem\032F\n\004item\022\n\n\002id\030\001 \001(\005\022\025\n\rcontract_type"
  "\030\002 \001(\005\022\r\n\005price\030\003 \001(\002\022\014\n\004time\030\004 \001(\005\"$\n\026d"
  "el_user_contract_bk_c\022\n\n\002id\030\001 \001(\005\"(\n\026del"
  "_user_contract_bk_s\022\016\n\006result\030\001 \001(\005\"+\n\026n"
  "ame_verifie_list_bk_c\022\021\n\tcurr_page\030\001 \001(\005"
  "\"\324\001\n\026name_verifie_list_bk_s\0228\n\003its\030\001 \003(\013"
  "2+.frmpub.protocc.name_verifie_list_bk_s"
  ".item\022\022\n\ntotal_page\030\002 \001(\005\032l\n\004item\022\r\n\005pho"
  "ne\030\001 \001(\003\022\016\n\006nichen\030\002 \001(\t\022\021\n\tactivated\030\003 "
  "\001(\005\022\014\n\004name\030\004 \001(\t\022\016\n\006idcard\030\005 \001(\t\022\024\n\014nam"
  "e_verifie\030\006 \001(\005\"5\n\026name_verifie_oper_bk_"
  "c\022\r\n\005phone\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\"(\n\026name_v"
  "erifie_oper_bk_s\022\016\n\006result\030\001 \001(\005\"*\n\025pay_"
  "verifie_list_bk_c\022\021\n\tcurr_page\030\001 \001(\005\"\262\002\n"
  "\025pay_verifie_list_bk_s\0227\n\003its\030\001 \003(\0132*.fr"
  "mpub.protocc.pay_verifie_list_bk_s.item\022"
  "\022\n\ntotal_page\030\002 \001(\005\032\313\001\n\004item\022\r\n\005phone\030\001 "
  "\001(\003\022\016\n\006nichen\030\002 \001(\t\022\021\n\tactivated\030\003 \001(\005\022\021"
  "\n\tbank_name\030\004 \001(\t\022\023\n\013bank_cardid\030\005 \001(\t\022\026"
  "\n\016bank_user_name\030\006 \001(\t\022\021\n\tailpay_id\030\007 \001("
  "\t\022\023\n\013alipay_name\030\010 \001(\t\022\024\n\014webchat_name\030\t"
  " \001(\t\022\023\n\013pay_verifie\030\n \001(\005\"4\n\025pay_verifie"
  "_oper_bk_c\022\r\n\005phone\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\""
  "\'\n\025pay_verifie_oper_bk_s\022\016\n\006result\030\001 \001(\005"
  "\"M\n\020create_user_bk_c\022\r\n\005phone\030\001 \001(\003\022\016\n\006n"
  "ichen\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\r\n\005trade\030\004 \001(\005\""
  "\"\n\020create_user_bk_s\022\016\n\006result\030\001 \001(\005\" \n\017u"
  "ser_proxy_bk_c\022\r\n\005phone\030\001 \001(\003\"\272\002\n\017user_p"
  "roxy_bk_s\022\r\n\005phone\030\001 \001(\003\022\016\n\006nichen\030\002 \001(\t"
  "\022\024\n\014parent_phone\030\003 \001(\003\022\025\n\rparent_nichen\030"
  "\004 \001(\t\022\027\n\017sum_1_activated\030\005 \001(\005\022\025\n\rcount_"
  "1_phone\030\006 \001(\005\022\027\n\017sum_2_activated\030\007 \001(\005\022\025"
  "\n\rcount_2_phone\030\010 \001(\005\022\027\n\017sum_3_activated"
  "\030\t \001(\005\022\025\n\rcount_3_phone\030\n \001(\005\022\030\n\020sum_99_"
  "activated\030\013 \001(\005\022\026\n\016count_99_phone\030\014 \001(\005\022"
  "\031\n\021team_total_income\030\r \001(\002\" \n\017close_user"
  "_bk_c\022\r\n\005phone\030\001 \001(\003\"!\n\017close_user_bk_s\022"
  "\016\n\006result\030\001 \001(\005\" \n\016new_recharge_s\022\016\n\006res"
  "ult\030\001 \001(\005\"$\n\024contract_oper_list_c\022\014\n\004typ"
  "e\030\001 \001(\005\"\251\001\n\024contract_oper_list_s\0226\n\003its\030"
  "\001 \003(\0132).frmpub.protocc.contract_oper_lis"
  "t_s.item\022\014\n\004type\030\002 \001(\005\032K\n\004item\022\025\n\rcontra"
  "ct_type\030\001 \001(\005\022\r\n\005price\030\002 \001(\002\022\r\n\005phone\030\003 "
  "\001(\003\022\016\n\006nichen\030\004 \001(\t\"\037\n\017contract_oper_c\022\014"
  "\n\004type\030\001 \001(\005\"/\n\017contract_oper_s\022\014\n\004type\030"
  "\001 \001(\005\022\016\n\006result\030\002 \001(\005*\303\013\n\014BackendMsgId\022\026"
  "\n\022BACKENDMSGID_BEGIN\020\000\022\031\n\024CLIENT_BACKEND"
  "_BEGIN\020\354\'\022\017\n\nLOGIN_BK_C\020\355\'\022\017\n\nLOGIN_BK_S"
  "\020\356\'\022\021\n\014CRUCIAL_BK_C\020\357\'\022\021\n\014CRUCIAL_BK_S\020\360"
  "\'\022\022\n\rMAILLIST_BK_C\020\361\'\022\022\n\rMAILLIST_BK_S\020\362"
  "\'\022\021\n\014ADDMAIL_BK_C\020\363\'\022\021\n\014ADDMAIL_BK_S\020\364\'\022"
  "\034\n\027CONTRACT_TYPE_LIST_BK_C\020\365\'\022\034\n\027CONTRAC"
  "T_TYPE_LIST_BK_S\020\366\'\022\036\n\031UPDATE_CONTRACT_T"
  "YPE_BK_C\020\367\'\022\036\n\031UPDATE_CONTRACT_TYPE_BK_S"
  "\020\370\'\022\026\n\021ADD_CONTRACT_BK_C\020\371\'\022\026\n\021ADD_CONTR"
  "ACT_BK_S\020\372\'\022\027\n\022BOOKING_COUNT_BK_C\020\373\'\022\027\n\022"
  "BOOKING_COUNT_BK_S\020\374\'\022\021\n\014BOOKING_BK_C\020\375\'"
  "\022\021\n\014BOOKING_BK_S\020\376\'\022\024\n\017RIPE_COUNT_BK_C\020\377"
  "\'\022\024\n\017RIPE_COUNT_BK_S\020\200(\022\016\n\tRIPE_BK_C\020\201(\022"
  "\016\n\tRIPE_BK_S\020\202(\022\024\n\017ORDER_LIST_BK_C\020\203(\022\024\n"
  "\017ORDER_LIST_BK_S\020\204(\022\017\n\nORDER_BK_C\020\205(\022\017\n\n"
  "ORDER_BK_S\020\206(\022\022\n\rRECHARGE_BK_C\020\207(\022\022\n\rREC"
  "HARGE_BK_S\020\210(\022\027\n\022RECHARGE_OPER_BK_C\020\211(\022\027"
  "\n\022RECHARGE_OPER_BK_S\020\212(\022\023\n\016USER_LIST_BK_"
  "C\020\213(\022\023\n\016USER_LIST_BK_S\020\214(\022\025\n\020UPDATE_USER"
  "_BK_C\020\215(\022\025\n\020UPDATE_USER_BK_S\020\216(\022\034\n\027USER_"
  "CONTRACT_LIST_BK_C\020\217(\022\034\n\027USER_CONTRACT_L"
  "IST_BK_S\020\220(\022\033\n\026DEL_USER_CONTRACT_BK_C\020\221("
  "\022\033\n\026DEL_USER_CONTRACT_BK_S\020\222(\022\033\n\026NAME_VE"
  "RIFIE_LIST_BK_C\020\223(\022\033\n\026NAME_VERIFIE_LIST_"
  "BK_S\020\224(\022\033\n\026NAME_VERIFIE_OPER_BK_C\020\225(\022\033\n\026"
  "NAME_VERIFIE_OPER_BK_S\020\226(\022\032\n\025PAY_VERIFIE"
  "_LIST_BK_C\020\227(\022\032\n\025PAY_VERIFIE_LIST_BK_S\020\230"
  "(\022\032\n\025PAY_VERIFIE_OPER_BK_C\020\231(\022\032\n\025PAY_VER"
  "IFIE_OPER_BK_S\020\232(\022\025\n\020CREATE_USER_BK_C\020\233("
  "\022\025\n\020CREATE_USER_BK_S\020\234(\022\024\n\017USER_PROXY_BK"
  "_C\020\235(\022\024\n\017USER_PROXY_BK_S\020\236(\022\024\n\017CLOSE_USE"
  "R_BK_C\020\237(\022\024\n\017CLOSE_USER_BK_S\020\240(\022\023\n\016NEW_R"
  "ECHARGE_C\020\241(\022\023\n\016NEW_RECHARGE_S\020\242(\022\031\n\024CON"
  "TRACT_OPER_LIST_C\020\243(\022\031\n\024CONTRACT_OPER_LI"
  "ST_S\020\244(\022\024\n\017CONTRACT_OPER_C\020\245(\022\024\n\017CONTRAC"
  "T_OPER_S\020\246(\022\027\n\022CLIENT_BACKEND_END\020\217N\022\025\n\020"
  "BACKENDMSGID_END\020\220Nb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_backend_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_2eproto = {
  false, false, 7027, descriptor_table_protodef_backend_2eproto, "backend.proto", 
  &descriptor_table_backend_2eproto_once, nullptr, 0, 65,
  schemas, file_default_instances, TableStruct_backend_2eproto::offsets,
  file_level_metadata_backend_2eproto, file_level_enum_descriptors_backend_2eproto, file_level_service_descriptors_backend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_backend_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_2eproto);
  return descriptor_table_backend_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_backend_2eproto(&descriptor_table_backend_2eproto);
namespace frmpub {
namespace protocc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackendMsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_2eproto);
  return file_level_enum_descriptors_backend_2eproto[0];
}
bool BackendMsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 5100:
    case 5101:
    case 5102:
    case 5103:
    case 5104:
    case 5105:
    case 5106:
    case 5107:
    case 5108:
    case 5109:
    case 5110:
    case 5111:
    case 5112:
    case 5113:
    case 5114:
    case 5115:
    case 5116:
    case 5117:
    case 5118:
    case 5119:
    case 5120:
    case 5121:
    case 5122:
    case 5123:
    case 5124:
    case 5125:
    case 5126:
    case 5127:
    case 5128:
    case 5129:
    case 5130:
    case 5131:
    case 5132:
    case 5133:
    case 5134:
    case 5135:
    case 5136:
    case 5137:
    case 5138:
    case 5139:
    case 5140:
    case 5141:
    case 5142:
    case 5143:
    case 5144:
    case 5145:
    case 5146:
    case 5147:
    case 5148:
    case 5149:
    case 5150:
    case 5151:
    case 5152:
    case 5153:
    case 5154:
    case 5155:
    case 5156:
    case 5157:
    case 5158:
    case 9999:
    case 10000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class login_bk_c::_Internal {
 public:
};

login_bk_c::login_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.login_bk_c)
}
login_bk_c::login_bk_c(const login_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArena());
  }
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.login_bk_c)
}

void login_bk_c::SharedCtor() {
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_ = PROTOBUF_LONGLONG(0);
}

login_bk_c::~login_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.login_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_bk_c::ArenaDtor(void* object) {
  login_bk_c* _this = reinterpret_cast< login_bk_c* >(object);
  (void)_this;
}
void login_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.login_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pwd_.ClearToEmpty();
  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.login_bk_c.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.login_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.login_bk_c.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.login_bk_c)
  return target;
}

size_t login_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.login_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.login_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const login_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.login_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.login_bk_c)
    MergeFrom(*source);
  }
}

void login_bk_c::MergeFrom(const login_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.login_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void login_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.login_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_bk_c::CopyFrom(const login_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.login_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_bk_c::IsInitialized() const {
  return true;
}

void login_bk_c::InternalSwap(login_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class login_bk_s::_Internal {
 public:
};

login_bk_s::login_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.login_bk_s)
}
login_bk_s::login_bk_s(const login_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.login_bk_s)
}

void login_bk_s::SharedCtor() {
result_ = 0;
}

login_bk_s::~login_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.login_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void login_bk_s::ArenaDtor(void* object) {
  login_bk_s* _this = reinterpret_cast< login_bk_s* >(object);
  (void)_this;
}
void login_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.login_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.login_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.login_bk_s)
  return target;
}

size_t login_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.login_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.login_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const login_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.login_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.login_bk_s)
    MergeFrom(*source);
  }
}

void login_bk_s::MergeFrom(const login_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.login_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void login_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.login_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_bk_s::CopyFrom(const login_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.login_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_bk_s::IsInitialized() const {
  return true;
}

void login_bk_s::InternalSwap(login_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class crucial_bk_s::_Internal {
 public:
};

crucial_bk_s::crucial_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.crucial_bk_s)
}
crucial_bk_s::crucial_bk_s(const crucial_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_register_num_, &from.total_register_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_income_) -
    reinterpret_cast<char*>(&total_register_num_)) + sizeof(total_income_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.crucial_bk_s)
}

void crucial_bk_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_register_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_income_) -
    reinterpret_cast<char*>(&total_register_num_)) + sizeof(total_income_));
}

crucial_bk_s::~crucial_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.crucial_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void crucial_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void crucial_bk_s::ArenaDtor(void* object) {
  crucial_bk_s* _this = reinterpret_cast< crucial_bk_s* >(object);
  (void)_this;
}
void crucial_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void crucial_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void crucial_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.crucial_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_register_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_income_) -
      reinterpret_cast<char*>(&total_register_num_)) + sizeof(total_income_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* crucial_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_register_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_register_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 today_register_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          today_register_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_active_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_active_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 today_active_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          today_active_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_disenable_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_disenable_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 today_disenable_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          today_disenable_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float total_income = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          total_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* crucial_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.crucial_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_register_num = 1;
  if (this->total_register_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_register_num(), target);
  }

  // int32 today_register_num = 2;
  if (this->today_register_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_today_register_num(), target);
  }

  // int32 total_active_num = 3;
  if (this->total_active_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_active_num(), target);
  }

  // int32 today_active_num = 4;
  if (this->today_active_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_today_active_num(), target);
  }

  // int32 total_disenable_num = 5;
  if (this->total_disenable_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_disenable_num(), target);
  }

  // int32 today_disenable_num = 6;
  if (this->today_disenable_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_today_disenable_num(), target);
  }

  // float total_income = 7;
  if (!(this->total_income() <= 0 && this->total_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_total_income(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.crucial_bk_s)
  return target;
}

size_t crucial_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.crucial_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_register_num = 1;
  if (this->total_register_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_register_num());
  }

  // int32 today_register_num = 2;
  if (this->today_register_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_today_register_num());
  }

  // int32 total_active_num = 3;
  if (this->total_active_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_active_num());
  }

  // int32 today_active_num = 4;
  if (this->today_active_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_today_active_num());
  }

  // int32 total_disenable_num = 5;
  if (this->total_disenable_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_disenable_num());
  }

  // int32 today_disenable_num = 6;
  if (this->today_disenable_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_today_disenable_num());
  }

  // float total_income = 7;
  if (!(this->total_income() <= 0 && this->total_income() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crucial_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.crucial_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const crucial_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crucial_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.crucial_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.crucial_bk_s)
    MergeFrom(*source);
  }
}

void crucial_bk_s::MergeFrom(const crucial_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.crucial_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_register_num() != 0) {
    _internal_set_total_register_num(from._internal_total_register_num());
  }
  if (from.today_register_num() != 0) {
    _internal_set_today_register_num(from._internal_today_register_num());
  }
  if (from.total_active_num() != 0) {
    _internal_set_total_active_num(from._internal_total_active_num());
  }
  if (from.today_active_num() != 0) {
    _internal_set_today_active_num(from._internal_today_active_num());
  }
  if (from.total_disenable_num() != 0) {
    _internal_set_total_disenable_num(from._internal_total_disenable_num());
  }
  if (from.today_disenable_num() != 0) {
    _internal_set_today_disenable_num(from._internal_today_disenable_num());
  }
  if (!(from.total_income() <= 0 && from.total_income() >= 0)) {
    _internal_set_total_income(from._internal_total_income());
  }
}

void crucial_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.crucial_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crucial_bk_s::CopyFrom(const crucial_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.crucial_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crucial_bk_s::IsInitialized() const {
  return true;
}

void crucial_bk_s::InternalSwap(crucial_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(crucial_bk_s, total_income_)
      + sizeof(crucial_bk_s::total_income_)
      - PROTOBUF_FIELD_OFFSET(crucial_bk_s, total_register_num_)>(
          reinterpret_cast<char*>(&total_register_num_),
          reinterpret_cast<char*>(&other->total_register_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata crucial_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class maillist_bk_s_item::_Internal {
 public:
};

maillist_bk_s_item::maillist_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.maillist_bk_s.item)
}
maillist_bk_s_item::maillist_bk_s_item(const maillist_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic(), 
      GetArena());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.maillist_bk_s.item)
}

void maillist_bk_s_item::SharedCtor() {
topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
}

maillist_bk_s_item::~maillist_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.maillist_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void maillist_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void maillist_bk_s_item::ArenaDtor(void* object) {
  maillist_bk_s_item* _this = reinterpret_cast< maillist_bk_s_item* >(object);
  (void)_this;
}
void maillist_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void maillist_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void maillist_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.maillist_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty();
  info_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* maillist_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.maillist_bk_s.item.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.maillist_bk_s.item.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* maillist_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.maillist_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.maillist_bk_s.item.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // string info = 3;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.maillist_bk_s.item.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.maillist_bk_s.item)
  return target;
}

size_t maillist_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.maillist_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string info = 3;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void maillist_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.maillist_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const maillist_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<maillist_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.maillist_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.maillist_bk_s.item)
    MergeFrom(*source);
  }
}

void maillist_bk_s_item::MergeFrom(const maillist_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.maillist_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void maillist_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.maillist_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void maillist_bk_s_item::CopyFrom(const maillist_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.maillist_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool maillist_bk_s_item::IsInitialized() const {
  return true;
}

void maillist_bk_s_item::InternalSwap(maillist_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(maillist_bk_s_item, time_)
      + sizeof(maillist_bk_s_item::time_)
      - PROTOBUF_FIELD_OFFSET(maillist_bk_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata maillist_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class maillist_bk_s::_Internal {
 public:
};

maillist_bk_s::maillist_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.maillist_bk_s)
}
maillist_bk_s::maillist_bk_s(const maillist_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.maillist_bk_s)
}

void maillist_bk_s::SharedCtor() {
}

maillist_bk_s::~maillist_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.maillist_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void maillist_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void maillist_bk_s::ArenaDtor(void* object) {
  maillist_bk_s* _this = reinterpret_cast< maillist_bk_s* >(object);
  (void)_this;
}
void maillist_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void maillist_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void maillist_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.maillist_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* maillist_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.maillist_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* maillist_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.maillist_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.maillist_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.maillist_bk_s)
  return target;
}

size_t maillist_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.maillist_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.maillist_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void maillist_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.maillist_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const maillist_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<maillist_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.maillist_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.maillist_bk_s)
    MergeFrom(*source);
  }
}

void maillist_bk_s::MergeFrom(const maillist_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.maillist_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void maillist_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.maillist_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void maillist_bk_s::CopyFrom(const maillist_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.maillist_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool maillist_bk_s::IsInitialized() const {
  return true;
}

void maillist_bk_s::InternalSwap(maillist_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata maillist_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class addmail_bk_c::_Internal {
 public:
};

addmail_bk_c::addmail_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.addmail_bk_c)
}
addmail_bk_c::addmail_bk_c(const addmail_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic(), 
      GetArena());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.addmail_bk_c)
}

void addmail_bk_c::SharedCtor() {
topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

addmail_bk_c::~addmail_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.addmail_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void addmail_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void addmail_bk_c::ArenaDtor(void* object) {
  addmail_bk_c* _this = reinterpret_cast< addmail_bk_c* >(object);
  (void)_this;
}
void addmail_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addmail_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addmail_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.addmail_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty();
  info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addmail_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.addmail_bk_c.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.addmail_bk_c.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addmail_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.addmail_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.addmail_bk_c.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // string info = 3;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.addmail_bk_c.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.addmail_bk_c)
  return target;
}

size_t addmail_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.addmail_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string info = 3;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addmail_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.addmail_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const addmail_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addmail_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.addmail_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.addmail_bk_c)
    MergeFrom(*source);
  }
}

void addmail_bk_c::MergeFrom(const addmail_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.addmail_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
}

void addmail_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.addmail_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addmail_bk_c::CopyFrom(const addmail_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.addmail_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addmail_bk_c::IsInitialized() const {
  return true;
}

void addmail_bk_c::InternalSwap(addmail_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata addmail_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class addmail_bk_s::_Internal {
 public:
};

addmail_bk_s::addmail_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.addmail_bk_s)
}
addmail_bk_s::addmail_bk_s(const addmail_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.addmail_bk_s)
}

void addmail_bk_s::SharedCtor() {
result_ = 0;
}

addmail_bk_s::~addmail_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.addmail_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void addmail_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void addmail_bk_s::ArenaDtor(void* object) {
  addmail_bk_s* _this = reinterpret_cast< addmail_bk_s* >(object);
  (void)_this;
}
void addmail_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addmail_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addmail_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.addmail_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addmail_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addmail_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.addmail_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.addmail_bk_s)
  return target;
}

size_t addmail_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.addmail_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addmail_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.addmail_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const addmail_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addmail_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.addmail_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.addmail_bk_s)
    MergeFrom(*source);
  }
}

void addmail_bk_s::MergeFrom(const addmail_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.addmail_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void addmail_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.addmail_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addmail_bk_s::CopyFrom(const addmail_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.addmail_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addmail_bk_s::IsInitialized() const {
  return true;
}

void addmail_bk_s::InternalSwap(addmail_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addmail_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_type_list_bk_s_item::_Internal {
 public:
};

contract_type_list_bk_s_item::contract_type_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_type_list_bk_s.item)
}
contract_type_list_bk_s_item::contract_type_list_bk_s_item(const contract_type_list_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_price_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_price_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_type_list_bk_s.item)
}

void contract_type_list_bk_s_item::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_price_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_price_));
}

contract_type_list_bk_s_item::~contract_type_list_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_type_list_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_type_list_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void contract_type_list_bk_s_item::ArenaDtor(void* object) {
  contract_type_list_bk_s_item* _this = reinterpret_cast< contract_type_list_bk_s_item* >(object);
  (void)_this;
}
void contract_type_list_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_type_list_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_type_list_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_type_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_price_) -
      reinterpret_cast<char*>(&id_)) + sizeof(max_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_type_list_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cycle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float interest_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          interest_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 reserve_dispatch_coin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reserve_dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_dispathch_coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rush_dispathch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_begin_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rush_begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rush_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.contract_type_list_bk_s.item.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          max_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_type_list_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_type_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 cycle = 2;
  if (this->cycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cycle(), target);
  }

  // float interest_rate = 3;
  if (!(this->interest_rate() <= 0 && this->interest_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_interest_rate(), target);
  }

  // int32 reserve_dispatch_coin = 4;
  if (this->reserve_dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reserve_dispatch_coin(), target);
  }

  // int32 rush_dispathch_coin = 5;
  if (this->rush_dispathch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rush_dispathch_coin(), target);
  }

  // int32 rush_begin_time = 6;
  if (this->rush_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rush_begin_time(), target);
  }

  // int32 rush_end_time = 7;
  if (this->rush_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rush_end_time(), target);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_state(), target);
  }

  // string name = 9;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.contract_type_list_bk_s.item.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // int32 min_price = 10;
  if (this->min_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_min_price(), target);
  }

  // int32 max_price = 11;
  if (this->max_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_type_list_bk_s.item)
  return target;
}

size_t contract_type_list_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_type_list_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 cycle = 2;
  if (this->cycle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cycle());
  }

  // float interest_rate = 3;
  if (!(this->interest_rate() <= 0 && this->interest_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 reserve_dispatch_coin = 4;
  if (this->reserve_dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reserve_dispatch_coin());
  }

  // int32 rush_dispathch_coin = 5;
  if (this->rush_dispathch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_dispathch_coin());
  }

  // int32 rush_begin_time = 6;
  if (this->rush_begin_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_begin_time());
  }

  // int32 rush_end_time = 7;
  if (this->rush_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_end_time());
  }

  // int32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 min_price = 10;
  if (this->min_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_price());
  }

  // int32 max_price = 11;
  if (this->max_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_type_list_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_type_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_type_list_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_type_list_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_type_list_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_type_list_bk_s.item)
    MergeFrom(*source);
  }
}

void contract_type_list_bk_s_item::MergeFrom(const contract_type_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_type_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cycle() != 0) {
    _internal_set_cycle(from._internal_cycle());
  }
  if (!(from.interest_rate() <= 0 && from.interest_rate() >= 0)) {
    _internal_set_interest_rate(from._internal_interest_rate());
  }
  if (from.reserve_dispatch_coin() != 0) {
    _internal_set_reserve_dispatch_coin(from._internal_reserve_dispatch_coin());
  }
  if (from.rush_dispathch_coin() != 0) {
    _internal_set_rush_dispathch_coin(from._internal_rush_dispathch_coin());
  }
  if (from.rush_begin_time() != 0) {
    _internal_set_rush_begin_time(from._internal_rush_begin_time());
  }
  if (from.rush_end_time() != 0) {
    _internal_set_rush_end_time(from._internal_rush_end_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.min_price() != 0) {
    _internal_set_min_price(from._internal_min_price());
  }
  if (from.max_price() != 0) {
    _internal_set_max_price(from._internal_max_price());
  }
}

void contract_type_list_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_type_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_type_list_bk_s_item::CopyFrom(const contract_type_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_type_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_type_list_bk_s_item::IsInitialized() const {
  return true;
}

void contract_type_list_bk_s_item::InternalSwap(contract_type_list_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(contract_type_list_bk_s_item, max_price_)
      + sizeof(contract_type_list_bk_s_item::max_price_)
      - PROTOBUF_FIELD_OFFSET(contract_type_list_bk_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_type_list_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_type_list_bk_s::_Internal {
 public:
};

contract_type_list_bk_s::contract_type_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_type_list_bk_s)
}
contract_type_list_bk_s::contract_type_list_bk_s(const contract_type_list_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_type_list_bk_s)
}

void contract_type_list_bk_s::SharedCtor() {
}

contract_type_list_bk_s::~contract_type_list_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_type_list_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_type_list_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_type_list_bk_s::ArenaDtor(void* object) {
  contract_type_list_bk_s* _this = reinterpret_cast< contract_type_list_bk_s* >(object);
  (void)_this;
}
void contract_type_list_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_type_list_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_type_list_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_type_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_type_list_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.contract_type_list_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_type_list_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_type_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.contract_type_list_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_type_list_bk_s)
  return target;
}

size_t contract_type_list_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_type_list_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.contract_type_list_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_type_list_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_type_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_type_list_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_type_list_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_type_list_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_type_list_bk_s)
    MergeFrom(*source);
  }
}

void contract_type_list_bk_s::MergeFrom(const contract_type_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_type_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void contract_type_list_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_type_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_type_list_bk_s::CopyFrom(const contract_type_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_type_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_type_list_bk_s::IsInitialized() const {
  return true;
}

void contract_type_list_bk_s::InternalSwap(contract_type_list_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_type_list_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class update_contract_type_bk_c::_Internal {
 public:
};

update_contract_type_bk_c::update_contract_type_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.update_contract_type_bk_c)
}
update_contract_type_bk_c::update_contract_type_bk_c(const update_contract_type_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_price_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_price_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.update_contract_type_bk_c)
}

void update_contract_type_bk_c::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_price_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_price_));
}

update_contract_type_bk_c::~update_contract_type_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.update_contract_type_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void update_contract_type_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void update_contract_type_bk_c::ArenaDtor(void* object) {
  update_contract_type_bk_c* _this = reinterpret_cast< update_contract_type_bk_c* >(object);
  (void)_this;
}
void update_contract_type_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void update_contract_type_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void update_contract_type_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.update_contract_type_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_price_) -
      reinterpret_cast<char*>(&id_)) + sizeof(max_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* update_contract_type_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cycle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float interest_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          interest_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 reserve_dispatch_coin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reserve_dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_dispathch_coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rush_dispathch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_begin_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rush_begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rush_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.update_contract_type_bk_c.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          max_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* update_contract_type_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.update_contract_type_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 cycle = 2;
  if (this->cycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cycle(), target);
  }

  // float interest_rate = 3;
  if (!(this->interest_rate() <= 0 && this->interest_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_interest_rate(), target);
  }

  // int32 reserve_dispatch_coin = 4;
  if (this->reserve_dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reserve_dispatch_coin(), target);
  }

  // int32 rush_dispathch_coin = 5;
  if (this->rush_dispathch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rush_dispathch_coin(), target);
  }

  // int32 rush_begin_time = 6;
  if (this->rush_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rush_begin_time(), target);
  }

  // int32 rush_end_time = 7;
  if (this->rush_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rush_end_time(), target);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_state(), target);
  }

  // string name = 9;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.update_contract_type_bk_c.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // int32 min_price = 10;
  if (this->min_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_min_price(), target);
  }

  // int32 max_price = 11;
  if (this->max_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.update_contract_type_bk_c)
  return target;
}

size_t update_contract_type_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.update_contract_type_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 cycle = 2;
  if (this->cycle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cycle());
  }

  // float interest_rate = 3;
  if (!(this->interest_rate() <= 0 && this->interest_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 reserve_dispatch_coin = 4;
  if (this->reserve_dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reserve_dispatch_coin());
  }

  // int32 rush_dispathch_coin = 5;
  if (this->rush_dispathch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_dispathch_coin());
  }

  // int32 rush_begin_time = 6;
  if (this->rush_begin_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_begin_time());
  }

  // int32 rush_end_time = 7;
  if (this->rush_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_end_time());
  }

  // int32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 min_price = 10;
  if (this->min_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_price());
  }

  // int32 max_price = 11;
  if (this->max_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_contract_type_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.update_contract_type_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const update_contract_type_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<update_contract_type_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.update_contract_type_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.update_contract_type_bk_c)
    MergeFrom(*source);
  }
}

void update_contract_type_bk_c::MergeFrom(const update_contract_type_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.update_contract_type_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cycle() != 0) {
    _internal_set_cycle(from._internal_cycle());
  }
  if (!(from.interest_rate() <= 0 && from.interest_rate() >= 0)) {
    _internal_set_interest_rate(from._internal_interest_rate());
  }
  if (from.reserve_dispatch_coin() != 0) {
    _internal_set_reserve_dispatch_coin(from._internal_reserve_dispatch_coin());
  }
  if (from.rush_dispathch_coin() != 0) {
    _internal_set_rush_dispathch_coin(from._internal_rush_dispathch_coin());
  }
  if (from.rush_begin_time() != 0) {
    _internal_set_rush_begin_time(from._internal_rush_begin_time());
  }
  if (from.rush_end_time() != 0) {
    _internal_set_rush_end_time(from._internal_rush_end_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.min_price() != 0) {
    _internal_set_min_price(from._internal_min_price());
  }
  if (from.max_price() != 0) {
    _internal_set_max_price(from._internal_max_price());
  }
}

void update_contract_type_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.update_contract_type_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_contract_type_bk_c::CopyFrom(const update_contract_type_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.update_contract_type_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_contract_type_bk_c::IsInitialized() const {
  return true;
}

void update_contract_type_bk_c::InternalSwap(update_contract_type_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(update_contract_type_bk_c, max_price_)
      + sizeof(update_contract_type_bk_c::max_price_)
      - PROTOBUF_FIELD_OFFSET(update_contract_type_bk_c, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata update_contract_type_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class update_contract_type_bk_s::_Internal {
 public:
};

update_contract_type_bk_s::update_contract_type_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.update_contract_type_bk_s)
}
update_contract_type_bk_s::update_contract_type_bk_s(const update_contract_type_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.update_contract_type_bk_s)
}

void update_contract_type_bk_s::SharedCtor() {
result_ = 0;
}

update_contract_type_bk_s::~update_contract_type_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.update_contract_type_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void update_contract_type_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void update_contract_type_bk_s::ArenaDtor(void* object) {
  update_contract_type_bk_s* _this = reinterpret_cast< update_contract_type_bk_s* >(object);
  (void)_this;
}
void update_contract_type_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void update_contract_type_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void update_contract_type_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.update_contract_type_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* update_contract_type_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* update_contract_type_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.update_contract_type_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.update_contract_type_bk_s)
  return target;
}

size_t update_contract_type_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.update_contract_type_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_contract_type_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.update_contract_type_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const update_contract_type_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<update_contract_type_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.update_contract_type_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.update_contract_type_bk_s)
    MergeFrom(*source);
  }
}

void update_contract_type_bk_s::MergeFrom(const update_contract_type_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.update_contract_type_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void update_contract_type_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.update_contract_type_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_contract_type_bk_s::CopyFrom(const update_contract_type_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.update_contract_type_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_contract_type_bk_s::IsInitialized() const {
  return true;
}

void update_contract_type_bk_s::InternalSwap(update_contract_type_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata update_contract_type_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class add_contract_bk_c::_Internal {
 public:
};

add_contract_bk_c::add_contract_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.add_contract_bk_c)
}
add_contract_bk_c::add_contract_bk_c(const add_contract_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.add_contract_bk_c)
}

void add_contract_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(num_));
}

add_contract_bk_c::~add_contract_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.add_contract_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void add_contract_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void add_contract_bk_c::ArenaDtor(void* object) {
  add_contract_bk_c* _this = reinterpret_cast< add_contract_bk_c* >(object);
  (void)_this;
}
void add_contract_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_contract_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void add_contract_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.add_contract_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_contract_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_contract_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.add_contract_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // float price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_price(), target);
  }

  // int32 num = 4;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.add_contract_bk_c)
  return target;
}

size_t add_contract_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.add_contract_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 num = 4;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void add_contract_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.add_contract_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const add_contract_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<add_contract_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.add_contract_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.add_contract_bk_c)
    MergeFrom(*source);
  }
}

void add_contract_bk_c::MergeFrom(const add_contract_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.add_contract_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void add_contract_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.add_contract_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_contract_bk_c::CopyFrom(const add_contract_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.add_contract_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_contract_bk_c::IsInitialized() const {
  return true;
}

void add_contract_bk_c::InternalSwap(add_contract_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(add_contract_bk_c, num_)
      + sizeof(add_contract_bk_c::num_)
      - PROTOBUF_FIELD_OFFSET(add_contract_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata add_contract_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class add_contract_bk_s::_Internal {
 public:
};

add_contract_bk_s::add_contract_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.add_contract_bk_s)
}
add_contract_bk_s::add_contract_bk_s(const add_contract_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.add_contract_bk_s)
}

void add_contract_bk_s::SharedCtor() {
result_ = 0;
}

add_contract_bk_s::~add_contract_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.add_contract_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void add_contract_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void add_contract_bk_s::ArenaDtor(void* object) {
  add_contract_bk_s* _this = reinterpret_cast< add_contract_bk_s* >(object);
  (void)_this;
}
void add_contract_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_contract_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void add_contract_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.add_contract_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_contract_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_contract_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.add_contract_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.add_contract_bk_s)
  return target;
}

size_t add_contract_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.add_contract_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void add_contract_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.add_contract_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const add_contract_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<add_contract_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.add_contract_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.add_contract_bk_s)
    MergeFrom(*source);
  }
}

void add_contract_bk_s::MergeFrom(const add_contract_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.add_contract_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void add_contract_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.add_contract_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_contract_bk_s::CopyFrom(const add_contract_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.add_contract_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_contract_bk_s::IsInitialized() const {
  return true;
}

void add_contract_bk_s::InternalSwap(add_contract_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_contract_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_count_bk_s_item::_Internal {
 public:
};

booking_count_bk_s_item::booking_count_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_count_bk_s.item)
}
booking_count_bk_s_item::booking_count_bk_s_item(const booking_count_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&contract_type_, &from.contract_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_count_bk_s.item)
}

void booking_count_bk_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contract_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(num_));
}

booking_count_bk_s_item::~booking_count_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_count_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_count_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_count_bk_s_item::ArenaDtor(void* object) {
  booking_count_bk_s_item* _this = reinterpret_cast< booking_count_bk_s_item* >(object);
  (void)_this;
}
void booking_count_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_count_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_count_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_count_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&contract_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&contract_type_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_count_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contract_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_count_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_count_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contract_type(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_count_bk_s.item)
  return target;
}

size_t booking_count_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_count_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_count_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_count_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_count_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_count_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_count_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_count_bk_s.item)
    MergeFrom(*source);
  }
}

void booking_count_bk_s_item::MergeFrom(const booking_count_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_count_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void booking_count_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_count_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_count_bk_s_item::CopyFrom(const booking_count_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_count_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_count_bk_s_item::IsInitialized() const {
  return true;
}

void booking_count_bk_s_item::InternalSwap(booking_count_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(booking_count_bk_s_item, num_)
      + sizeof(booking_count_bk_s_item::num_)
      - PROTOBUF_FIELD_OFFSET(booking_count_bk_s_item, contract_type_)>(
          reinterpret_cast<char*>(&contract_type_),
          reinterpret_cast<char*>(&other->contract_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_count_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_count_bk_s::_Internal {
 public:
};

booking_count_bk_s::booking_count_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_count_bk_s)
}
booking_count_bk_s::booking_count_bk_s(const booking_count_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_count_bk_s)
}

void booking_count_bk_s::SharedCtor() {
}

booking_count_bk_s::~booking_count_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_count_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_count_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_count_bk_s::ArenaDtor(void* object) {
  booking_count_bk_s* _this = reinterpret_cast< booking_count_bk_s* >(object);
  (void)_this;
}
void booking_count_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_count_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_count_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_count_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_count_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.booking_count_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_count_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_count_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.booking_count_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_count_bk_s)
  return target;
}

size_t booking_count_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_count_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.booking_count_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_count_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_count_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_count_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_count_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_count_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_count_bk_s)
    MergeFrom(*source);
  }
}

void booking_count_bk_s::MergeFrom(const booking_count_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_count_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void booking_count_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_count_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_count_bk_s::CopyFrom(const booking_count_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_count_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_count_bk_s::IsInitialized() const {
  return true;
}

void booking_count_bk_s::InternalSwap(booking_count_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_count_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_bk_c::_Internal {
 public:
};

booking_bk_c::booking_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_bk_c)
}
booking_bk_c::booking_bk_c(const booking_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  begin_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_begin_time().empty()) {
    begin_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_begin_time(), 
      GetArena());
  }
  end_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_time().empty()) {
    end_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_time(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_bk_c)
}

void booking_bk_c::SharedCtor() {
begin_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
}

booking_bk_c::~booking_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  begin_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void booking_bk_c::ArenaDtor(void* object) {
  booking_bk_c* _this = reinterpret_cast< booking_bk_c* >(object);
  (void)_this;
}
void booking_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_time_.ClearToEmpty();
  end_time_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_page_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string begin_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_begin_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.booking_bk_c.begin_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_end_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.booking_bk_c.end_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string begin_time = 3;
  if (this->begin_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_begin_time().data(), static_cast<int>(this->_internal_begin_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.booking_bk_c.begin_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_begin_time(), target);
  }

  // string end_time = 4;
  if (this->end_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_time().data(), static_cast<int>(this->_internal_end_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.booking_bk_c.end_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_end_time(), target);
  }

  // int32 curr_page = 5;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_bk_c)
  return target;
}

size_t booking_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string begin_time = 3;
  if (this->begin_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_begin_time());
  }

  // string end_time = 4;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_time());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 curr_page = 5;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_bk_c)
    MergeFrom(*source);
  }
}

void booking_bk_c::MergeFrom(const booking_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin_time().size() > 0) {
    _internal_set_begin_time(from._internal_begin_time());
  }
  if (from.end_time().size() > 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void booking_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_bk_c::CopyFrom(const booking_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_bk_c::IsInitialized() const {
  return true;
}

void booking_bk_c::InternalSwap(booking_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  begin_time_.Swap(&other->begin_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_time_.Swap(&other->end_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(booking_bk_c, curr_page_)
      + sizeof(booking_bk_c::curr_page_)
      - PROTOBUF_FIELD_OFFSET(booking_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_bk_s_item::_Internal {
 public:
};

booking_bk_s_item::booking_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_bk_s.item)
}
booking_bk_s_item::booking_bk_s_item(const booking_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&robed_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(robed_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_bk_s.item)
}

void booking_bk_s_item::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&robed_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(robed_));
}

booking_bk_s_item::~booking_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void booking_bk_s_item::ArenaDtor(void* object) {
  booking_bk_s_item* _this = reinterpret_cast< booking_bk_s_item* >(object);
  (void)_this;
}
void booking_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robed_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(robed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.booking_bk_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rob = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 robed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          robed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.booking_bk_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // int32 contract_type = 3;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_contract_type(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  // int32 rob = 5;
  if (this->rob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rob(), target);
  }

  // int32 robed = 6;
  if (this->robed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_robed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_bk_s.item)
  return target;
}

size_t booking_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 contract_type = 3;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 rob = 5;
  if (this->rob() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rob());
  }

  // int32 robed = 6;
  if (this->robed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_bk_s.item)
    MergeFrom(*source);
  }
}

void booking_bk_s_item::MergeFrom(const booking_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.rob() != 0) {
    _internal_set_rob(from._internal_rob());
  }
  if (from.robed() != 0) {
    _internal_set_robed(from._internal_robed());
  }
}

void booking_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_bk_s_item::CopyFrom(const booking_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_bk_s_item::IsInitialized() const {
  return true;
}

void booking_bk_s_item::InternalSwap(booking_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(booking_bk_s_item, robed_)
      + sizeof(booking_bk_s_item::robed_)
      - PROTOBUF_FIELD_OFFSET(booking_bk_s_item, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class booking_bk_s::_Internal {
 public:
};

booking_bk_s::booking_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.booking_bk_s)
}
booking_bk_s::booking_bk_s(const booking_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_page_ = from.total_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.booking_bk_s)
}

void booking_bk_s::SharedCtor() {
total_page_ = 0;
}

booking_bk_s::~booking_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.booking_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void booking_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void booking_bk_s::ArenaDtor(void* object) {
  booking_bk_s* _this = reinterpret_cast< booking_bk_s* >(object);
  (void)_this;
}
void booking_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void booking_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void booking_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.booking_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  total_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* booking_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.booking_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* booking_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.booking_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.booking_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.booking_bk_s)
  return target;
}

size_t booking_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.booking_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.booking_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void booking_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.booking_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const booking_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<booking_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.booking_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.booking_bk_s)
    MergeFrom(*source);
  }
}

void booking_bk_s::MergeFrom(const booking_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.booking_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
}

void booking_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.booking_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void booking_bk_s::CopyFrom(const booking_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.booking_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool booking_bk_s::IsInitialized() const {
  return true;
}

void booking_bk_s::InternalSwap(booking_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(total_page_, other->total_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata booking_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ripe_count_bk_s_item::_Internal {
 public:
};

ripe_count_bk_s_item::ripe_count_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.ripe_count_bk_s.item)
}
ripe_count_bk_s_item::ripe_count_bk_s_item(const ripe_count_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&contract_type_, &from.contract_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.ripe_count_bk_s.item)
}

void ripe_count_bk_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contract_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(num_));
}

ripe_count_bk_s_item::~ripe_count_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.ripe_count_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ripe_count_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ripe_count_bk_s_item::ArenaDtor(void* object) {
  ripe_count_bk_s_item* _this = reinterpret_cast< ripe_count_bk_s_item* >(object);
  (void)_this;
}
void ripe_count_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ripe_count_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ripe_count_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.ripe_count_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&contract_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&contract_type_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ripe_count_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contract_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ripe_count_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.ripe_count_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contract_type(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.ripe_count_bk_s.item)
  return target;
}

size_t ripe_count_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.ripe_count_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ripe_count_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.ripe_count_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const ripe_count_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ripe_count_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.ripe_count_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.ripe_count_bk_s.item)
    MergeFrom(*source);
  }
}

void ripe_count_bk_s_item::MergeFrom(const ripe_count_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.ripe_count_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void ripe_count_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.ripe_count_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ripe_count_bk_s_item::CopyFrom(const ripe_count_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.ripe_count_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ripe_count_bk_s_item::IsInitialized() const {
  return true;
}

void ripe_count_bk_s_item::InternalSwap(ripe_count_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ripe_count_bk_s_item, num_)
      + sizeof(ripe_count_bk_s_item::num_)
      - PROTOBUF_FIELD_OFFSET(ripe_count_bk_s_item, contract_type_)>(
          reinterpret_cast<char*>(&contract_type_),
          reinterpret_cast<char*>(&other->contract_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ripe_count_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ripe_count_bk_s::_Internal {
 public:
};

ripe_count_bk_s::ripe_count_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.ripe_count_bk_s)
}
ripe_count_bk_s::ripe_count_bk_s(const ripe_count_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.ripe_count_bk_s)
}

void ripe_count_bk_s::SharedCtor() {
}

ripe_count_bk_s::~ripe_count_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.ripe_count_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ripe_count_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ripe_count_bk_s::ArenaDtor(void* object) {
  ripe_count_bk_s* _this = reinterpret_cast< ripe_count_bk_s* >(object);
  (void)_this;
}
void ripe_count_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ripe_count_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ripe_count_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.ripe_count_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ripe_count_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.ripe_count_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ripe_count_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.ripe_count_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.ripe_count_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.ripe_count_bk_s)
  return target;
}

size_t ripe_count_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.ripe_count_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.ripe_count_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ripe_count_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.ripe_count_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const ripe_count_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ripe_count_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.ripe_count_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.ripe_count_bk_s)
    MergeFrom(*source);
  }
}

void ripe_count_bk_s::MergeFrom(const ripe_count_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.ripe_count_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void ripe_count_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.ripe_count_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ripe_count_bk_s::CopyFrom(const ripe_count_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.ripe_count_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ripe_count_bk_s::IsInitialized() const {
  return true;
}

void ripe_count_bk_s::InternalSwap(ripe_count_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ripe_count_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ripe_bk_c::_Internal {
 public:
};

ripe_bk_c::ripe_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.ripe_bk_c)
}
ripe_bk_c::ripe_bk_c(const ripe_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.ripe_bk_c)
}

void ripe_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
}

ripe_bk_c::~ripe_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.ripe_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ripe_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ripe_bk_c::ArenaDtor(void* object) {
  ripe_bk_c* _this = reinterpret_cast< ripe_bk_c* >(object);
  (void)_this;
}
void ripe_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ripe_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ripe_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.ripe_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_page_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ripe_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ripe_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.ripe_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 curr_page = 3;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.ripe_bk_c)
  return target;
}

size_t ripe_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.ripe_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 curr_page = 3;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ripe_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.ripe_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const ripe_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ripe_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.ripe_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.ripe_bk_c)
    MergeFrom(*source);
  }
}

void ripe_bk_c::MergeFrom(const ripe_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.ripe_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void ripe_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.ripe_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ripe_bk_c::CopyFrom(const ripe_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.ripe_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ripe_bk_c::IsInitialized() const {
  return true;
}

void ripe_bk_c::InternalSwap(ripe_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ripe_bk_c, curr_page_)
      + sizeof(ripe_bk_c::curr_page_)
      - PROTOBUF_FIELD_OFFSET(ripe_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ripe_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ripe_bk_s_item::_Internal {
 public:
};

ripe_bk_s_item::ripe_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.ripe_bk_s.item)
}
ripe_bk_s_item::ripe_bk_s_item(const ripe_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.ripe_bk_s.item)
}

void ripe_bk_s_item::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(time_));
}

ripe_bk_s_item::~ripe_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.ripe_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ripe_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ripe_bk_s_item::ArenaDtor(void* object) {
  ripe_bk_s_item* _this = reinterpret_cast< ripe_bk_s_item* >(object);
  (void)_this;
}
void ripe_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ripe_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ripe_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.ripe_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ripe_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.ripe_bk_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ripe_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.ripe_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.ripe_bk_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // int32 contract_type = 3;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_contract_type(), target);
  }

  // float price = 4;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_price(), target);
  }

  // int32 time = 5;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.ripe_bk_s.item)
  return target;
}

size_t ripe_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.ripe_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 contract_type = 3;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // float price = 4;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ripe_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.ripe_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const ripe_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ripe_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.ripe_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.ripe_bk_s.item)
    MergeFrom(*source);
  }
}

void ripe_bk_s_item::MergeFrom(const ripe_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.ripe_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void ripe_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.ripe_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ripe_bk_s_item::CopyFrom(const ripe_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.ripe_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ripe_bk_s_item::IsInitialized() const {
  return true;
}

void ripe_bk_s_item::InternalSwap(ripe_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ripe_bk_s_item, time_)
      + sizeof(ripe_bk_s_item::time_)
      - PROTOBUF_FIELD_OFFSET(ripe_bk_s_item, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ripe_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ripe_bk_s::_Internal {
 public:
};

ripe_bk_s::ripe_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.ripe_bk_s)
}
ripe_bk_s::ripe_bk_s(const ripe_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_page_ = from.total_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.ripe_bk_s)
}

void ripe_bk_s::SharedCtor() {
total_page_ = 0;
}

ripe_bk_s::~ripe_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.ripe_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ripe_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ripe_bk_s::ArenaDtor(void* object) {
  ripe_bk_s* _this = reinterpret_cast< ripe_bk_s* >(object);
  (void)_this;
}
void ripe_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ripe_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ripe_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.ripe_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  total_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ripe_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.ripe_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ripe_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.ripe_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.ripe_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.ripe_bk_s)
  return target;
}

size_t ripe_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.ripe_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.ripe_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ripe_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.ripe_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const ripe_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ripe_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.ripe_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.ripe_bk_s)
    MergeFrom(*source);
  }
}

void ripe_bk_s::MergeFrom(const ripe_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.ripe_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
}

void ripe_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.ripe_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ripe_bk_s::CopyFrom(const ripe_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.ripe_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ripe_bk_s::IsInitialized() const {
  return true;
}

void ripe_bk_s::InternalSwap(ripe_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(total_page_, other->total_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ripe_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_list_bk_c::_Internal {
 public:
};

order_list_bk_c::order_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_list_bk_c)
}
order_list_bk_c::order_list_bk_c(const order_list_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buy_phone_, &from.buy_phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&buy_phone_)) + sizeof(curr_page_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_list_bk_c)
}

void order_list_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buy_phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&buy_phone_)) + sizeof(curr_page_));
}

order_list_bk_c::~order_list_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_list_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_list_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_list_bk_c::ArenaDtor(void* object) {
  order_list_bk_c* _this = reinterpret_cast< order_list_bk_c* >(object);
  (void)_this;
}
void order_list_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_list_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_list_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buy_phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_page_) -
      reinterpret_cast<char*>(&buy_phone_)) + sizeof(curr_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_list_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 buy_phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buy_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sell_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_page = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_list_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buy_phone = 1;
  if (this->buy_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_buy_phone(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int64 sell_phone = 3;
  if (this->sell_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sell_phone(), target);
  }

  // int32 state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_state(), target);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  // int32 curr_page = 6;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_list_bk_c)
  return target;
}

size_t order_list_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_list_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 buy_phone = 1;
  if (this->buy_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buy_phone());
  }

  // int64 sell_phone = 3;
  if (this->sell_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_phone());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 curr_page = 6;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_list_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const order_list_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_list_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_list_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_list_bk_c)
    MergeFrom(*source);
  }
}

void order_list_bk_c::MergeFrom(const order_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buy_phone() != 0) {
    _internal_set_buy_phone(from._internal_buy_phone());
  }
  if (from.sell_phone() != 0) {
    _internal_set_sell_phone(from._internal_sell_phone());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void order_list_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_list_bk_c::CopyFrom(const order_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_list_bk_c::IsInitialized() const {
  return true;
}

void order_list_bk_c::InternalSwap(order_list_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(order_list_bk_c, curr_page_)
      + sizeof(order_list_bk_c::curr_page_)
      - PROTOBUF_FIELD_OFFSET(order_list_bk_c, buy_phone_)>(
          reinterpret_cast<char*>(&buy_phone_),
          reinterpret_cast<char*>(&other->buy_phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata order_list_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_list_bk_s_item::_Internal {
 public:
};

order_list_bk_s_item::order_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_list_bk_s.item)
}
order_list_bk_s_item::order_list_bk_s_item(const order_list_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_type_name().empty()) {
    contract_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_type_name(), 
      GetArena());
  }
  payicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payicon().empty()) {
    payicon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payicon(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_list_bk_s.item)
}

void order_list_bk_s_item::SharedCtor() {
contract_type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

order_list_bk_s_item::~order_list_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_list_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_list_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void order_list_bk_s_item::ArenaDtor(void* object) {
  order_list_bk_s_item* _this = reinterpret_cast< order_list_bk_s_item* >(object);
  (void)_this;
}
void order_list_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_list_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_list_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_type_name_.ClearToEmpty();
  payicon_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_list_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buy_phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          buy_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sell_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_type_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_contract_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.order_list_bk_s.item.contract_type_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string payicon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.order_list_bk_s.item.payicon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rush_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rush_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pay_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sell_confirm_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sell_confirm_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_list_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 buy_phone = 2;
  if (this->buy_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_buy_phone(), target);
  }

  // int64 sell_phone = 3;
  if (this->sell_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sell_phone(), target);
  }

  // string contract_type_name = 4;
  if (this->contract_type_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_type_name().data(), static_cast<int>(this->_internal_contract_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.order_list_bk_s.item.contract_type_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_contract_type_name(), target);
  }

  // float price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_price(), target);
  }

  // string payicon = 6;
  if (this->payicon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payicon().data(), static_cast<int>(this->_internal_payicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.order_list_bk_s.item.payicon");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_payicon(), target);
  }

  // int32 rush_time = 7;
  if (this->rush_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rush_time(), target);
  }

  // int32 pay_time = 8;
  if (this->pay_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pay_time(), target);
  }

  // int32 sell_confirm_time = 9;
  if (this->sell_confirm_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_sell_confirm_time(), target);
  }

  // int32 state = 10;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_list_bk_s.item)
  return target;
}

size_t order_list_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_list_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_type_name = 4;
  if (this->contract_type_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_type_name());
  }

  // string payicon = 6;
  if (this->payicon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payicon());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 buy_phone = 2;
  if (this->buy_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buy_phone());
  }

  // int64 sell_phone = 3;
  if (this->sell_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_phone());
  }

  // float price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 rush_time = 7;
  if (this->rush_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rush_time());
  }

  // int32 pay_time = 8;
  if (this->pay_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pay_time());
  }

  // int32 sell_confirm_time = 9;
  if (this->sell_confirm_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sell_confirm_time());
  }

  // int32 state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_list_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const order_list_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_list_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_list_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_list_bk_s.item)
    MergeFrom(*source);
  }
}

void order_list_bk_s_item::MergeFrom(const order_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_type_name().size() > 0) {
    _internal_set_contract_type_name(from._internal_contract_type_name());
  }
  if (from.payicon().size() > 0) {
    _internal_set_payicon(from._internal_payicon());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.buy_phone() != 0) {
    _internal_set_buy_phone(from._internal_buy_phone());
  }
  if (from.sell_phone() != 0) {
    _internal_set_sell_phone(from._internal_sell_phone());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.rush_time() != 0) {
    _internal_set_rush_time(from._internal_rush_time());
  }
  if (from.pay_time() != 0) {
    _internal_set_pay_time(from._internal_pay_time());
  }
  if (from.sell_confirm_time() != 0) {
    _internal_set_sell_confirm_time(from._internal_sell_confirm_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void order_list_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_list_bk_s_item::CopyFrom(const order_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_list_bk_s_item::IsInitialized() const {
  return true;
}

void order_list_bk_s_item::InternalSwap(order_list_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_type_name_.Swap(&other->contract_type_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payicon_.Swap(&other->payicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(order_list_bk_s_item, state_)
      + sizeof(order_list_bk_s_item::state_)
      - PROTOBUF_FIELD_OFFSET(order_list_bk_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata order_list_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_list_bk_s::_Internal {
 public:
};

order_list_bk_s::order_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_list_bk_s)
}
order_list_bk_s::order_list_bk_s(const order_list_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_page_ = from.total_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_list_bk_s)
}

void order_list_bk_s::SharedCtor() {
total_page_ = 0;
}

order_list_bk_s::~order_list_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_list_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_list_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_list_bk_s::ArenaDtor(void* object) {
  order_list_bk_s* _this = reinterpret_cast< order_list_bk_s* >(object);
  (void)_this;
}
void order_list_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_list_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_list_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  total_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_list_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.order_list_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_list_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.order_list_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_list_bk_s)
  return target;
}

size_t order_list_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_list_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.order_list_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_list_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const order_list_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_list_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_list_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_list_bk_s)
    MergeFrom(*source);
  }
}

void order_list_bk_s::MergeFrom(const order_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
}

void order_list_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_list_bk_s::CopyFrom(const order_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_list_bk_s::IsInitialized() const {
  return true;
}

void order_list_bk_s::InternalSwap(order_list_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(total_page_, other->total_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata order_list_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_bk_c::_Internal {
 public:
};

order_bk_c::order_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_bk_c)
}
order_bk_c::order_bk_c(const order_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&id_)) + sizeof(oper_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_bk_c)
}

void order_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_) -
    reinterpret_cast<char*>(&id_)) + sizeof(oper_));
}

order_bk_c::~order_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_bk_c::ArenaDtor(void* object) {
  order_bk_c* _this = reinterpret_cast< order_bk_c* >(object);
  (void)_this;
}
void order_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_) -
      reinterpret_cast<char*>(&id_)) + sizeof(oper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 oper = 2;
  if (this->oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_bk_c)
  return target;
}

size_t order_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 oper = 2;
  if (this->oper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oper());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const order_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_bk_c)
    MergeFrom(*source);
  }
}

void order_bk_c::MergeFrom(const order_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.oper() != 0) {
    _internal_set_oper(from._internal_oper());
  }
}

void order_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_bk_c::CopyFrom(const order_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_bk_c::IsInitialized() const {
  return true;
}

void order_bk_c::InternalSwap(order_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(order_bk_c, oper_)
      + sizeof(order_bk_c::oper_)
      - PROTOBUF_FIELD_OFFSET(order_bk_c, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata order_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class order_bk_s::_Internal {
 public:
};

order_bk_s::order_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.order_bk_s)
}
order_bk_s::order_bk_s(const order_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.order_bk_s)
}

void order_bk_s::SharedCtor() {
result_ = 0;
}

order_bk_s::~order_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.order_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void order_bk_s::ArenaDtor(void* object) {
  order_bk_s* _this = reinterpret_cast< order_bk_s* >(object);
  (void)_this;
}
void order_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void order_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.order_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.order_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.order_bk_s)
  return target;
}

size_t order_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.order_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.order_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const order_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.order_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.order_bk_s)
    MergeFrom(*source);
  }
}

void order_bk_s::MergeFrom(const order_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.order_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void order_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.order_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_bk_s::CopyFrom(const order_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.order_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_bk_s::IsInitialized() const {
  return true;
}

void order_bk_s::InternalSwap(order_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata order_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_bk_c::_Internal {
 public:
};

recharge_bk_c::recharge_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_bk_c)
}
recharge_bk_c::recharge_bk_c(const recharge_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_bk_c)
}

void recharge_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
}

recharge_bk_c::~recharge_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void recharge_bk_c::ArenaDtor(void* object) {
  recharge_bk_c* _this = reinterpret_cast< recharge_bk_c* >(object);
  (void)_this;
}
void recharge_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_page_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  // int32 operator = 3;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_operator_(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 curr_page = 5;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_bk_c)
  return target;
}

size_t recharge_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  // int32 operator = 3;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operator_());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 curr_page = 5;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_bk_c)
    MergeFrom(*source);
  }
}

void recharge_bk_c::MergeFrom(const recharge_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void recharge_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_bk_c::CopyFrom(const recharge_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_bk_c::IsInitialized() const {
  return true;
}

void recharge_bk_c::InternalSwap(recharge_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_bk_c, curr_page_)
      + sizeof(recharge_bk_c::curr_page_)
      - PROTOBUF_FIELD_OFFSET(recharge_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_bk_s_item::_Internal {
 public:
};

recharge_bk_s_item::recharge_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_bk_s.item)
}
recharge_bk_s_item::recharge_bk_s_item(const recharge_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paycert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paycert().empty()) {
    paycert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paycert(), 
      GetArena());
  }
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&phone_)) + sizeof(operator__));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_bk_s.item)
}

void recharge_bk_s_item::SharedCtor() {
paycert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&phone_)) + sizeof(operator__));
}

recharge_bk_s_item::~recharge_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paycert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recharge_bk_s_item::ArenaDtor(void* object) {
  recharge_bk_s_item* _this = reinterpret_cast< recharge_bk_s_item* >(object);
  (void)_this;
}
void recharge_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paycert_.ClearToEmpty();
  nichen_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&phone_)) + sizeof(operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rmb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          rmb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string paycert = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_paycert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.recharge_bk_s.item.paycert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.recharge_bk_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 phone = 2;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_phone(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // float rmb = 4;
  if (!(this->rmb() <= 0 && this->rmb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rmb(), target);
  }

  // string paycert = 5;
  if (this->paycert().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paycert().data(), static_cast<int>(this->_internal_paycert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.recharge_bk_s.item.paycert");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_paycert(), target);
  }

  // int32 time = 6;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time(), target);
  }

  // int32 enable = 7;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_enable(), target);
  }

  // int32 operator = 8;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_operator_(), target);
  }

  // string nichen = 9;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.recharge_bk_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nichen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_bk_s.item)
  return target;
}

size_t recharge_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paycert = 5;
  if (this->paycert().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paycert());
  }

  // string nichen = 9;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // int64 phone = 2;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // float rmb = 4;
  if (!(this->rmb() <= 0 && this->rmb() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 enable = 7;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  // int32 operator = 8;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_bk_s.item)
    MergeFrom(*source);
  }
}

void recharge_bk_s_item::MergeFrom(const recharge_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paycert().size() > 0) {
    _internal_set_paycert(from._internal_paycert());
  }
  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (!(from.rmb() <= 0 && from.rmb() >= 0)) {
    _internal_set_rmb(from._internal_rmb());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void recharge_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_bk_s_item::CopyFrom(const recharge_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_bk_s_item::IsInitialized() const {
  return true;
}

void recharge_bk_s_item::InternalSwap(recharge_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paycert_.Swap(&other->paycert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_bk_s_item, operator__)
      + sizeof(recharge_bk_s_item::operator__)
      - PROTOBUF_FIELD_OFFSET(recharge_bk_s_item, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_bk_s::_Internal {
 public:
};

recharge_bk_s::recharge_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_bk_s)
}
recharge_bk_s::recharge_bk_s(const recharge_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_page_, &from.total_page_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_page_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_bk_s)
}

void recharge_bk_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_page_)) + sizeof(type_));
}

recharge_bk_s::~recharge_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void recharge_bk_s::ArenaDtor(void* object) {
  recharge_bk_s* _this = reinterpret_cast< recharge_bk_s* >(object);
  (void)_this;
}
void recharge_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  ::memset(&total_page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&total_page_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.recharge_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.recharge_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_bk_s)
  return target;
}

size_t recharge_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.recharge_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_bk_s)
    MergeFrom(*source);
  }
}

void recharge_bk_s::MergeFrom(const recharge_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void recharge_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_bk_s::CopyFrom(const recharge_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_bk_s::IsInitialized() const {
  return true;
}

void recharge_bk_s::InternalSwap(recharge_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_bk_s, type_)
      + sizeof(recharge_bk_s::type_)
      - PROTOBUF_FIELD_OFFSET(recharge_bk_s, total_page_)>(
          reinterpret_cast<char*>(&total_page_),
          reinterpret_cast<char*>(&other->total_page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_oper_bk_c::_Internal {
 public:
};

recharge_oper_bk_c::recharge_oper_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_oper_bk_c)
}
recharge_oper_bk_c::recharge_oper_bk_c(const recharge_oper_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_oper_bk_c)
}

void recharge_oper_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

recharge_oper_bk_c::~recharge_oper_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_oper_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_oper_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void recharge_oper_bk_c::ArenaDtor(void* object) {
  recharge_oper_bk_c* _this = reinterpret_cast< recharge_oper_bk_c* >(object);
  (void)_this;
}
void recharge_oper_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_oper_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_oper_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_oper_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_oper_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_oper_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_oper_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_oper_bk_c)
  return target;
}

size_t recharge_oper_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_oper_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_oper_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_oper_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_oper_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_oper_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_oper_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_oper_bk_c)
    MergeFrom(*source);
  }
}

void recharge_oper_bk_c::MergeFrom(const recharge_oper_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_oper_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void recharge_oper_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_oper_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_oper_bk_c::CopyFrom(const recharge_oper_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_oper_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_oper_bk_c::IsInitialized() const {
  return true;
}

void recharge_oper_bk_c::InternalSwap(recharge_oper_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_oper_bk_c, type_)
      + sizeof(recharge_oper_bk_c::type_)
      - PROTOBUF_FIELD_OFFSET(recharge_oper_bk_c, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_oper_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recharge_oper_bk_s::_Internal {
 public:
};

recharge_oper_bk_s::recharge_oper_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.recharge_oper_bk_s)
}
recharge_oper_bk_s::recharge_oper_bk_s(const recharge_oper_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.recharge_oper_bk_s)
}

void recharge_oper_bk_s::SharedCtor() {
result_ = 0;
}

recharge_oper_bk_s::~recharge_oper_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.recharge_oper_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recharge_oper_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void recharge_oper_bk_s::ArenaDtor(void* object) {
  recharge_oper_bk_s* _this = reinterpret_cast< recharge_oper_bk_s* >(object);
  (void)_this;
}
void recharge_oper_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_oper_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_oper_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.recharge_oper_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_oper_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recharge_oper_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.recharge_oper_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.recharge_oper_bk_s)
  return target;
}

size_t recharge_oper_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.recharge_oper_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recharge_oper_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.recharge_oper_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const recharge_oper_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recharge_oper_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.recharge_oper_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.recharge_oper_bk_s)
    MergeFrom(*source);
  }
}

void recharge_oper_bk_s::MergeFrom(const recharge_oper_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.recharge_oper_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void recharge_oper_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.recharge_oper_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_oper_bk_s::CopyFrom(const recharge_oper_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.recharge_oper_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_oper_bk_s::IsInitialized() const {
  return true;
}

void recharge_oper_bk_s::InternalSwap(recharge_oper_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_oper_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_list_bk_c::_Internal {
 public:
};

user_list_bk_c::user_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_list_bk_c)
}
user_list_bk_c::user_list_bk_c(const user_list_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_list_bk_c)
}

void user_list_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curr_page_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
}

user_list_bk_c::~user_list_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_list_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_list_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_list_bk_c::ArenaDtor(void* object) {
  user_list_bk_c* _this = reinterpret_cast< user_list_bk_c* >(object);
  (void)_this;
}
void user_list_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_list_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_list_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_page_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(curr_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_list_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curr_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_list_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  // int32 curr_page = 3;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_list_bk_c)
  return target;
}

size_t user_list_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_list_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  // int32 curr_page = 3;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_list_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const user_list_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_list_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_list_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_list_bk_c)
    MergeFrom(*source);
  }
}

void user_list_bk_c::MergeFrom(const user_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void user_list_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_list_bk_c::CopyFrom(const user_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_list_bk_c::IsInitialized() const {
  return true;
}

void user_list_bk_c::InternalSwap(user_list_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_list_bk_c, curr_page_)
      + sizeof(user_list_bk_c::curr_page_)
      - PROTOBUF_FIELD_OFFSET(user_list_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_list_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_list_bk_s_item::_Internal {
 public:
};

user_list_bk_s_item::user_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_list_bk_s.item)
}
user_list_bk_s_item::user_list_bk_s_item(const user_list_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_list_bk_s.item)
}

void user_list_bk_s_item::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
}

user_list_bk_s_item::~user_list_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_list_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_list_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void user_list_bk_s_item::ArenaDtor(void* object) {
  user_list_bk_s_item* _this = reinterpret_cast< user_list_bk_s_item* >(object);
  (void)_this;
}
void user_list_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_list_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_list_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  pwd_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_list_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.user_list_bk_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dispatch_coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_coin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          activated_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float total_income = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          total_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float static_income = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          static_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float promote_current_income = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          promote_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float team_current_income = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          team_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 activated = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.user_list_bk_s.item.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          trade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parent_phone = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          parent_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_list_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.user_list_bk_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // int32 dispatch_coin = 3;
  if (this->dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dispatch_coin(), target);
  }

  // int32 activated_coin = 4;
  if (this->activated_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_activated_coin(), target);
  }

  // float total_income = 5;
  if (!(this->total_income() <= 0 && this->total_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_total_income(), target);
  }

  // float static_income = 6;
  if (!(this->static_income() <= 0 && this->static_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_static_income(), target);
  }

  // float promote_current_income = 7;
  if (!(this->promote_current_income() <= 0 && this->promote_current_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_promote_current_income(), target);
  }

  // float team_current_income = 8;
  if (!(this->team_current_income() <= 0 && this->team_current_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_team_current_income(), target);
  }

  // int32 activated = 9;
  if (this->activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_activated(), target);
  }

  // int32 enable = 10;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_enable(), target);
  }

  // string pwd = 11;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.user_list_bk_s.item.pwd");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_pwd(), target);
  }

  // int32 trade = 12;
  if (this->trade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_trade(), target);
  }

  // int64 parent_phone = 13;
  if (this->parent_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_parent_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_list_bk_s.item)
  return target;
}

size_t user_list_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_list_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string pwd = 11;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 dispatch_coin = 3;
  if (this->dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dispatch_coin());
  }

  // int32 activated_coin = 4;
  if (this->activated_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_coin());
  }

  // float total_income = 5;
  if (!(this->total_income() <= 0 && this->total_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float static_income = 6;
  if (!(this->static_income() <= 0 && this->static_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float promote_current_income = 7;
  if (!(this->promote_current_income() <= 0 && this->promote_current_income() >= 0)) {
    total_size += 1 + 4;
  }

  // float team_current_income = 8;
  if (!(this->team_current_income() <= 0 && this->team_current_income() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 activated = 9;
  if (this->activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated());
  }

  // int32 enable = 10;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  // int64 parent_phone = 13;
  if (this->parent_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parent_phone());
  }

  // int32 trade = 12;
  if (this->trade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_list_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const user_list_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_list_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_list_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_list_bk_s.item)
    MergeFrom(*source);
  }
}

void user_list_bk_s_item::MergeFrom(const user_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.dispatch_coin() != 0) {
    _internal_set_dispatch_coin(from._internal_dispatch_coin());
  }
  if (from.activated_coin() != 0) {
    _internal_set_activated_coin(from._internal_activated_coin());
  }
  if (!(from.total_income() <= 0 && from.total_income() >= 0)) {
    _internal_set_total_income(from._internal_total_income());
  }
  if (!(from.static_income() <= 0 && from.static_income() >= 0)) {
    _internal_set_static_income(from._internal_static_income());
  }
  if (!(from.promote_current_income() <= 0 && from.promote_current_income() >= 0)) {
    _internal_set_promote_current_income(from._internal_promote_current_income());
  }
  if (!(from.team_current_income() <= 0 && from.team_current_income() >= 0)) {
    _internal_set_team_current_income(from._internal_team_current_income());
  }
  if (from.activated() != 0) {
    _internal_set_activated(from._internal_activated());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.parent_phone() != 0) {
    _internal_set_parent_phone(from._internal_parent_phone());
  }
  if (from.trade() != 0) {
    _internal_set_trade(from._internal_trade());
  }
}

void user_list_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_list_bk_s_item::CopyFrom(const user_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_list_bk_s_item::IsInitialized() const {
  return true;
}

void user_list_bk_s_item::InternalSwap(user_list_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_list_bk_s_item, trade_)
      + sizeof(user_list_bk_s_item::trade_)
      - PROTOBUF_FIELD_OFFSET(user_list_bk_s_item, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_list_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_list_bk_s::_Internal {
 public:
};

user_list_bk_s::user_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_list_bk_s)
}
user_list_bk_s::user_list_bk_s(const user_list_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_page_ = from.total_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_list_bk_s)
}

void user_list_bk_s::SharedCtor() {
total_page_ = 0;
}

user_list_bk_s::~user_list_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_list_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_list_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_list_bk_s::ArenaDtor(void* object) {
  user_list_bk_s* _this = reinterpret_cast< user_list_bk_s* >(object);
  (void)_this;
}
void user_list_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_list_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_list_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  total_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_list_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.user_list_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_list_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.user_list_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_list_bk_s)
  return target;
}

size_t user_list_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_list_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.user_list_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_list_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const user_list_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_list_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_list_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_list_bk_s)
    MergeFrom(*source);
  }
}

void user_list_bk_s::MergeFrom(const user_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
}

void user_list_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_list_bk_s::CopyFrom(const user_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_list_bk_s::IsInitialized() const {
  return true;
}

void user_list_bk_s::InternalSwap(user_list_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(total_page_, other->total_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_list_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class update_user_bk_c::_Internal {
 public:
};

update_user_bk_c::update_user_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.update_user_bk_c)
}
update_user_bk_c::update_user_bk_c(const update_user_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArena());
  }
  ::memcpy(&dispatch_coin_, &from.dispatch_coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&dispatch_coin_)) + sizeof(trade_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.update_user_bk_c)
}

void update_user_bk_c::SharedCtor() {
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dispatch_coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&dispatch_coin_)) + sizeof(trade_));
}

update_user_bk_c::~update_user_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.update_user_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void update_user_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void update_user_bk_c::ArenaDtor(void* object) {
  update_user_bk_c* _this = reinterpret_cast< update_user_bk_c* >(object);
  (void)_this;
}
void update_user_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void update_user_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void update_user_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.update_user_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pwd_.ClearToEmpty();
  ::memset(&dispatch_coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_) -
      reinterpret_cast<char*>(&dispatch_coin_)) + sizeof(trade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* update_user_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dispatch_coin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dispatch_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activated_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 promote_current_income = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          promote_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 team_current_income = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          team_current_income_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.update_user_bk_c.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          trade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parent_phone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          parent_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 phone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* update_user_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.update_user_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dispatch_coin = 1;
  if (this->dispatch_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dispatch_coin(), target);
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_activated_coin(), target);
  }

  // int32 promote_current_income = 3;
  if (this->promote_current_income() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_promote_current_income(), target);
  }

  // int32 team_current_income = 4;
  if (this->team_current_income() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_team_current_income(), target);
  }

  // string pwd = 5;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.update_user_bk_c.pwd");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pwd(), target);
  }

  // int32 trade = 6;
  if (this->trade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_trade(), target);
  }

  // int64 parent_phone = 7;
  if (this->parent_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_parent_phone(), target);
  }

  // int64 phone = 8;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.update_user_bk_c)
  return target;
}

size_t update_user_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.update_user_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pwd = 5;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // int32 dispatch_coin = 1;
  if (this->dispatch_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dispatch_coin());
  }

  // int32 activated_coin = 2;
  if (this->activated_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_coin());
  }

  // int32 promote_current_income = 3;
  if (this->promote_current_income() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_promote_current_income());
  }

  // int32 team_current_income = 4;
  if (this->team_current_income() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team_current_income());
  }

  // int64 parent_phone = 7;
  if (this->parent_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parent_phone());
  }

  // int64 phone = 8;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 trade = 6;
  if (this->trade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_user_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.update_user_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const update_user_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<update_user_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.update_user_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.update_user_bk_c)
    MergeFrom(*source);
  }
}

void update_user_bk_c::MergeFrom(const update_user_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.update_user_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.dispatch_coin() != 0) {
    _internal_set_dispatch_coin(from._internal_dispatch_coin());
  }
  if (from.activated_coin() != 0) {
    _internal_set_activated_coin(from._internal_activated_coin());
  }
  if (from.promote_current_income() != 0) {
    _internal_set_promote_current_income(from._internal_promote_current_income());
  }
  if (from.team_current_income() != 0) {
    _internal_set_team_current_income(from._internal_team_current_income());
  }
  if (from.parent_phone() != 0) {
    _internal_set_parent_phone(from._internal_parent_phone());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.trade() != 0) {
    _internal_set_trade(from._internal_trade());
  }
}

void update_user_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.update_user_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_user_bk_c::CopyFrom(const update_user_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.update_user_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_user_bk_c::IsInitialized() const {
  return true;
}

void update_user_bk_c::InternalSwap(update_user_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(update_user_bk_c, trade_)
      + sizeof(update_user_bk_c::trade_)
      - PROTOBUF_FIELD_OFFSET(update_user_bk_c, dispatch_coin_)>(
          reinterpret_cast<char*>(&dispatch_coin_),
          reinterpret_cast<char*>(&other->dispatch_coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata update_user_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class update_user_bk_s::_Internal {
 public:
};

update_user_bk_s::update_user_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.update_user_bk_s)
}
update_user_bk_s::update_user_bk_s(const update_user_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.update_user_bk_s)
}

void update_user_bk_s::SharedCtor() {
result_ = 0;
}

update_user_bk_s::~update_user_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.update_user_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void update_user_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void update_user_bk_s::ArenaDtor(void* object) {
  update_user_bk_s* _this = reinterpret_cast< update_user_bk_s* >(object);
  (void)_this;
}
void update_user_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void update_user_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void update_user_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.update_user_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* update_user_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* update_user_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.update_user_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.update_user_bk_s)
  return target;
}

size_t update_user_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.update_user_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_user_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.update_user_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const update_user_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<update_user_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.update_user_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.update_user_bk_s)
    MergeFrom(*source);
  }
}

void update_user_bk_s::MergeFrom(const update_user_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.update_user_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void update_user_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.update_user_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_user_bk_s::CopyFrom(const update_user_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.update_user_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_user_bk_s::IsInitialized() const {
  return true;
}

void update_user_bk_s::InternalSwap(update_user_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata update_user_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_contract_list_bk_c::_Internal {
 public:
};

user_contract_list_bk_c::user_contract_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_contract_list_bk_c)
}
user_contract_list_bk_c::user_contract_list_bk_c(const user_contract_list_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_contract_list_bk_c)
}

void user_contract_list_bk_c::SharedCtor() {
phone_ = PROTOBUF_LONGLONG(0);
}

user_contract_list_bk_c::~user_contract_list_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_contract_list_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_contract_list_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_contract_list_bk_c::ArenaDtor(void* object) {
  user_contract_list_bk_c* _this = reinterpret_cast< user_contract_list_bk_c* >(object);
  (void)_this;
}
void user_contract_list_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_contract_list_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_contract_list_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_contract_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_contract_list_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_contract_list_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_contract_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 8;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_contract_list_bk_c)
  return target;
}

size_t user_contract_list_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_contract_list_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 8;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_contract_list_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_contract_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const user_contract_list_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_contract_list_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_contract_list_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_contract_list_bk_c)
    MergeFrom(*source);
  }
}

void user_contract_list_bk_c::MergeFrom(const user_contract_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_contract_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void user_contract_list_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_contract_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_contract_list_bk_c::CopyFrom(const user_contract_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_contract_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_contract_list_bk_c::IsInitialized() const {
  return true;
}

void user_contract_list_bk_c::InternalSwap(user_contract_list_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_contract_list_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_contract_list_bk_s_item::_Internal {
 public:
};

user_contract_list_bk_s_item::user_contract_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_contract_list_bk_s.item)
}
user_contract_list_bk_s_item::user_contract_list_bk_s_item(const user_contract_list_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_contract_list_bk_s.item)
}

void user_contract_list_bk_s_item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
}

user_contract_list_bk_s_item::~user_contract_list_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_contract_list_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_contract_list_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_contract_list_bk_s_item::ArenaDtor(void* object) {
  user_contract_list_bk_s_item* _this = reinterpret_cast< user_contract_list_bk_s_item* >(object);
  (void)_this;
}
void user_contract_list_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_contract_list_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_contract_list_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_contract_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_contract_list_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contract_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_contract_list_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_contract_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_contract_type(), target);
  }

  // float price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_price(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_contract_list_bk_s.item)
  return target;
}

size_t user_contract_list_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_contract_list_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 contract_type = 2;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // float price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_contract_list_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_contract_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const user_contract_list_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_contract_list_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_contract_list_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_contract_list_bk_s.item)
    MergeFrom(*source);
  }
}

void user_contract_list_bk_s_item::MergeFrom(const user_contract_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_contract_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void user_contract_list_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_contract_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_contract_list_bk_s_item::CopyFrom(const user_contract_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_contract_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_contract_list_bk_s_item::IsInitialized() const {
  return true;
}

void user_contract_list_bk_s_item::InternalSwap(user_contract_list_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_contract_list_bk_s_item, time_)
      + sizeof(user_contract_list_bk_s_item::time_)
      - PROTOBUF_FIELD_OFFSET(user_contract_list_bk_s_item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_contract_list_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_contract_list_bk_s::_Internal {
 public:
};

user_contract_list_bk_s::user_contract_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_contract_list_bk_s)
}
user_contract_list_bk_s::user_contract_list_bk_s(const user_contract_list_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_contract_list_bk_s)
}

void user_contract_list_bk_s::SharedCtor() {
}

user_contract_list_bk_s::~user_contract_list_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_contract_list_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_contract_list_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_contract_list_bk_s::ArenaDtor(void* object) {
  user_contract_list_bk_s* _this = reinterpret_cast< user_contract_list_bk_s* >(object);
  (void)_this;
}
void user_contract_list_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_contract_list_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_contract_list_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_contract_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_contract_list_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.user_contract_list_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_contract_list_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_contract_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.user_contract_list_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_contract_list_bk_s)
  return target;
}

size_t user_contract_list_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_contract_list_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.user_contract_list_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_contract_list_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_contract_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const user_contract_list_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_contract_list_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_contract_list_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_contract_list_bk_s)
    MergeFrom(*source);
  }
}

void user_contract_list_bk_s::MergeFrom(const user_contract_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_contract_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
}

void user_contract_list_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_contract_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_contract_list_bk_s::CopyFrom(const user_contract_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_contract_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_contract_list_bk_s::IsInitialized() const {
  return true;
}

void user_contract_list_bk_s::InternalSwap(user_contract_list_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_contract_list_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class del_user_contract_bk_c::_Internal {
 public:
};

del_user_contract_bk_c::del_user_contract_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.del_user_contract_bk_c)
}
del_user_contract_bk_c::del_user_contract_bk_c(const del_user_contract_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.del_user_contract_bk_c)
}

void del_user_contract_bk_c::SharedCtor() {
id_ = 0;
}

del_user_contract_bk_c::~del_user_contract_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.del_user_contract_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void del_user_contract_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void del_user_contract_bk_c::ArenaDtor(void* object) {
  del_user_contract_bk_c* _this = reinterpret_cast< del_user_contract_bk_c* >(object);
  (void)_this;
}
void del_user_contract_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void del_user_contract_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void del_user_contract_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.del_user_contract_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* del_user_contract_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* del_user_contract_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.del_user_contract_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.del_user_contract_bk_c)
  return target;
}

size_t del_user_contract_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.del_user_contract_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void del_user_contract_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.del_user_contract_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const del_user_contract_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<del_user_contract_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.del_user_contract_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.del_user_contract_bk_c)
    MergeFrom(*source);
  }
}

void del_user_contract_bk_c::MergeFrom(const del_user_contract_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.del_user_contract_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void del_user_contract_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.del_user_contract_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_user_contract_bk_c::CopyFrom(const del_user_contract_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.del_user_contract_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_user_contract_bk_c::IsInitialized() const {
  return true;
}

void del_user_contract_bk_c::InternalSwap(del_user_contract_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata del_user_contract_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class del_user_contract_bk_s::_Internal {
 public:
};

del_user_contract_bk_s::del_user_contract_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.del_user_contract_bk_s)
}
del_user_contract_bk_s::del_user_contract_bk_s(const del_user_contract_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.del_user_contract_bk_s)
}

void del_user_contract_bk_s::SharedCtor() {
result_ = 0;
}

del_user_contract_bk_s::~del_user_contract_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.del_user_contract_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void del_user_contract_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void del_user_contract_bk_s::ArenaDtor(void* object) {
  del_user_contract_bk_s* _this = reinterpret_cast< del_user_contract_bk_s* >(object);
  (void)_this;
}
void del_user_contract_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void del_user_contract_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void del_user_contract_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.del_user_contract_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* del_user_contract_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* del_user_contract_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.del_user_contract_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.del_user_contract_bk_s)
  return target;
}

size_t del_user_contract_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.del_user_contract_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void del_user_contract_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.del_user_contract_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const del_user_contract_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<del_user_contract_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.del_user_contract_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.del_user_contract_bk_s)
    MergeFrom(*source);
  }
}

void del_user_contract_bk_s::MergeFrom(const del_user_contract_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.del_user_contract_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void del_user_contract_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.del_user_contract_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_user_contract_bk_s::CopyFrom(const del_user_contract_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.del_user_contract_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_user_contract_bk_s::IsInitialized() const {
  return true;
}

void del_user_contract_bk_s::InternalSwap(del_user_contract_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata del_user_contract_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class name_verifie_list_bk_c::_Internal {
 public:
};

name_verifie_list_bk_c::name_verifie_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.name_verifie_list_bk_c)
}
name_verifie_list_bk_c::name_verifie_list_bk_c(const name_verifie_list_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  curr_page_ = from.curr_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.name_verifie_list_bk_c)
}

void name_verifie_list_bk_c::SharedCtor() {
curr_page_ = 0;
}

name_verifie_list_bk_c::~name_verifie_list_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.name_verifie_list_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void name_verifie_list_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void name_verifie_list_bk_c::ArenaDtor(void* object) {
  name_verifie_list_bk_c* _this = reinterpret_cast< name_verifie_list_bk_c* >(object);
  (void)_this;
}
void name_verifie_list_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_verifie_list_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_verifie_list_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.name_verifie_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curr_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_verifie_list_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curr_page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_verifie_list_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.name_verifie_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curr_page = 1;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.name_verifie_list_bk_c)
  return target;
}

size_t name_verifie_list_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.name_verifie_list_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curr_page = 1;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void name_verifie_list_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.name_verifie_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const name_verifie_list_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<name_verifie_list_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.name_verifie_list_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.name_verifie_list_bk_c)
    MergeFrom(*source);
  }
}

void name_verifie_list_bk_c::MergeFrom(const name_verifie_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.name_verifie_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void name_verifie_list_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.name_verifie_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_verifie_list_bk_c::CopyFrom(const name_verifie_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.name_verifie_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_verifie_list_bk_c::IsInitialized() const {
  return true;
}

void name_verifie_list_bk_c::InternalSwap(name_verifie_list_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(curr_page_, other->curr_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata name_verifie_list_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class name_verifie_list_bk_s_item::_Internal {
 public:
};

name_verifie_list_bk_s_item::name_verifie_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.name_verifie_list_bk_s.item)
}
name_verifie_list_bk_s_item::name_verifie_list_bk_s_item(const name_verifie_list_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idcard().empty()) {
    idcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idcard(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_verifie_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(name_verifie_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.name_verifie_list_bk_s.item)
}

void name_verifie_list_bk_s_item::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
idcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&name_verifie_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(name_verifie_));
}

name_verifie_list_bk_s_item::~name_verifie_list_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.name_verifie_list_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void name_verifie_list_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void name_verifie_list_bk_s_item::ArenaDtor(void* object) {
  name_verifie_list_bk_s_item* _this = reinterpret_cast< name_verifie_list_bk_s_item* >(object);
  (void)_this;
}
void name_verifie_list_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_verifie_list_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_verifie_list_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.name_verifie_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  name_.ClearToEmpty();
  idcard_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_verifie_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(name_verifie_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_verifie_list_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.name_verifie_list_bk_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.name_verifie_list_bk_s.item.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idcard = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_idcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.name_verifie_list_bk_s.item.idcard"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name_verifie = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          name_verifie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_verifie_list_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.name_verifie_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.name_verifie_list_bk_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // int32 activated = 3;
  if (this->activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_activated(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.name_verifie_list_bk_s.item.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string idcard = 5;
  if (this->idcard().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idcard().data(), static_cast<int>(this->_internal_idcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.name_verifie_list_bk_s.item.idcard");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_idcard(), target);
  }

  // int32 name_verifie = 6;
  if (this->name_verifie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_name_verifie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.name_verifie_list_bk_s.item)
  return target;
}

size_t name_verifie_list_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.name_verifie_list_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string idcard = 5;
  if (this->idcard().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idcard());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 activated = 3;
  if (this->activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated());
  }

  // int32 name_verifie = 6;
  if (this->name_verifie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name_verifie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void name_verifie_list_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.name_verifie_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const name_verifie_list_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<name_verifie_list_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.name_verifie_list_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.name_verifie_list_bk_s.item)
    MergeFrom(*source);
  }
}

void name_verifie_list_bk_s_item::MergeFrom(const name_verifie_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.name_verifie_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.idcard().size() > 0) {
    _internal_set_idcard(from._internal_idcard());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.activated() != 0) {
    _internal_set_activated(from._internal_activated());
  }
  if (from.name_verifie() != 0) {
    _internal_set_name_verifie(from._internal_name_verifie());
  }
}

void name_verifie_list_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.name_verifie_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_verifie_list_bk_s_item::CopyFrom(const name_verifie_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.name_verifie_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_verifie_list_bk_s_item::IsInitialized() const {
  return true;
}

void name_verifie_list_bk_s_item::InternalSwap(name_verifie_list_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idcard_.Swap(&other->idcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(name_verifie_list_bk_s_item, name_verifie_)
      + sizeof(name_verifie_list_bk_s_item::name_verifie_)
      - PROTOBUF_FIELD_OFFSET(name_verifie_list_bk_s_item, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata name_verifie_list_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class name_verifie_list_bk_s::_Internal {
 public:
};

name_verifie_list_bk_s::name_verifie_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.name_verifie_list_bk_s)
}
name_verifie_list_bk_s::name_verifie_list_bk_s(const name_verifie_list_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_page_ = from.total_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.name_verifie_list_bk_s)
}

void name_verifie_list_bk_s::SharedCtor() {
total_page_ = 0;
}

name_verifie_list_bk_s::~name_verifie_list_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.name_verifie_list_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void name_verifie_list_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void name_verifie_list_bk_s::ArenaDtor(void* object) {
  name_verifie_list_bk_s* _this = reinterpret_cast< name_verifie_list_bk_s* >(object);
  (void)_this;
}
void name_verifie_list_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_verifie_list_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_verifie_list_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.name_verifie_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  total_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_verifie_list_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.name_verifie_list_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_verifie_list_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.name_verifie_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.name_verifie_list_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.name_verifie_list_bk_s)
  return target;
}

size_t name_verifie_list_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.name_verifie_list_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.name_verifie_list_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void name_verifie_list_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.name_verifie_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const name_verifie_list_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<name_verifie_list_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.name_verifie_list_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.name_verifie_list_bk_s)
    MergeFrom(*source);
  }
}

void name_verifie_list_bk_s::MergeFrom(const name_verifie_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.name_verifie_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
}

void name_verifie_list_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.name_verifie_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_verifie_list_bk_s::CopyFrom(const name_verifie_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.name_verifie_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_verifie_list_bk_s::IsInitialized() const {
  return true;
}

void name_verifie_list_bk_s::InternalSwap(name_verifie_list_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(total_page_, other->total_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata name_verifie_list_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class name_verifie_oper_bk_c::_Internal {
 public:
};

name_verifie_oper_bk_c::name_verifie_oper_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.name_verifie_oper_bk_c)
}
name_verifie_oper_bk_c::name_verifie_oper_bk_c(const name_verifie_oper_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.name_verifie_oper_bk_c)
}

void name_verifie_oper_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(type_));
}

name_verifie_oper_bk_c::~name_verifie_oper_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.name_verifie_oper_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void name_verifie_oper_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void name_verifie_oper_bk_c::ArenaDtor(void* object) {
  name_verifie_oper_bk_c* _this = reinterpret_cast< name_verifie_oper_bk_c* >(object);
  (void)_this;
}
void name_verifie_oper_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_verifie_oper_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_verifie_oper_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.name_verifie_oper_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_verifie_oper_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_verifie_oper_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.name_verifie_oper_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.name_verifie_oper_bk_c)
  return target;
}

size_t name_verifie_oper_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.name_verifie_oper_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void name_verifie_oper_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.name_verifie_oper_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const name_verifie_oper_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<name_verifie_oper_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.name_verifie_oper_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.name_verifie_oper_bk_c)
    MergeFrom(*source);
  }
}

void name_verifie_oper_bk_c::MergeFrom(const name_verifie_oper_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.name_verifie_oper_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void name_verifie_oper_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.name_verifie_oper_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_verifie_oper_bk_c::CopyFrom(const name_verifie_oper_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.name_verifie_oper_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_verifie_oper_bk_c::IsInitialized() const {
  return true;
}

void name_verifie_oper_bk_c::InternalSwap(name_verifie_oper_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(name_verifie_oper_bk_c, type_)
      + sizeof(name_verifie_oper_bk_c::type_)
      - PROTOBUF_FIELD_OFFSET(name_verifie_oper_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata name_verifie_oper_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class name_verifie_oper_bk_s::_Internal {
 public:
};

name_verifie_oper_bk_s::name_verifie_oper_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.name_verifie_oper_bk_s)
}
name_verifie_oper_bk_s::name_verifie_oper_bk_s(const name_verifie_oper_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.name_verifie_oper_bk_s)
}

void name_verifie_oper_bk_s::SharedCtor() {
result_ = 0;
}

name_verifie_oper_bk_s::~name_verifie_oper_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.name_verifie_oper_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void name_verifie_oper_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void name_verifie_oper_bk_s::ArenaDtor(void* object) {
  name_verifie_oper_bk_s* _this = reinterpret_cast< name_verifie_oper_bk_s* >(object);
  (void)_this;
}
void name_verifie_oper_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_verifie_oper_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_verifie_oper_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.name_verifie_oper_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_verifie_oper_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_verifie_oper_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.name_verifie_oper_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.name_verifie_oper_bk_s)
  return target;
}

size_t name_verifie_oper_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.name_verifie_oper_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void name_verifie_oper_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.name_verifie_oper_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const name_verifie_oper_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<name_verifie_oper_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.name_verifie_oper_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.name_verifie_oper_bk_s)
    MergeFrom(*source);
  }
}

void name_verifie_oper_bk_s::MergeFrom(const name_verifie_oper_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.name_verifie_oper_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void name_verifie_oper_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.name_verifie_oper_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void name_verifie_oper_bk_s::CopyFrom(const name_verifie_oper_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.name_verifie_oper_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_verifie_oper_bk_s::IsInitialized() const {
  return true;
}

void name_verifie_oper_bk_s::InternalSwap(name_verifie_oper_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata name_verifie_oper_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_verifie_list_bk_c::_Internal {
 public:
};

pay_verifie_list_bk_c::pay_verifie_list_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_verifie_list_bk_c)
}
pay_verifie_list_bk_c::pay_verifie_list_bk_c(const pay_verifie_list_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  curr_page_ = from.curr_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_verifie_list_bk_c)
}

void pay_verifie_list_bk_c::SharedCtor() {
curr_page_ = 0;
}

pay_verifie_list_bk_c::~pay_verifie_list_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_verifie_list_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_verifie_list_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pay_verifie_list_bk_c::ArenaDtor(void* object) {
  pay_verifie_list_bk_c* _this = reinterpret_cast< pay_verifie_list_bk_c* >(object);
  (void)_this;
}
void pay_verifie_list_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_verifie_list_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_verifie_list_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_verifie_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curr_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_verifie_list_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curr_page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curr_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_verifie_list_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_verifie_list_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curr_page = 1;
  if (this->curr_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curr_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_verifie_list_bk_c)
  return target;
}

size_t pay_verifie_list_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_verifie_list_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 curr_page = 1;
  if (this->curr_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curr_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_verifie_list_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_verifie_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_verifie_list_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_verifie_list_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_verifie_list_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_verifie_list_bk_c)
    MergeFrom(*source);
  }
}

void pay_verifie_list_bk_c::MergeFrom(const pay_verifie_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_verifie_list_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curr_page() != 0) {
    _internal_set_curr_page(from._internal_curr_page());
  }
}

void pay_verifie_list_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_verifie_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_verifie_list_bk_c::CopyFrom(const pay_verifie_list_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_verifie_list_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_verifie_list_bk_c::IsInitialized() const {
  return true;
}

void pay_verifie_list_bk_c::InternalSwap(pay_verifie_list_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(curr_page_, other->curr_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_verifie_list_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_verifie_list_bk_s_item::_Internal {
 public:
};

pay_verifie_list_bk_s_item::pay_verifie_list_bk_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_verifie_list_bk_s.item)
}
pay_verifie_list_bk_s_item::pay_verifie_list_bk_s_item(const pay_verifie_list_bk_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_name().empty()) {
    bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_name(), 
      GetArena());
  }
  bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_cardid().empty()) {
    bank_cardid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_cardid(), 
      GetArena());
  }
  bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_user_name().empty()) {
    bank_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_user_name(), 
      GetArena());
  }
  ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ailpay_id().empty()) {
    ailpay_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ailpay_id(), 
      GetArena());
  }
  alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alipay_name().empty()) {
    alipay_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alipay_name(), 
      GetArena());
  }
  webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_webchat_name().empty()) {
    webchat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webchat_name(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&pay_verifie_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(pay_verifie_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_verifie_list_bk_s.item)
}

void pay_verifie_list_bk_s_item::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_cardid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bank_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ailpay_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alipay_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
webchat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pay_verifie_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(pay_verifie_));
}

pay_verifie_list_bk_s_item::~pay_verifie_list_bk_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_verifie_list_bk_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_verifie_list_bk_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_cardid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ailpay_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alipay_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webchat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pay_verifie_list_bk_s_item::ArenaDtor(void* object) {
  pay_verifie_list_bk_s_item* _this = reinterpret_cast< pay_verifie_list_bk_s_item* >(object);
  (void)_this;
}
void pay_verifie_list_bk_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_verifie_list_bk_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_verifie_list_bk_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  bank_name_.ClearToEmpty();
  bank_cardid_.ClearToEmpty();
  bank_user_name_.ClearToEmpty();
  ailpay_id_.ClearToEmpty();
  alipay_name_.ClearToEmpty();
  webchat_name_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pay_verifie_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(pay_verifie_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_verifie_list_bk_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bank_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.bank_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_cardid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bank_cardid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_user_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bank_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ailpay_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ailpay_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alipay_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_alipay_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string webchat_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_webchat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pay_verifie = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pay_verifie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_verifie_list_bk_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // int32 activated = 3;
  if (this->activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_activated(), target);
  }

  // string bank_name = 4;
  if (this->bank_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_name().data(), static_cast<int>(this->_internal_bank_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.bank_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bank_name(), target);
  }

  // string bank_cardid = 5;
  if (this->bank_cardid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_cardid().data(), static_cast<int>(this->_internal_bank_cardid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.bank_cardid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bank_cardid(), target);
  }

  // string bank_user_name = 6;
  if (this->bank_user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_user_name().data(), static_cast<int>(this->_internal_bank_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.bank_user_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bank_user_name(), target);
  }

  // string ailpay_id = 7;
  if (this->ailpay_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ailpay_id().data(), static_cast<int>(this->_internal_ailpay_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.ailpay_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ailpay_id(), target);
  }

  // string alipay_name = 8;
  if (this->alipay_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alipay_name().data(), static_cast<int>(this->_internal_alipay_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.alipay_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_alipay_name(), target);
  }

  // string webchat_name = 9;
  if (this->webchat_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webchat_name().data(), static_cast<int>(this->_internal_webchat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.pay_verifie_list_bk_s.item.webchat_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_webchat_name(), target);
  }

  // int32 pay_verifie = 10;
  if (this->pay_verifie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_pay_verifie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_verifie_list_bk_s.item)
  return target;
}

size_t pay_verifie_list_bk_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string bank_name = 4;
  if (this->bank_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_name());
  }

  // string bank_cardid = 5;
  if (this->bank_cardid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_cardid());
  }

  // string bank_user_name = 6;
  if (this->bank_user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_user_name());
  }

  // string ailpay_id = 7;
  if (this->ailpay_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ailpay_id());
  }

  // string alipay_name = 8;
  if (this->alipay_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alipay_name());
  }

  // string webchat_name = 9;
  if (this->webchat_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webchat_name());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 activated = 3;
  if (this->activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated());
  }

  // int32 pay_verifie = 10;
  if (this->pay_verifie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pay_verifie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_verifie_list_bk_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_verifie_list_bk_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_verifie_list_bk_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_verifie_list_bk_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_verifie_list_bk_s.item)
    MergeFrom(*source);
  }
}

void pay_verifie_list_bk_s_item::MergeFrom(const pay_verifie_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.bank_name().size() > 0) {
    _internal_set_bank_name(from._internal_bank_name());
  }
  if (from.bank_cardid().size() > 0) {
    _internal_set_bank_cardid(from._internal_bank_cardid());
  }
  if (from.bank_user_name().size() > 0) {
    _internal_set_bank_user_name(from._internal_bank_user_name());
  }
  if (from.ailpay_id().size() > 0) {
    _internal_set_ailpay_id(from._internal_ailpay_id());
  }
  if (from.alipay_name().size() > 0) {
    _internal_set_alipay_name(from._internal_alipay_name());
  }
  if (from.webchat_name().size() > 0) {
    _internal_set_webchat_name(from._internal_webchat_name());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.activated() != 0) {
    _internal_set_activated(from._internal_activated());
  }
  if (from.pay_verifie() != 0) {
    _internal_set_pay_verifie(from._internal_pay_verifie());
  }
}

void pay_verifie_list_bk_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_verifie_list_bk_s_item::CopyFrom(const pay_verifie_list_bk_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_verifie_list_bk_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_verifie_list_bk_s_item::IsInitialized() const {
  return true;
}

void pay_verifie_list_bk_s_item::InternalSwap(pay_verifie_list_bk_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_cardid_.Swap(&other->bank_cardid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_user_name_.Swap(&other->bank_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ailpay_id_.Swap(&other->ailpay_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alipay_name_.Swap(&other->alipay_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webchat_name_.Swap(&other->webchat_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pay_verifie_list_bk_s_item, pay_verifie_)
      + sizeof(pay_verifie_list_bk_s_item::pay_verifie_)
      - PROTOBUF_FIELD_OFFSET(pay_verifie_list_bk_s_item, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_verifie_list_bk_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_verifie_list_bk_s::_Internal {
 public:
};

pay_verifie_list_bk_s::pay_verifie_list_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_verifie_list_bk_s)
}
pay_verifie_list_bk_s::pay_verifie_list_bk_s(const pay_verifie_list_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_page_ = from.total_page_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_verifie_list_bk_s)
}

void pay_verifie_list_bk_s::SharedCtor() {
total_page_ = 0;
}

pay_verifie_list_bk_s::~pay_verifie_list_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_verifie_list_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_verifie_list_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pay_verifie_list_bk_s::ArenaDtor(void* object) {
  pay_verifie_list_bk_s* _this = reinterpret_cast< pay_verifie_list_bk_s* >(object);
  (void)_this;
}
void pay_verifie_list_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_verifie_list_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_verifie_list_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_verifie_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  total_page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_verifie_list_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.pay_verifie_list_bk_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_verifie_list_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_verifie_list_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.pay_verifie_list_bk_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_verifie_list_bk_s)
  return target;
}

size_t pay_verifie_list_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_verifie_list_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.pay_verifie_list_bk_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_page = 2;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_verifie_list_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_verifie_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_verifie_list_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_verifie_list_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_verifie_list_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_verifie_list_bk_s)
    MergeFrom(*source);
  }
}

void pay_verifie_list_bk_s::MergeFrom(const pay_verifie_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_verifie_list_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.total_page() != 0) {
    _internal_set_total_page(from._internal_total_page());
  }
}

void pay_verifie_list_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_verifie_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_verifie_list_bk_s::CopyFrom(const pay_verifie_list_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_verifie_list_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_verifie_list_bk_s::IsInitialized() const {
  return true;
}

void pay_verifie_list_bk_s::InternalSwap(pay_verifie_list_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(total_page_, other->total_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_verifie_list_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_verifie_oper_bk_c::_Internal {
 public:
};

pay_verifie_oper_bk_c::pay_verifie_oper_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_verifie_oper_bk_c)
}
pay_verifie_oper_bk_c::pay_verifie_oper_bk_c(const pay_verifie_oper_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_verifie_oper_bk_c)
}

void pay_verifie_oper_bk_c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(type_));
}

pay_verifie_oper_bk_c::~pay_verifie_oper_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_verifie_oper_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_verifie_oper_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pay_verifie_oper_bk_c::ArenaDtor(void* object) {
  pay_verifie_oper_bk_c* _this = reinterpret_cast< pay_verifie_oper_bk_c* >(object);
  (void)_this;
}
void pay_verifie_oper_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_verifie_oper_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_verifie_oper_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_verifie_oper_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_verifie_oper_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_verifie_oper_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_verifie_oper_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_verifie_oper_bk_c)
  return target;
}

size_t pay_verifie_oper_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_verifie_oper_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_verifie_oper_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_verifie_oper_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_verifie_oper_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_verifie_oper_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_verifie_oper_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_verifie_oper_bk_c)
    MergeFrom(*source);
  }
}

void pay_verifie_oper_bk_c::MergeFrom(const pay_verifie_oper_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_verifie_oper_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void pay_verifie_oper_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_verifie_oper_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_verifie_oper_bk_c::CopyFrom(const pay_verifie_oper_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_verifie_oper_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_verifie_oper_bk_c::IsInitialized() const {
  return true;
}

void pay_verifie_oper_bk_c::InternalSwap(pay_verifie_oper_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pay_verifie_oper_bk_c, type_)
      + sizeof(pay_verifie_oper_bk_c::type_)
      - PROTOBUF_FIELD_OFFSET(pay_verifie_oper_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_verifie_oper_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class pay_verifie_oper_bk_s::_Internal {
 public:
};

pay_verifie_oper_bk_s::pay_verifie_oper_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.pay_verifie_oper_bk_s)
}
pay_verifie_oper_bk_s::pay_verifie_oper_bk_s(const pay_verifie_oper_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.pay_verifie_oper_bk_s)
}

void pay_verifie_oper_bk_s::SharedCtor() {
result_ = 0;
}

pay_verifie_oper_bk_s::~pay_verifie_oper_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.pay_verifie_oper_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pay_verifie_oper_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pay_verifie_oper_bk_s::ArenaDtor(void* object) {
  pay_verifie_oper_bk_s* _this = reinterpret_cast< pay_verifie_oper_bk_s* >(object);
  (void)_this;
}
void pay_verifie_oper_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pay_verifie_oper_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pay_verifie_oper_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.pay_verifie_oper_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pay_verifie_oper_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pay_verifie_oper_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.pay_verifie_oper_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.pay_verifie_oper_bk_s)
  return target;
}

size_t pay_verifie_oper_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.pay_verifie_oper_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pay_verifie_oper_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.pay_verifie_oper_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const pay_verifie_oper_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pay_verifie_oper_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.pay_verifie_oper_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.pay_verifie_oper_bk_s)
    MergeFrom(*source);
  }
}

void pay_verifie_oper_bk_s::MergeFrom(const pay_verifie_oper_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.pay_verifie_oper_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void pay_verifie_oper_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.pay_verifie_oper_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pay_verifie_oper_bk_s::CopyFrom(const pay_verifie_oper_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.pay_verifie_oper_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pay_verifie_oper_bk_s::IsInitialized() const {
  return true;
}

void pay_verifie_oper_bk_s::InternalSwap(pay_verifie_oper_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pay_verifie_oper_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class create_user_bk_c::_Internal {
 public:
};

create_user_bk_c::create_user_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.create_user_bk_c)
}
create_user_bk_c::create_user_bk_c(const create_user_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.create_user_bk_c)
}

void create_user_bk_c::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
}

create_user_bk_c::~create_user_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.create_user_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_user_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void create_user_bk_c::ArenaDtor(void* object) {
  create_user_bk_c* _this = reinterpret_cast< create_user_bk_c* >(object);
  (void)_this;
}
void create_user_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_user_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void create_user_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.create_user_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  pwd_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(trade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_user_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.create_user_bk_c.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.create_user_bk_c.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trade = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_user_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.create_user_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.create_user_bk_c.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.create_user_bk_c.pwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pwd(), target);
  }

  // int32 trade = 4;
  if (this->trade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.create_user_bk_c)
  return target;
}

size_t create_user_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.create_user_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int32 trade = 4;
  if (this->trade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trade());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_user_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.create_user_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const create_user_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_user_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.create_user_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.create_user_bk_c)
    MergeFrom(*source);
  }
}

void create_user_bk_c::MergeFrom(const create_user_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.create_user_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.trade() != 0) {
    _internal_set_trade(from._internal_trade());
  }
}

void create_user_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.create_user_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_user_bk_c::CopyFrom(const create_user_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.create_user_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_user_bk_c::IsInitialized() const {
  return true;
}

void create_user_bk_c::InternalSwap(create_user_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(create_user_bk_c, trade_)
      + sizeof(create_user_bk_c::trade_)
      - PROTOBUF_FIELD_OFFSET(create_user_bk_c, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata create_user_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class create_user_bk_s::_Internal {
 public:
};

create_user_bk_s::create_user_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.create_user_bk_s)
}
create_user_bk_s::create_user_bk_s(const create_user_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.create_user_bk_s)
}

void create_user_bk_s::SharedCtor() {
result_ = 0;
}

create_user_bk_s::~create_user_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.create_user_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_user_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void create_user_bk_s::ArenaDtor(void* object) {
  create_user_bk_s* _this = reinterpret_cast< create_user_bk_s* >(object);
  (void)_this;
}
void create_user_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_user_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void create_user_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.create_user_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_user_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_user_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.create_user_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.create_user_bk_s)
  return target;
}

size_t create_user_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.create_user_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_user_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.create_user_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const create_user_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_user_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.create_user_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.create_user_bk_s)
    MergeFrom(*source);
  }
}

void create_user_bk_s::MergeFrom(const create_user_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.create_user_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void create_user_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.create_user_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_user_bk_s::CopyFrom(const create_user_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.create_user_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_user_bk_s::IsInitialized() const {
  return true;
}

void create_user_bk_s::InternalSwap(create_user_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_user_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_proxy_bk_c::_Internal {
 public:
};

user_proxy_bk_c::user_proxy_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_proxy_bk_c)
}
user_proxy_bk_c::user_proxy_bk_c(const user_proxy_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_proxy_bk_c)
}

void user_proxy_bk_c::SharedCtor() {
phone_ = PROTOBUF_LONGLONG(0);
}

user_proxy_bk_c::~user_proxy_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_proxy_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_proxy_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void user_proxy_bk_c::ArenaDtor(void* object) {
  user_proxy_bk_c* _this = reinterpret_cast< user_proxy_bk_c* >(object);
  (void)_this;
}
void user_proxy_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_proxy_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_proxy_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_proxy_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_proxy_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_proxy_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_proxy_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_proxy_bk_c)
  return target;
}

size_t user_proxy_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_proxy_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_proxy_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_proxy_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const user_proxy_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_proxy_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_proxy_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_proxy_bk_c)
    MergeFrom(*source);
  }
}

void user_proxy_bk_c::MergeFrom(const user_proxy_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_proxy_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void user_proxy_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_proxy_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_proxy_bk_c::CopyFrom(const user_proxy_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_proxy_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_proxy_bk_c::IsInitialized() const {
  return true;
}

void user_proxy_bk_c::InternalSwap(user_proxy_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_proxy_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class user_proxy_bk_s::_Internal {
 public:
};

user_proxy_bk_s::user_proxy_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.user_proxy_bk_s)
}
user_proxy_bk_s::user_proxy_bk_s(const user_proxy_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  parent_nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_nichen().empty()) {
    parent_nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_nichen(), 
      GetArena());
  }
  ::memcpy(&phone_, &from.phone_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_total_income_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(team_total_income_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.user_proxy_bk_s)
}

void user_proxy_bk_s::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_total_income_) -
    reinterpret_cast<char*>(&phone_)) + sizeof(team_total_income_));
}

user_proxy_bk_s::~user_proxy_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.user_proxy_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_proxy_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void user_proxy_bk_s::ArenaDtor(void* object) {
  user_proxy_bk_s* _this = reinterpret_cast< user_proxy_bk_s* >(object);
  (void)_this;
}
void user_proxy_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_proxy_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void user_proxy_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.user_proxy_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  parent_nichen_.ClearToEmpty();
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_total_income_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(team_total_income_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_proxy_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.user_proxy_bk_s.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parent_phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parent_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parent_nichen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_parent_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.user_proxy_bk_s.parent_nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sum_1_activated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sum_1_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count_1_phone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_1_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sum_2_activated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sum_2_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count_2_phone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          count_2_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sum_3_activated = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sum_3_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count_3_phone = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          count_3_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sum_99_activated = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sum_99_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count_99_phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          count_99_phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float team_total_income = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          team_total_income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_proxy_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.user_proxy_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.user_proxy_bk_s.nichen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nichen(), target);
  }

  // int64 parent_phone = 3;
  if (this->parent_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_parent_phone(), target);
  }

  // string parent_nichen = 4;
  if (this->parent_nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_nichen().data(), static_cast<int>(this->_internal_parent_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.user_proxy_bk_s.parent_nichen");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parent_nichen(), target);
  }

  // int32 sum_1_activated = 5;
  if (this->sum_1_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sum_1_activated(), target);
  }

  // int32 count_1_phone = 6;
  if (this->count_1_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_count_1_phone(), target);
  }

  // int32 sum_2_activated = 7;
  if (this->sum_2_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sum_2_activated(), target);
  }

  // int32 count_2_phone = 8;
  if (this->count_2_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_count_2_phone(), target);
  }

  // int32 sum_3_activated = 9;
  if (this->sum_3_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_sum_3_activated(), target);
  }

  // int32 count_3_phone = 10;
  if (this->count_3_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_count_3_phone(), target);
  }

  // int32 sum_99_activated = 11;
  if (this->sum_99_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_sum_99_activated(), target);
  }

  // int32 count_99_phone = 12;
  if (this->count_99_phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_count_99_phone(), target);
  }

  // float team_total_income = 13;
  if (!(this->team_total_income() <= 0 && this->team_total_income() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_team_total_income(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.user_proxy_bk_s)
  return target;
}

size_t user_proxy_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.user_proxy_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 2;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // string parent_nichen = 4;
  if (this->parent_nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_nichen());
  }

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  // int64 parent_phone = 3;
  if (this->parent_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parent_phone());
  }

  // int32 sum_1_activated = 5;
  if (this->sum_1_activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sum_1_activated());
  }

  // int32 count_1_phone = 6;
  if (this->count_1_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_1_phone());
  }

  // int32 sum_2_activated = 7;
  if (this->sum_2_activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sum_2_activated());
  }

  // int32 count_2_phone = 8;
  if (this->count_2_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_2_phone());
  }

  // int32 sum_3_activated = 9;
  if (this->sum_3_activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sum_3_activated());
  }

  // int32 count_3_phone = 10;
  if (this->count_3_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_3_phone());
  }

  // int32 sum_99_activated = 11;
  if (this->sum_99_activated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sum_99_activated());
  }

  // int32 count_99_phone = 12;
  if (this->count_99_phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_99_phone());
  }

  // float team_total_income = 13;
  if (!(this->team_total_income() <= 0 && this->team_total_income() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_proxy_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.user_proxy_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const user_proxy_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_proxy_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.user_proxy_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.user_proxy_bk_s)
    MergeFrom(*source);
  }
}

void user_proxy_bk_s::MergeFrom(const user_proxy_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.user_proxy_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.parent_nichen().size() > 0) {
    _internal_set_parent_nichen(from._internal_parent_nichen());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.parent_phone() != 0) {
    _internal_set_parent_phone(from._internal_parent_phone());
  }
  if (from.sum_1_activated() != 0) {
    _internal_set_sum_1_activated(from._internal_sum_1_activated());
  }
  if (from.count_1_phone() != 0) {
    _internal_set_count_1_phone(from._internal_count_1_phone());
  }
  if (from.sum_2_activated() != 0) {
    _internal_set_sum_2_activated(from._internal_sum_2_activated());
  }
  if (from.count_2_phone() != 0) {
    _internal_set_count_2_phone(from._internal_count_2_phone());
  }
  if (from.sum_3_activated() != 0) {
    _internal_set_sum_3_activated(from._internal_sum_3_activated());
  }
  if (from.count_3_phone() != 0) {
    _internal_set_count_3_phone(from._internal_count_3_phone());
  }
  if (from.sum_99_activated() != 0) {
    _internal_set_sum_99_activated(from._internal_sum_99_activated());
  }
  if (from.count_99_phone() != 0) {
    _internal_set_count_99_phone(from._internal_count_99_phone());
  }
  if (!(from.team_total_income() <= 0 && from.team_total_income() >= 0)) {
    _internal_set_team_total_income(from._internal_team_total_income());
  }
}

void user_proxy_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.user_proxy_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_proxy_bk_s::CopyFrom(const user_proxy_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.user_proxy_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_proxy_bk_s::IsInitialized() const {
  return true;
}

void user_proxy_bk_s::InternalSwap(user_proxy_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_nichen_.Swap(&other->parent_nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_proxy_bk_s, team_total_income_)
      + sizeof(user_proxy_bk_s::team_total_income_)
      - PROTOBUF_FIELD_OFFSET(user_proxy_bk_s, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_proxy_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class close_user_bk_c::_Internal {
 public:
};

close_user_bk_c::close_user_bk_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.close_user_bk_c)
}
close_user_bk_c::close_user_bk_c(const close_user_bk_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_ = from.phone_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.close_user_bk_c)
}

void close_user_bk_c::SharedCtor() {
phone_ = PROTOBUF_LONGLONG(0);
}

close_user_bk_c::~close_user_bk_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.close_user_bk_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void close_user_bk_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void close_user_bk_c::ArenaDtor(void* object) {
  close_user_bk_c* _this = reinterpret_cast< close_user_bk_c* >(object);
  (void)_this;
}
void close_user_bk_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void close_user_bk_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void close_user_bk_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.close_user_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* close_user_bk_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* close_user_bk_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.close_user_bk_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.close_user_bk_c)
  return target;
}

size_t close_user_bk_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.close_user_bk_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone = 1;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void close_user_bk_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.close_user_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  const close_user_bk_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<close_user_bk_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.close_user_bk_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.close_user_bk_c)
    MergeFrom(*source);
  }
}

void close_user_bk_c::MergeFrom(const close_user_bk_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.close_user_bk_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void close_user_bk_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.close_user_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void close_user_bk_c::CopyFrom(const close_user_bk_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.close_user_bk_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool close_user_bk_c::IsInitialized() const {
  return true;
}

void close_user_bk_c::InternalSwap(close_user_bk_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(phone_, other->phone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata close_user_bk_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class close_user_bk_s::_Internal {
 public:
};

close_user_bk_s::close_user_bk_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.close_user_bk_s)
}
close_user_bk_s::close_user_bk_s(const close_user_bk_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.close_user_bk_s)
}

void close_user_bk_s::SharedCtor() {
result_ = 0;
}

close_user_bk_s::~close_user_bk_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.close_user_bk_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void close_user_bk_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void close_user_bk_s::ArenaDtor(void* object) {
  close_user_bk_s* _this = reinterpret_cast< close_user_bk_s* >(object);
  (void)_this;
}
void close_user_bk_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void close_user_bk_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void close_user_bk_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.close_user_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* close_user_bk_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* close_user_bk_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.close_user_bk_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.close_user_bk_s)
  return target;
}

size_t close_user_bk_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.close_user_bk_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void close_user_bk_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.close_user_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  const close_user_bk_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<close_user_bk_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.close_user_bk_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.close_user_bk_s)
    MergeFrom(*source);
  }
}

void close_user_bk_s::MergeFrom(const close_user_bk_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.close_user_bk_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void close_user_bk_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.close_user_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void close_user_bk_s::CopyFrom(const close_user_bk_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.close_user_bk_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool close_user_bk_s::IsInitialized() const {
  return true;
}

void close_user_bk_s::InternalSwap(close_user_bk_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata close_user_bk_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class new_recharge_s::_Internal {
 public:
};

new_recharge_s::new_recharge_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.new_recharge_s)
}
new_recharge_s::new_recharge_s(const new_recharge_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.new_recharge_s)
}

void new_recharge_s::SharedCtor() {
result_ = 0;
}

new_recharge_s::~new_recharge_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.new_recharge_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void new_recharge_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void new_recharge_s::ArenaDtor(void* object) {
  new_recharge_s* _this = reinterpret_cast< new_recharge_s* >(object);
  (void)_this;
}
void new_recharge_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void new_recharge_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void new_recharge_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.new_recharge_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* new_recharge_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* new_recharge_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.new_recharge_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.new_recharge_s)
  return target;
}

size_t new_recharge_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.new_recharge_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void new_recharge_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.new_recharge_s)
  GOOGLE_DCHECK_NE(&from, this);
  const new_recharge_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<new_recharge_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.new_recharge_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.new_recharge_s)
    MergeFrom(*source);
  }
}

void new_recharge_s::MergeFrom(const new_recharge_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.new_recharge_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void new_recharge_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.new_recharge_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_recharge_s::CopyFrom(const new_recharge_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.new_recharge_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_recharge_s::IsInitialized() const {
  return true;
}

void new_recharge_s::InternalSwap(new_recharge_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata new_recharge_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_oper_list_c::_Internal {
 public:
};

contract_oper_list_c::contract_oper_list_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_oper_list_c)
}
contract_oper_list_c::contract_oper_list_c(const contract_oper_list_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_oper_list_c)
}

void contract_oper_list_c::SharedCtor() {
type_ = 0;
}

contract_oper_list_c::~contract_oper_list_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_oper_list_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_oper_list_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_oper_list_c::ArenaDtor(void* object) {
  contract_oper_list_c* _this = reinterpret_cast< contract_oper_list_c* >(object);
  (void)_this;
}
void contract_oper_list_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_oper_list_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_oper_list_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_oper_list_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_oper_list_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_oper_list_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_oper_list_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_oper_list_c)
  return target;
}

size_t contract_oper_list_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_oper_list_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_oper_list_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_oper_list_c)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_oper_list_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_oper_list_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_oper_list_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_oper_list_c)
    MergeFrom(*source);
  }
}

void contract_oper_list_c::MergeFrom(const contract_oper_list_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_oper_list_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void contract_oper_list_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_oper_list_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_oper_list_c::CopyFrom(const contract_oper_list_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_oper_list_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_oper_list_c::IsInitialized() const {
  return true;
}

void contract_oper_list_c::InternalSwap(contract_oper_list_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_oper_list_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_oper_list_s_item::_Internal {
 public:
};

contract_oper_list_s_item::contract_oper_list_s_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_oper_list_s.item)
}
contract_oper_list_s_item::contract_oper_list_s_item(const contract_oper_list_s_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nichen().empty()) {
    nichen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nichen(), 
      GetArena());
  }
  ::memcpy(&contract_type_, &from.contract_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&phone_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(phone_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_oper_list_s.item)
}

void contract_oper_list_s_item::SharedCtor() {
nichen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contract_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phone_) -
    reinterpret_cast<char*>(&contract_type_)) + sizeof(phone_));
}

contract_oper_list_s_item::~contract_oper_list_s_item() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_oper_list_s.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_oper_list_s_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nichen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void contract_oper_list_s_item::ArenaDtor(void* object) {
  contract_oper_list_s_item* _this = reinterpret_cast< contract_oper_list_s_item* >(object);
  (void)_this;
}
void contract_oper_list_s_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_oper_list_s_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_oper_list_s_item::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_oper_list_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nichen_.ClearToEmpty();
  ::memset(&contract_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phone_) -
      reinterpret_cast<char*>(&contract_type_)) + sizeof(phone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_oper_list_s_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contract_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contract_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nichen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nichen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frmpub.protocc.contract_oper_list_s.item.nichen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_oper_list_s_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_oper_list_s.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contract_type(), target);
  }

  // float price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_price(), target);
  }

  // int64 phone = 3;
  if (this->phone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_phone(), target);
  }

  // string nichen = 4;
  if (this->nichen().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nichen().data(), static_cast<int>(this->_internal_nichen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frmpub.protocc.contract_oper_list_s.item.nichen");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nichen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_oper_list_s.item)
  return target;
}

size_t contract_oper_list_s_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_oper_list_s.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nichen = 4;
  if (this->nichen().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nichen());
  }

  // int32 contract_type = 1;
  if (this->contract_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contract_type());
  }

  // float price = 2;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 phone = 3;
  if (this->phone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_oper_list_s_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_oper_list_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_oper_list_s_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_oper_list_s_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_oper_list_s.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_oper_list_s.item)
    MergeFrom(*source);
  }
}

void contract_oper_list_s_item::MergeFrom(const contract_oper_list_s_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_oper_list_s.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nichen().size() > 0) {
    _internal_set_nichen(from._internal_nichen());
  }
  if (from.contract_type() != 0) {
    _internal_set_contract_type(from._internal_contract_type());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.phone() != 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void contract_oper_list_s_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_oper_list_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_oper_list_s_item::CopyFrom(const contract_oper_list_s_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_oper_list_s.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_oper_list_s_item::IsInitialized() const {
  return true;
}

void contract_oper_list_s_item::InternalSwap(contract_oper_list_s_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nichen_.Swap(&other->nichen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(contract_oper_list_s_item, phone_)
      + sizeof(contract_oper_list_s_item::phone_)
      - PROTOBUF_FIELD_OFFSET(contract_oper_list_s_item, contract_type_)>(
          reinterpret_cast<char*>(&contract_type_),
          reinterpret_cast<char*>(&other->contract_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_oper_list_s_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_oper_list_s::_Internal {
 public:
};

contract_oper_list_s::contract_oper_list_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  its_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_oper_list_s)
}
contract_oper_list_s::contract_oper_list_s(const contract_oper_list_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      its_(from.its_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_oper_list_s)
}

void contract_oper_list_s::SharedCtor() {
type_ = 0;
}

contract_oper_list_s::~contract_oper_list_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_oper_list_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_oper_list_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_oper_list_s::ArenaDtor(void* object) {
  contract_oper_list_s* _this = reinterpret_cast< contract_oper_list_s* >(object);
  (void)_this;
}
void contract_oper_list_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_oper_list_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_oper_list_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_oper_list_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  its_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_oper_list_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frmpub.protocc.contract_oper_list_s.item its = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_its(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_oper_list_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_oper_list_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frmpub.protocc.contract_oper_list_s.item its = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_its_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_its(i), target, stream);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_oper_list_s)
  return target;
}

size_t contract_oper_list_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_oper_list_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frmpub.protocc.contract_oper_list_s.item its = 1;
  total_size += 1UL * this->_internal_its_size();
  for (const auto& msg : this->its_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_oper_list_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_oper_list_s)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_oper_list_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_oper_list_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_oper_list_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_oper_list_s)
    MergeFrom(*source);
  }
}

void contract_oper_list_s::MergeFrom(const contract_oper_list_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_oper_list_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  its_.MergeFrom(from.its_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void contract_oper_list_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_oper_list_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_oper_list_s::CopyFrom(const contract_oper_list_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_oper_list_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_oper_list_s::IsInitialized() const {
  return true;
}

void contract_oper_list_s::InternalSwap(contract_oper_list_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  its_.InternalSwap(&other->its_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_oper_list_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_oper_c::_Internal {
 public:
};

contract_oper_c::contract_oper_c(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_oper_c)
}
contract_oper_c::contract_oper_c(const contract_oper_c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_oper_c)
}

void contract_oper_c::SharedCtor() {
type_ = 0;
}

contract_oper_c::~contract_oper_c() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_oper_c)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_oper_c::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_oper_c::ArenaDtor(void* object) {
  contract_oper_c* _this = reinterpret_cast< contract_oper_c* >(object);
  (void)_this;
}
void contract_oper_c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_oper_c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_oper_c::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_oper_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_oper_c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_oper_c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_oper_c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_oper_c)
  return target;
}

size_t contract_oper_c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_oper_c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_oper_c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_oper_c)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_oper_c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_oper_c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_oper_c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_oper_c)
    MergeFrom(*source);
  }
}

void contract_oper_c::MergeFrom(const contract_oper_c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_oper_c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void contract_oper_c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_oper_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_oper_c::CopyFrom(const contract_oper_c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_oper_c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_oper_c::IsInitialized() const {
  return true;
}

void contract_oper_c::InternalSwap(contract_oper_c* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_oper_c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class contract_oper_s::_Internal {
 public:
};

contract_oper_s::contract_oper_s(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:frmpub.protocc.contract_oper_s)
}
contract_oper_s::contract_oper_s(const contract_oper_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:frmpub.protocc.contract_oper_s)
}

void contract_oper_s::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
}

contract_oper_s::~contract_oper_s() {
  // @@protoc_insertion_point(destructor:frmpub.protocc.contract_oper_s)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_oper_s::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void contract_oper_s::ArenaDtor(void* object) {
  contract_oper_s* _this = reinterpret_cast< contract_oper_s* >(object);
  (void)_this;
}
void contract_oper_s::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_oper_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_oper_s::Clear() {
// @@protoc_insertion_point(message_clear_start:frmpub.protocc.contract_oper_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_oper_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_oper_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frmpub.protocc.contract_oper_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frmpub.protocc.contract_oper_s)
  return target;
}

size_t contract_oper_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frmpub.protocc.contract_oper_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_oper_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frmpub.protocc.contract_oper_s)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_oper_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_oper_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frmpub.protocc.contract_oper_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frmpub.protocc.contract_oper_s)
    MergeFrom(*source);
  }
}

void contract_oper_s::MergeFrom(const contract_oper_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frmpub.protocc.contract_oper_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void contract_oper_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frmpub.protocc.contract_oper_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_oper_s::CopyFrom(const contract_oper_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frmpub.protocc.contract_oper_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_oper_s::IsInitialized() const {
  return true;
}

void contract_oper_s::InternalSwap(contract_oper_s* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(contract_oper_s, result_)
      + sizeof(contract_oper_s::result_)
      - PROTOBUF_FIELD_OFFSET(contract_oper_s, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_oper_s::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocc
}  // namespace frmpub
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frmpub::protocc::login_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::login_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::login_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::login_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::login_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::login_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::crucial_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::crucial_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::crucial_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::maillist_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::maillist_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::maillist_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::maillist_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::maillist_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::maillist_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::addmail_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::addmail_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::addmail_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::addmail_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::addmail_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::addmail_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_type_list_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_type_list_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_type_list_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_type_list_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_type_list_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_type_list_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::update_contract_type_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::update_contract_type_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::update_contract_type_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::update_contract_type_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::update_contract_type_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::update_contract_type_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::add_contract_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::add_contract_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::add_contract_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::add_contract_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::add_contract_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::add_contract_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_count_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_count_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_count_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_count_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_count_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_count_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::booking_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::booking_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::booking_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::ripe_count_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::ripe_count_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::ripe_count_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::ripe_count_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::ripe_count_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::ripe_count_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::ripe_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::ripe_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::ripe_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::ripe_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::ripe_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::ripe_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::ripe_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::ripe_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::ripe_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_list_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::order_list_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_list_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_list_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::order_list_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_list_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_list_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::order_list_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_list_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::order_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::order_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::order_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::order_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_oper_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_oper_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_oper_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::recharge_oper_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::recharge_oper_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::recharge_oper_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_list_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::user_list_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_list_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_list_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::user_list_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_list_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_list_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::user_list_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_list_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::update_user_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::update_user_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::update_user_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::update_user_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::update_user_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::update_user_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_contract_list_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::user_contract_list_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_contract_list_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_contract_list_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::user_contract_list_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_contract_list_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_contract_list_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::user_contract_list_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_contract_list_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::del_user_contract_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::del_user_contract_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::del_user_contract_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::del_user_contract_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::del_user_contract_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::del_user_contract_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::name_verifie_list_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::name_verifie_list_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::name_verifie_list_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::name_verifie_list_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::name_verifie_list_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::name_verifie_list_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::name_verifie_list_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::name_verifie_list_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::name_verifie_list_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::name_verifie_oper_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::name_verifie_oper_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::name_verifie_oper_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::name_verifie_oper_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::name_verifie_oper_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::name_verifie_oper_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_verifie_list_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_verifie_list_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_verifie_list_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_verifie_list_bk_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_verifie_list_bk_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_verifie_list_bk_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_verifie_list_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_verifie_list_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_verifie_list_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_verifie_oper_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_verifie_oper_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_verifie_oper_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::pay_verifie_oper_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::pay_verifie_oper_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::pay_verifie_oper_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::create_user_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::create_user_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::create_user_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::create_user_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::create_user_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::create_user_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_proxy_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::user_proxy_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_proxy_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::user_proxy_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::user_proxy_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::user_proxy_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::close_user_bk_c* Arena::CreateMaybeMessage< ::frmpub::protocc::close_user_bk_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::close_user_bk_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::close_user_bk_s* Arena::CreateMaybeMessage< ::frmpub::protocc::close_user_bk_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::close_user_bk_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::new_recharge_s* Arena::CreateMaybeMessage< ::frmpub::protocc::new_recharge_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::new_recharge_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_oper_list_c* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_oper_list_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_oper_list_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_oper_list_s_item* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_oper_list_s_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_oper_list_s_item >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_oper_list_s* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_oper_list_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_oper_list_s >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_oper_c* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_oper_c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_oper_c >(arena);
}
template<> PROTOBUF_NOINLINE ::frmpub::protocc::contract_oper_s* Arena::CreateMaybeMessage< ::frmpub::protocc::contract_oper_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frmpub::protocc::contract_oper_s >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
